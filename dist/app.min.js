const {Builder, By, Key, until} = require('selenium-webdriver');
var upstoxObjList = [];
var userObjList =[];
/* var userObjList =[
    {
        your_api_key :"ukXaJKtebf3pfLnbrplan3mDi1yOtV4I2cyia4aO",
        your_redirect_uri : "http://localhost:3000/callback/",//"https://robo-trader.herokuapp.com/callback/",//
        user :"169361",
        broker_password : "Jiyana@1234",
        password2f : "1983",
        api_secret:"70rkwasp80",
        isFullyAutomated:true
    }
] */
//setTimeout(getAllUsers, 1000);

async function getAllUsers()
{
    var query = "select * from User";
    var param = [];
    getAll(query,param).then(userList => {
    
        if(userList == undefined)
        {
            res.send("error")
        }
        else{
            //console.log("result > " + JSON.stringify(userList));
            userObjList = userList;
            autoLogin();
        }
    });  
}

 

var currentUserObj;
async function autoLogin(){
   var index= 0;
    userObjList.map(async(userObj)=>{
        
        if(!userObj.isFullyAutomated){
            return;
        }

        (async function init() {
            let driver;
            try {
                if(userObj.isFullyAutomated > 0 && userObj.user && userObj.your_api_key){
                    driver = await new Builder().forBrowser('chrome').build();
                    var up = new UpstoxBroker(userObj.your_api_key,userObj.api_secret,true);
                    var currentUserObj= userObj;
                    currentUserObj.traderObject = up;
                    upstoxObjList.push(currentUserObj);

                    await driver.get('https://api.upstox.com/index/dialog/authorize?apiKey='+userObj.your_api_key+'&redirect_uri='+userObj.your_redirect_uri+'&response_type=code');
                    await driver.findElement(By.name('username')).sendKeys(userObj.user, Key.RETURN);
                    await driver.findElement(By.name('password')).sendKeys(userObj.broker_password, Key.RETURN);
                    await driver.findElement(By.name('password2fa')).sendKeys(userObj.password2f, Key.RETURN);
                    await driver.executeScript('document.getElementById("allow").click();');
                }
            }  
            catch (e) {
                console.log("\n **autoLogin Error " + e);
            }
            finally {
                if(userObj.user && driver){
                    console.log("Login successfully at: " + new Date() +" : "+userObj.user )
                    await driver.quit();
                }
            }
        })();
    });
}
var SMA = require('technicalindicators').SMA;
var EMA = require('technicalindicators').EMA;
var RSI = require('technicalindicators').RSI;
var BB = require('technicalindicators').BollingerBands;
var ADL = require('technicalindicators').ADL;
var ADX = require('technicalindicators').ADX;
var ATR = require('technicalindicators').ATR
var MACD = require('technicalindicators').MACD;
var bullish = require('technicalindicators').bullish;

async function startBackTesting(symbol,stockData,strategyList,isBackTesting){ 
    var closes = [];
    var opens = [];
    var highs = [];
    var lows = [];
    var LASTTRADETIMEs = [];
    var values = stockData.map(async (obj) =>  {
        closes.push(Number(obj.CLOSE));       
        opens.push(Number(obj.OPEN));       
        highs.push(Number(obj.HIGH));       
        lows.push(Number(obj.LOW));       
        LASTTRADETIMEs.push(Number(obj.LASTTRADETIME));       
    });  
    var result = [];
    var output = new Array();
    LASTTRADETIMEs = LASTTRADETIMEs.reverse();//**********  dont't change **********  
    return Promise.all(strategyList.strategy.map(async (strategyObj) => {  
        return new Promise(function(resolved, rejected) {   
            Promise.all(strategyObj.indicators.map(async (indicatorObj) => {
                return new Promise(function(resolve, reject) {
                    try{
                        if(indicatorObj.indicator && indicatorObj.indicator != ""){
                            if(indicatorObj.values == "closes")
                                indicatorObj.values = eval(indicatorObj.values);
                            else
                                indicatorObj.values = closes;
                            
                            var str = indicatorObj.indicator+".calculate("+JSON.stringify(indicatorObj)+")";
                            var res = eval(str); 
                            var op = isBackTesting ? res.reverse():res.reverse().slice(0, 3);  //**********  dont't change **********  
                            output.push(op);     
                           // console.log("backTesting *indicators " +symbol +" > " +closes[0] +">> "+JSON.stringify(output));
                            indicatorObj = null;
                            resolve(op);   
                        }     
                        else{
                            resolve("");   
                        }                
                    }
                    catch(e){
                        reject(e);
                    }
                });        
            }))
            .then(obj => { 
                closes = closes.reverse(); //**********  dont't change **********  
                var strategyRes = [];

                for(var i=0;i < obj[0].length - 2;i++)
                {
                    if(result[i] == null || result[i] == undefined )
                    {
                        result[i] = new Array();
                    }
                    var flag = eval(strategyObj.strategy);   
                    
                    var india = moment.tz(new Date(Number(LASTTRADETIMEs[i])), "Asia/Kolkata");
                    india.format(); 
                    var d = india.date() +"/"+(india.month() + 1) +"/"+india.year()+" "+india.hour()+":"+india.minute();
                    result[i].push({date:d, flag : flag}); 
                }
                closes = closes.reverse(); //**********  dont't change **********  
                //console.log("\n \n  then " +strategyObj.strategy +"::: "+JSON.stringify(result));

                return resolved(result);                   
            })
            .catch(err => {
                rejected(err);
                console.log("INNER LOOP : " + err)
                err = null;
            });
        })
    }));
 }

Array.prototype.insert = function(i,...rest){
    return this.slice(0,i).concat(rest,this.slice(i));
}
var SMA = require('technicalindicators').SMA;
var EMA = require('technicalindicators').EMA;
var RSI = require('technicalindicators').RSI;
var BB = require('technicalindicators').BollingerBands;
var ADL = require('technicalindicators').ADL;
var ADX = require('technicalindicators').ADX;
var ATR = require('technicalindicators').ATR
var MACD = require('technicalindicators').MACD;
var bullish = require('technicalindicators').bullish;
var Lowest  = require('technicalindicators').Lowest;
var Highest = require('technicalindicators').Highest;

var async = require("async");
var allIndicators= [
    {
        "name":"number",
        "input":'0',
        "config":'number'
    },
    {
        "name":"close",
        "input":'',
        "config":'close'
    },
    {
        "name":"low",
        "input":'',
        "config":'low'
    },
    {
        "name":"high",
        "input":'',
        "config":'high'
    },
    {
        "name":"open",
        "input":'',
        "config":'open'
    },
    {
        "name":"volume",
        "input":'',
        "config":'volume'
    },
    {
        "name":"ATR",
        "input":'high,low,close,14',
        "config":'high,low,close,period'
    },
    {
        "name":"BB.upper",
        "input":'14,close,2',
        "config":'period,values,stdDev'
    },
    {
        "name":"BB.lower",
        "input":'14,close,2',
        "config":'period,values,stdDev'
    },{
        "name":"MACD",
        "input":'close,fastPeriod,slowPeriod,false,false',
        "config":'values,fastPeriod,slowPeriod,SimpleMAOscillator,SimpleMASignal'
    },{
        "name":"RSI",
        "input":'close,14',
        "config":'values,period'
    },{
        "name":"SMA",
        "input":'close,50',
        "config":'values,period'
    },{
        "name":"EMA",
        "input":'close,50',
        "config":'values,period'
    },{
        "name":"ADX",
        "input":'close,high,low,14',
        "config":'close,high,low,period'
    },{
        "name":"Lowest",
        "input":'close,14',
        "config":'values,period'
    },{
        "name":"Highest",
        "input":'close,14',
        "config":'values,period'
    }
];

class BaseStrategy {
    
    constructor() {
        //this.strategy = {};
    }
    
    async executeStrategy(symbol,stockData,strategyObj){
        //console.log("\n stockData : " + stockData.length);
        var that = this;
        return new Promise(function(resolved, rejected) {
            var close = [];
            var open = [];
            var high = [];
            var low = [];
            var volume = [];
            var timeStamp = [];
            var candle = {};

            var values = stockData.map(async (obj) =>  {
                close.push(Number(obj.CLOSE));       
                open.push(Number(obj.OPEN));       
                high.push(Number(obj.HIGH));       
                low.push(Number(obj.LOW));        
                timeStamp.push(Number(obj.LASTTRADETIME));       
                volume.push(Number(obj.TRADEDQTY));       
            }); 

            //timeStamp = timeStamp;//**********  dont't change **********  
            candle.close = close.reverse();
            candle.open = open.reverse();
            candle.high = high.reverse();
            candle.low = low.reverse();
            candle.timeStamp = timeStamp;
            candle.volume = volume.reverse();
           
            var result = [];
            var output = {};
            //console.log("Strategy 1: " + strategyObj.symbol+" : "+strategyObj.id +" : "+strategyObj.name+" : "+strategyObj.interval);
            if(strategyObj && strategyObj.indicators && strategyObj.indicators.length > 0){
                //console.log("Strategy : " + strategyObj.symbol+" : "+strategyObj.id +" : "+strategyObj.name+" : "+strategyObj.interval);
                Promise.all(strategyObj.indicators.map(async (indicatorObj) => {
                    //console.log("\n indicatorObj : " + JSON.stringify(indicatorObj));
                    return new Promise(function(resolve, reject) {
                        try{
                            if(indicatorObj.indicator1 && indicatorObj.indicator1 != "" 
                            && indicatorObj.indicator2 && indicatorObj.indicator2 != "")
                            {
                                output.op = indicatorObj.op;
                                //console.log("\n indicator2 - " +indicatorObj.indicator2 +" > " + String(indicatorObj.indicator2).split(".").length);
                                if(indicatorObj.indicator1 == 'number'){
                                    output.op1 = [indicatorObj.indicator_config1,indicatorObj.indicator_config1,indicatorObj.indicator_config1];
                                }
                                else if(indicatorObj.indicator1  == 'open' || indicatorObj.indicator1   == 'low' || indicatorObj.indicator1 == 'close' || indicatorObj.indicator1 == 'high'  || indicatorObj.indicator1 == 'volume' ){
                                    output.op1 = eval('candle.'+indicatorObj.indicator1).reverse().slice(0, 3);//reverse().
                                }
                                else if(String(indicatorObj.indicator1).split(".").length > 1){
                                    var str1 = indicatorObj.indicator1.split(".")[0]+".calculate("+JSON.stringify(that.getInputObject(candle,indicatorObj.indicator1,indicatorObj.indicator_config1))+")";
                                    var res1 = eval(str1); 
                                    //var op1 = res1[indicatorObj.indicator1.split(".")[1]].reverse().slice(0, 3);  //**********  dont't change **********  
                                   
                                    var result = res1.slice(0, 3); //reverse(). //**********  dont't change **********  
                                    var op1 = [];
                                    result.map(obj=>{
                                        op1.push(obj[indicatorObj.indicator2.split(".")[1]])
                                    });
                                    output.op1 = op1;
                                    //console.log("\n op1 - " +indicatorObj.indicator1 +" > " + op1);
                                }
                                else{
                                    var str1 = indicatorObj.indicator1+".calculate("+JSON.stringify(that.getInputObject(candle,indicatorObj.indicator1,indicatorObj.indicator_config1))+")";
                                    var res1 = eval(str1); 
                                    var op1 = res1.reverse().slice(0, 3); ////**********  dont't change **********  
                                    output.op1 = op1;
                                }
                                
                                if(indicatorObj.indicator2 == 'number'){
                                    output.op2 = [indicatorObj.indicator_config2,indicatorObj.indicator_config2,indicatorObj.indicator_config2];
                                }
                                else if(indicatorObj.indicator2 == 'open' || indicatorObj.indicator2 == 'low' || indicatorObj.indicator2 == 'close' || indicatorObj.indicator2 == 'high' || indicatorObj.indicator2 == 'volume')
                                {
                                    output.op2 = eval('candle.'+indicatorObj.indicator2).reverse().slice(0, 3);//
                                }   
                                else if(String(indicatorObj.indicator2).split(".").length > 1){
                                    var str2 = indicatorObj.indicator2.split(".")[0]+".calculate("+JSON.stringify(that.getInputObject(candle,indicatorObj.indicator2,indicatorObj.indicator_config2))+")";
                                     //console.log("\n op2 - " +indicatorObj.indicator2 +" > " + str2);
                                    var res2 = eval(str2); 
                                    //console.log("\n str2 - " +indicatorObj.indicator2 +" > " + res2 +" - "+ indicatorObj.indicator2.split(".")[1]);
                                    //var op2 = res2[indicatorObj.indicator2.split(".")[1]].reverse().slice(0, 3);  //**********  dont't change ********** 
                                    var result = res2.slice(0, 3);  ////**********  dont't change **********  
                                    var op2 = [];
                                    result.map(obj=>{
                                        op2.push(obj[indicatorObj.indicator2.split(".")[1]])
                                    });

                                    output.op2 = op2;
                                    //console.log("\n op3 - " +indicatorObj.indicator2 +" > " + op2);
                                }
                                else{
                                    var str2 = indicatorObj.indicator2+".calculate("+JSON.stringify(that.getInputObject(candle,indicatorObj.indicator2,indicatorObj.indicator_config2))+")";
                                    //console.log("\n indicators str:  " +str2);  
                                    var res2 = eval(str2);    
                                    var op2 = res2.reverse().slice(0, 3);  ////**********  dont't change **********  
                                    output.op2 = op2;
                                }
                                                                
                                //console.log("\n indicators :  " +strategyObj.name +": "+symbol +" > " +JSON.stringify(output));
                                res1 = indicatorObj = null;
                                //result.push(output);
                                resolve(output);   
                            }     
                            else{
                                console.error("First - " + e);
                                reject(e);
                            }                
                        }
                        catch(e){
                            console.error("Second  - " + e);
                            reject(e);
                        }
                    });        
                })).then(obj => { 
                    //candle.close = candle.close.reverse(); //**********  dont't change **********  
                    //candle.high = candle.high.reverse(); //**********  dont't change **********  
                    //candle.low = candle.low.reverse(); //**********  dont't change **********  
                    //candle.open = candle.open.reverse(); //**********  dont't change **********  
                
                    //console.log("Result 1:" + symbol +" : " + JSON.stringify(obj));

                    if(obj[0].op == "Crossed Above"){
                        //if(obj[0].op1[0].length > 0 && obj[0].op2[0].length > 0){
                            var strategyStr1 = obj[0].op1[0]+">="+obj[0].op2[0]; 
                            //console.log("Result :" + strategyStr1);
                            var strategy1 = eval(strategyStr1);
                            result.push(strategy1);  

                            var strategyStr2 = obj[0].op1[1]+"<"+obj[0].op2[1]; 
                            var strategy2 = eval(strategyStr2);

                            //console.log("Result :"  + strategyStr2);
                            result.push(strategy2);   
                       
                    }
                    else if(obj[0].op == "Crossed Below"){
                        //if(obj[0].op1[0].length > 0 && obj[0].op2[0].length > 0){
                            var strategyStr1 = obj[0].op1[0]+"<="+obj[0].op2[0]; 
                            var strategy1 = eval(strategyStr1);
                            result.push(strategy1); 
                            
                            var strategyStr2 = obj[0].op1[1]+">"+obj[0].op2[1]; 
                            var strategy2 = eval(strategyStr2);
                            result.push(strategy2);  
                      
                    }
                    else{
                        //console.log("obj " + symbol +" > "+JSON.stringify(obj));
                        //if(obj[0].op1.length > 0 && obj[0].op2.length > 0){
                            var strategyStr = obj[0].op1[0]+obj[0].op+obj[0].op2[0]; 
                            var strategy = eval(strategyStr);
                            result.push(strategy);   
                       
                    }
                   // candle.close = candle.close.reverse(); //**********  dont't change **********  
                   // candle.high = candle.high.reverse(); //**********  dont't change **********  
                   // candle.low = candle.low.reverse(); //**********  dont't change **********  
                   // candle.open = candle.open.reverse(); //**********  dont't change **********  
                    var d =new Date(Number(candle.timeStamp[0])); 
                   // console.log("result " + symbol +" : " + result);
                    var strategyRes = result.every(x => x == true);  
                    candle = output = result = d = null;
                    strategyObj.result = strategyRes;
                    return resolved(strategyObj);       
                })
                .catch(err => {
                    rejected(err);
                    console.error("ExecuteStrategy Error: " + symbol +" > " + err);
                    err = null;
                });
            }
        })
    }

    getInputObject(candle,indicator,config){
        var inputObj= {};
        var selectedObj = {};
        for(var i=0;i<allIndicators.length;i++){
            if(allIndicators[i]['name'] == indicator){
                selectedObj = allIndicators[i];
                break;
            }
        }

        var attr = String(selectedObj.config).split(',');
        //console.log('\n\n attr ' + allIndicators[i] +">> "+selectedObj.config +" > "+JSON.stringify(attr));
        var val = String(config).split(',');
        for(var i=0;i<attr.length;i++){
            if(val[i] == "close" || val[i] == "open" || val[i] == "low"|| val[i] == "high"||val[i] == "volume")
            {
                val[i] = eval('candle.'+val[i]);
                //val[i] = val[i].reverse(); //**********  dont't change ********** 
            }

            inputObj[attr[i]] = eval(val[i]);       
        }
        //console.log('\n\n\ inputObj ' + JSON.stringify(inputObj));
        return inputObj;
    }
}

//Sync Upstox data on by Interval, eg 15 min sync
async function applyStrategy(list,interval){ 
    //console.log("\nApplyStrategy > " + list.length +"::"+  interval); 
    //Promise.all(
    list.map(strategyObj =>  {
        //console.log(strategyObj.id +" : "+ strategyObj.symbol);
        strategyQueue.push({strategy: strategyObj}, function (err) {
            //console.log('strategyQueue  - ');// + strategyQueue.id +" : "+ strategyObj.symbol);
        });
    })//) 
}


var strategyQueue = async.queue(function(task, callback) {
    var strategyObj = task.strategy;
    var matchSymbols = [];  
    var symbol = strategyObj.symbol ? strategyObj.symbol:strategyObj;    
    var interval = strategyObj.interval;    
    //console.log("\n");
    getStockDataFromDb(symbol,interval).then(stockData => {
        //console.log("Symbol > " +symbol +":"+stockData.data.length);
        try{
            var data = JSON.parse(stockData.data); 
            //console.log("data > " +data.length +"::"+JSON.stringify(strategyObj));
            var base = new BaseStrategy();
           
            base.executeStrategy(strategyObj.symbol,data,strategyObj).then(finalResult => { 
                //console.log("finalResult > " + JSON.stringify(finalResult));
                var result = finalResult.result.every(x => x == true);  
                if(result){
                    matchSymbols.push(strategyObj.symbol);
                    //console.log("@ Strategy RESULT  > " + finalResult +"::"+ strategyObj.symbol);
                    matchSymbols.map(async (symbol) =>  {
                        //console.log("Place Order  : " +strategyObj.name +" : "+ strategyObj.interval +" : "+ strategyObj.symbol);
                        //eventEmitter.emit('placeOrder',{'strategy':strategyObj,"symbol":strategyObj.symbol,'interval':interval});
                    });

                    if(process.env.NODE_ENV=="production")
                    {
                        sendingMail("satish.patel41@gmail.com",strategyObj.name,matchSymbols).catch(console.error);
                    }
                }
                finalResult= strategyObj =base = null;     
                callback();        
            }).catch(error => 
            {
                console.error("base.executeStrategy ERROR > " + strategyObj.name +" : "+strategyObj.symbol +" : " + error);
                error = base = null;
                callback();     
            });
        }
        catch(e){
            console.error("base.executeStrategy Error: " + strategyObj.name +" : "+strategyObj.symbol +" : "+JSON.stringify(e));
            e = base = null;
            callback();     
        }
    });
},1);


strategyQueue.drain = function() {
 // console.log('all items have been processed');
};


async function executeLiveStrategy(list)
{  
    console.log('list - ' +list.length +" :: "+ isTradingHours);
    isTradingHours = true;
    if(isTradingHours){
        list.map(async(strategy)=>{
            await fetchLiveCandle(strategy.symbol,strategy.exchange,interval,start_date,end_date).then(response=>{
                //console.log('fetchLiveCandle - ' +response.OHLC); //applyStrategy([strategy],'15MINUTE'); 
                try{
                    var data = response.OHLC; 
                    //console.log('fetchLiveCandle - ' +data.length +" : "+ JSON.stringify(strategy)); 
                    var base = new BaseStrategy();
                    base.executeStrategy(strategy.symbol,data,strategy).then(finalResult => { 
                        //console.log("finalResult  : " +JSON.stringify(finalResult));
                        //var result = finalResult.result.every(x => x == true);  
                        if(finalResult.result){
                            price = data[0]['CLOSE'];
                            console.log("Place Order  --> " +strategy.name +" : "+ strategy.interval +" : "+ strategy.symbol +" : "+ price);
                            eventEmitter.emit('placeOrder',{'strategy':strategy,"symbol":strategy.symbol,'interval':interval,'price':price});
                            //eventEmitter.emit('sendNotification',{'strategy':strategy,"symbol":strategy.symbol,'interval':interval,'price':price});
                        
                            if(process.env.NODE_ENV=="production")
                            {
                                sendingMail("satish.patel41@gmail.com",strategy.name,matchSymbols).catch(console.error);
                            }
                        }
                        finalResult= strategy =base = null;     
                    }).catch(error => 
                    {
                        console.error("executeLiveStrategy -> base.executeStrategy -> " + strategy.name +" : "+strategy.symbol +" : " + error);
                        error = base = null;
                    });
                }
                catch(e){
                    console.error("executeLiveStrategy try catch: " + strategy.name +" : "+strategy.symbol +" : "+JSON.stringify(e));
                    e = base = null;
                }
            });
        });
    }
}
var chalk = require('chalk');
var async = require("async");
require('technicalindicators');


function getStockDataFromDb(symbol,interval)
{
    //console.log("getStockDataFromDb  " + symbol +" ::"+ interval);
    return new Promise((resolve, reject)=>{
        var symbolfile;
        try{      
            symbolfile = path.resolve(path.join(__dirname, '..', 'db/stock/'+symbol+'.json'));
        }
        catch(e){
            //console.log("getStockDataFromDb > Error > " + e);
            reject(e);
            e = null;
        }
        var lokiJson = new loki(symbolfile, 
        {
            autoload: true,
            autoloadCallback : onLoaded,
            autosave: true, 
            autosaveInterval: 4000
        }); 
        
        function onLoaded() {
            //var database1 =  lokiJson.getCollection('1MINUTE');
            var database = lokiJson.getCollection(interval);
            var stockData = [];
            try{
                 
                if(database && database.get(1) && database.get(1).OHLC != null){
                    
                    var stockDataList = database.get(1).OHLC;
                   /*  stockData = stockDataList.map(price=>{
                        var candle = new CandleData(price.OPEN,price.LOW,price.HIGH,price.CLOSE,price.LASTTRADETIME,price.TRADEDQTY,true)
                        return candle;
                    }); */

                    resolve({"symbol":symbol,data:JSON.stringify(stockDataList)});
                    lokiJson.close();  
                    stockDataList = database = null;
                    return;
                }
                else{
                    //console.log("DB " + database.get(1).OHLC);
                    resolve({"symbol":symbol,data:[]});
                    lokiJson.close();  
                    database = null;
                    return;
               }

                
                /* if(result && result != "" && database != null && interval !='1MINUTE'){
                    //lokiJson.saveDatabase();       
                    backFill(lokiJson,stockData,interval)
                    .then(data =>{
                        console.log("Third  " + data.length);
                        resolve({"symbol":symbol,data:JSON.stringify(data)});
                    });
                }
                if(result && result != "" && database != null ){
                        resolve({"symbol":symbol,data:JSON.stringify(data)});
                }
                else
                    resolve({"symbol":symbol,data:[]}); 
 */
                lokiJson.close();  
                database = null;
            }
            catch(e){
                console.log("getStockDataFromDb > Error > " + interval +"::"+e);
                lokiJson.close();
                reject(e);
                database =e = null;
            }   
        } 
    }); 
}

var queue = async.queue(function(task, callback) {
    var allIntervalsArr = ['15MINUTE','5MINUTE','60MINUTE','30MINUTE'];
    //console.log("task " +task.symbol);
    if(task.symbol){
        var symbolfile;
        try{      
            symbolfile = path.resolve(path.join(__dirname, '..', 'db/stock/'+task.symbol+'.json'));
        }
        catch(e){
            console.log("symbolfile Error > " + e);
        }

        var lokiJson = new loki(symbolfile, 
        {
            autoload: true,
            autoloadCallback : loadHandler,
            autosave: true, 
            unique: 'name',
            autosaveInterval: 10000
        }); 
        
        function loadHandler() {
            var database = lokiJson.getCollection(task.interval);
            if(!database){
                database = lokiJson.addCollection(task.interval,{unique: ['LASTTRADETIME']});
            }  
            var stockData = {};

            if(task.ex == null || task.ex == undefined || task.ex == '')
                task.ex = "NSE_EQ";
            //console.log('\n loadSymbol   ' +task.interval+"> "+ task.symbol +" :: "+ task.ex);

            loadSymbol(task.symbol,task.ex,task.interval,task.start_date,task.end_date).then(function (response) {
                try {
                    if(response != '' && response != undefined && response != null){
                        stockData = response;//JSON.parse(response);
                        //console.log('\n UPDATE   ' +task.interval+"> "+ task.symbol +" :: "+ JSON.stringify(response));

                        if(response && response.error){
                            lokiJson.close(); 
                        }
                        else if(database != null && database.get(1) && database.get(1).data && database.get(1).data.LASTTRADETIME && database.get(1).data.LASTTRADETIME == response.LASTTRADETIME){
                            console.log('Skip ! Do nothing   ' +task.interval+"> "+ task.symbol);
                        }
                        else if(database != null && response && response.code == 400) {
                           
                           console.log(task.interval+" - "+ task.symbol + " > "+response.status + " : "+response.message);
                           lokiJson.close();    
                          
                        } else if(database != null && response) // && response.code == 200
                        {
                           //console.log(JSON.stringify(stockData))
                            database.clear();
                           /*  var OHLC = [];
                            OHLC = Array(stockData.OHLC);
                            OHLC= OHLC.reverse(); 
                            stockData.OHLC = OHLC; */
                            database.insert(stockData);
                            //OHLC = null;  
                          
                        }
                        else{
                            lokiJson.close();    
                        }
                        lokiJson.saveDatabase();   
                        lokiJson.close(); 
                        
                        callback();         
                    } 
                    else{
                        lokiJson.close();    
                        callback();     
                    }
                    
                    lokiJson = database = symbolfile = task = stockData = response = null;

                } catch (err) {
                    lokiJson.close();    
                    console.log("loadHandler queue : err   > " + err);
                    symbolfile = task = err = null;
                }
            });
        }  
    } 
},20);

function fetchLiveCandle(symbol,ex,interval,start_date,end_date){
    
    return new Promise(function(resolve, reject) {
        var allIntervalsArr = ['15MINUTE','5MINUTE','60MINUTE','30MINUTE'];
         //console.log("task " +task.symbol);

        if(symbol){
            var symbolfile;
            try{      
                symbolfile = path.resolve(path.join(__dirname, '..', 'db/stock/'+symbol+'.json'));
            }
            catch(e){
                console.log("symbolfile Error > " + e);
            }

            var lokiJson = new loki(symbolfile, 
            {
                autoload: true,
                autoloadCallback : loadHandler,
                autosave: true, 
                unique: 'name',
                autosaveInterval: 10000
            }); 
            
            function loadHandler() {
                var database = lokiJson.getCollection(interval);
                if(!database){
                    database = lokiJson.addCollection(interval,{unique: ['LASTTRADETIME']});
                }  
                var stockData = {};

                if(ex == null || ex == undefined || ex == '')
                    ex = "NSE_EQ";
                //console.log('\n loadSymbol   ' +task.interval+"> "+ task.symbol +" :: "+ task.ex);

                loadSymbol(symbol,ex,interval,start_date,end_date).then(function (response) {
                    try {
                        //console.log('\n loadSymbol   ' +interval+"> "+ symbol +" :: "+ JSON.stringify(response));
                        if(response != '' && response != undefined && response != null){
                            stockData = response;//JSON.parse(response);
                            

                            if(response && response.error){
                                lokiJson.close(); 
                            }
                            else if(database != null && database.get(1) && database.get(1).data && database.get(1).data.LASTTRADETIME && database.get(1).data.LASTTRADETIME == response.LASTTRADETIME){
                                console.log('Skip ! Do nothing   ' +interval+"> "+ symbol);
                            }
                            else if(database != null && response && response.code == 400) {
                                console.log(interval+" - "+ symbol + " > "+response.status + " : "+response.message);
                                lokiJson.close();    
                            }
                            else if(database != null && response) // && response.code == 200
                            {
                                //console.log(JSON.stringify(stockData))
                                database.clear();
                                /*var OHLC = [];
                                OHLC = Array(stockData.OHLC);
                                OHLC= OHLC.reverse(); 
                                stockData.OHLC = OHLC; */
                                database.insert(stockData);
                                //OHLC = null;  
                            
                            }
                            else{
                                lokiJson.close();    
                            }
                            lokiJson.saveDatabase();   
                            lokiJson.close(); 
                            
                            resolve(stockData);
                        } 
                        else{
                            lokiJson.close();    
                            resolve([]); 
                        }
                        
                        lokiJson = database = symbolfile =  stockData = response = null;

                    } catch (err) {
                        lokiJson.close();    
                        resolve([]); 
                        console.log("loadHandler queue : err   > " + err);
                        symbolfile = err = null;
                    }
                });
            }  
        }
    });
}

function updateCollection(lokiJson,interval,stockData)
{
    return new Promise(function(resolve, reject) {
            var intervalNo = parseInt(interval);
            var now = new Date();
            var database = lokiJson.getCollection(interval);
            try{
                if(database && database.get(1) && database.get(1).data && database.get(1).data.LASTTRADETIME && database.get(1).data.LASTTRADETIME === response.LASTTRADETIME){
                    console.log('Do nothing   ' +interval);
                }
                else if(database && database.get(1) && database.get(1).data){

                    var symbolObj= {};
                    var count = 0;
                    var t = (database.get(1).data && database.get(1).data[database.get(1).data.length - 1] && database.get(1).data[database.get(1).data.length - 1].LASTTRADETIME) ? database.get(1).data[database.get(1).data.length - 1].LASTTRADETIME : 0;
                    var lows = [];
                    var highs = [];
                  
                    for(var i = 0; i < stockData.length;i++)
                    {
                        if(stockData[i].LASTTRADETIME > t)
                        {
                            var d1 = new Date(stockData[i].LASTTRADETIME);
                            var d2 = new Date(t);
                            
                            if(count % intervalNo == 0 && is15MinDataSync){
                                symbolObj = stockData[i];
                                database.get(1).data.push(stockData[i]);
                                count = 0;
                            }     
                            if(database.get(1).data[database.get(1).data.length - 1].OPEN < 0){
                                database.get(1).data[database.get(1).data.length - 1].OPEN = Number(stockData[i].OPEN); 
                            }
                            database.get(1).data[database.get(1).data.length - 1].CLOSE = Number(stockData[i].CLOSE);
                            database.get(1).data[database.get(1).data.length - 1].LOW = Math.min((stockData[i] && Number(stockData[i].LOW)) ? Number(stockData[i].LOW) : Number(symbolObj.LOW,symbolObj.LOW));
                            database.get(1).data[database.get(1).data.length - 1].HIGH = Math.max((stockData[i] && Number(stockData[i].HIGH)) ? Number(stockData[i].HIGH) : Number(symbolObj.HIGH,symbolObj.HIGH));
                            count++;   
                        }
                    }
                    t = count =  null;
            }
            resolve(1); 
            }
            catch(e){
                reject(e);
                e = null;
            } 
     });
}
// assign a callback
queue.drain = function() {
   // console.log('all items have been processed');
};

var stockJSON = {};
function backFill(lokiJson,stockData,interval)
{
   // console.log("interval  " + interval);
    return new Promise(function(resolve, reject) {
            var intervalNo = parseInt(interval);
            
            var database = lokiJson.getCollection(interval);
            stockJSON =  database.get(1).data;
            try{
            
                if(stockJSON){
                    var symbolObj= {};
                    var count = 0;
                   // console.log(' stockJSON   ' +stockJSON.length);
                    //stockJSON = stockJSON.slice(0, stockJSON.length - 3);
                 
                    var t = (stockJSON[stockJSON.length - 1] && stockJSON[stockJSON.length - 1].LASTTRADETIME) ? stockJSON[stockJSON.length - 1].LASTTRADETIME : 0;
                    var lows = [];
                    var highs = [];
                    var d1 = new Date(Number(t));
               
                        if(stockData && stockData.length > 0){
                            
                            for(var i = stockData.length - (intervalNo * 4); i < stockData.length;i++)
                            {
                                if(stockData[i].LASTTRADETIME >t)
                                {
                                    //console.log(' Stamp >   ' +i +":: "+intervalNo +" :: "+count +" :    "+new Date(Number(stockData[i].LASTTRADETIME)));
                                    if(count % intervalNo  == 0){
                                        if(i + intervalNo - 1 < stockData.length - 1 && !isDuplicate(stockJSON,stockData[i + intervalNo - 1].LASTTRADETIME)){
                                            i = i + intervalNo - 1;
                                            symbolObj = stockData[i];
                                            stockJSON.push(stockData[i]);
                                        }
                                        count = 0;
                                    } 
                                    else{    
                                        stockJSON[stockJSON.length - 1].CLOSE = Number(stockData[i].CLOSE);
                                        stockJSON[stockJSON.length - 1].LOW = Math.min((stockData[i] && Number(stockData[i].LOW)) ? Number(stockData[i].LOW) : Number(symbolObj.LOW,symbolObj.LOW));
                                        stockJSON[stockJSON.length - 1].HIGH = Math.max((stockData[i] && Number(stockData[i].HIGH)) ? Number(stockData[i].HIGH) : Number(symbolObj.HIGH,symbolObj.HIGH));
                                    }
                                    count++;   
                                }
                            }
                    } 
                    symbolObj = lows = highs =  t = count =  null;
            }
            database = null;
            stockData = null;
            resolve(stockJSON); 
            stockJSON = null;
            
            }
            catch(e){
                reject(e);
                e = null;
            } 
     });
}

function isDuplicate(arr,value)
{
    var flag = arr.find(a=>a.LASTTRADETIME == value);
    return flag;
}

let request = require('async-request');
const fetch = require("node-fetch");


let cnt=0;
//module.exports = {
    async function GET(url,params){
        //console.log("Global data request",url +" : "+ JSON.stringify(params));
        var selfInst = this;
        try {
            if (params){
                url = generateUrl(url, params);
            }
            return retry(getData,5,1000, url);// return getData (url);
        } catch (e) {
            console.error(e)
            return e;
        }
    }

    function generateUrl(url, params) {
        var i = 0, key;
        for (key in params) {
            if (i == 0)
                url += "?";
            else
                url += "&";
            url += key + '=' + params[key];
            i++;
        }
        return url;
    }
//} 


const retry = (fn, ms=1000,maxRetries=5,url) =>
     new Promise((resolve,reject) => { 
        var retries=0;
        fn(url)
        .then(resolve)
        .catch(() => {
            setTimeout(() => {
                console.log('retrying ...' + url);
                ++retries;
                if(retries==maxRetries) {
                    return reject('maximum retries exceeded');
                }
                retry(fn, ms,maxRetries,url).then(resolve);
            }, ms);
        })
});


const getData = async url => {
    //console.log(url);
    var response = await fetch(url);
    if(response.size == 0){
        //reject('');
    }
    const json = await response.json();
    return json;  
};

//let globalApiCall = require('globalApiCall');
let baseUrl = "http://nimblerest.lisuns.com:4531/";
// let api_key = '26df25b8-fce0-4a08-b298-f21dbbb88e23'; //default
//let api_key = '26df25b8-fce0-4a08-b298-f21dbbb88e23'; // 300000 
// let api_key = 'b911b3b7-511b-46fd-927f-a322d693f3b1'; // unlimited
// let api_key = 'b911b3b7-511b-46fd-927f-a322d693f3b1'; // block
//let api_key =  'ba556947-d006-4e19-b367-fa05d2359821';// //config.globaldata_api_key ||"dfd8b486-50fb-46ee-9d29-d834d0257a43"; // 
let api_key_arr =['2ef480f5-2d4e-4d81-96e2-513b50acc9d9','26df25b8-fce0-4a08-b298-f21dbbb88e23','b911b3b7-511b-46fd-927f-a322d693f3b1'] ;


var api_key = "fc697f44-2483-4301-9fda-49b2e2815e02"

async function getAllSymbol(data) {
    var url = baseUrl + "GetProducts/";
    var urlParameters ={
        accessKey: api_key,
        xml: false,
        instrumentType: data.instrumentType,
        exchange: data.exchange
    }
    let products = await GET(url, urlParameters);
    //console.log("products" + JSON.stringify(products));
    return products.PRODUCTS;
}


async function GetHistory3Minute(data) {
    var url = baseUrl + "GetHistory/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange: data.exchange,
        //instrumentType:'FUTSTK',
        instrumentIdentifier: data.instrumentIdentifier,
        periodicity: 'MINUTE',
        period:3,
        max: 180
    };
    let three_min_candle = await GET(url, urlParameters);
    return three_min_candle;
}

async function GetHistory5Minute(data) {

   //GetHistory1(data);


    var url = baseUrl + "GetHistory/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange: data.exchange,
        instrumentIdentifier: data.instrumentIdentifier,
        periodicity: 'MINUTE',
        period:5,
        max: 180
    };
    let five_min_candle = await GET(url, urlParameters);
    return five_min_candle;
}

async function GetHistory15Minute(data) {
    var url = baseUrl + "GetHistory/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange: data.exchange,
        instrumentIdentifier: data.instrumentIdentifier,
        period:15,
        periodicity: 'MINUTE',
        max: 180
    };
    let fifteen_min_candle = await GET(url, urlParameters);
    return fifteen_min_candle;
}

async function GetHistory30Minute(data) {
    var url = baseUrl + "GetHistory/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange: data.exchange,
        instrumentIdentifier: data.instrumentIdentifier,
        period:30,
        periodicity: 'MINUTE',
        max: 180
    };
    let fifteen_min_candle = await GET(url, urlParameters);
    return fifteen_min_candle;
}

async function GetHistory60Minute(data) {
    var url = baseUrl + "GetHistory/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange: data.exchange,
        instrumentIdentifier: data.instrumentIdentifier,
        period:1,
        periodicity: 'HOUR',
        max: 500
    };
    let fifteen_min_candle = await GET(url, urlParameters);
    return fifteen_min_candle;
}

async function GetHistory1Day(data) {
    var url = baseUrl + "GetHistory/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange: data.exchange,
        instrumentIdentifier: data.instrumentIdentifier,
        period:1,
        periodicity: 'DAY'
    };
    let fifteen_min_candle = await GET(url, urlParameters);
    return fifteen_min_candle;
}

async function GetFundamentalInstruments(){
    var url = baseUrl + "GetFundamentalInstruments/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false
    };
    let fundamentalInstruments = await GET(url, urlParameters);
    return fundamentalInstruments;
}

async function GetInstrumentTypes(data){
    var url = baseUrl + "GetInstrumentTypes/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange:data.exchange
    };
    let instrumentTypes = await GET(url, urlParameters);
    return instrumentTypes.INSTRUMENTTYPES;
}

async function GetExpiryDates(data){
    var url = baseUrl + "GetExpiryDates/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange:data.exchange,
        instrumentType:data.instrumentType,
        product:data.product
    };
    let expiryDates = await GET(url, urlParameters);
    return expiryDates;

}

async function GetInstruments(data){
    console.log(data)
    var url = baseUrl + "GetInstruments/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange:data.exchange,
        instrumentType:data.instrumentType,
        product:data.product,
        expiry:data.expiry,
        optionsType:data.optionsType    
    };
    let expiryDates = await GET(url, urlParameters);
    return expiryDates;

}

async function GetSnapshot (data){
    var url = baseUrl + "GetInstruments/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange:data.exchange,
        instrumentIdentifiers:data.instrumentIdentifiers
    };
    let snapShot = await GET(url, urlParameters);
    return snapShot;
}

async function GetLastQuote(data){
    var url = baseUrl + "GetLastQuote/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false,
        exchange:data.exchange,
        instrumentIdentifier:data.instrumentIdentifier
    };
    let lastQuote = await GET(url, urlParameters);
    return lastQuote;
}

async function GetExchanges() 
{
    var url = baseUrl + "GetExchanges/";
    var urlParameters =
    {
        accessKey: api_key,
        xml: false
    };
    let ex = await GET(url, urlParameters);
    return ex.EXCHANGES;
}

async function GetOptionType() 
{
    var url = baseUrl + "GetOptionTypes/";
    var urlParameters =
    {
        accessKey: api_key,
        exchange:data.exchange,
        xml: false
    };
    let ex = await GET(url, urlParameters);
    return ex.OPTIONTYPES;
}

async function GetStrikePrices(data) 
{
    var url = baseUrl + "GetStrikePrices/";
    var urlParameters =
    {
        accessKey: api_key,
        instrumentType:data.instrumentType,
        expiry:data.expiry,
        optionType:data.optionType,
        exchange:data.exchange,
        product:data.product,
        xml: false
    };
    let ex = await GET(url, urlParameters);
    return ex.STRIKEPRICES;
}


async function GetInstrumentsOnSearch(data) 
{
    var url = baseUrl + "GetInstrumentsOnSearch/";
    var urlParameters =
    {
        accessKey: api_key,
        exchange:data.exchange,
        instrumentType:data.instrumentType,
        search:data.search,
        xml: false
    };
    let ex = await GET(url, urlParameters);
    //console.log(JSON.stringify(ex.INSTRUMENTS));
    return ex.INSTRUMENTS;
}


var nifty = require('../db/list/nifty.json').list.sort();
var fno = require('../db/list//fno.json').list.sort();

var data = new Object();
data.exchange = "NFO";
//var fno = getAllSymbol(data);
//require('../db/list//fno.json').list.sort();


var nse = require('../db/list/nse.json').list.sort();

var indices = [];//{symbol:"NIFTY_50",ex:"nse_index"},
              //{symbol:"NIFTY%20BANK",ex:"nse_index"},
              //{symbol:"NIFTY_100",ex:"nse_index"},
              //{symbol:"BANKNIFTY19JUNFUT",ex:"NSE_FO"},
              //{symbol:"NIFTY19JUNFUT",ex:"NSE_FO"},
              //{symbol:"SBIN19JUNFUT",ex:"NSE_FO"}
              
              //];

var bankNifty_indices = [];//{symbol:"BANKNIFTY19JUNFUT",ex:"NSE_FO"}];
var bankNiftySymbol = "BANKNIFTY19JUNFUT";
watchList =  nifty;

'use strict';
const nodemailer = require('nodemailer');

var transporter1 = nodemailer.createTransport({
service: 'gmail',
auth: {
    user: 'satish.patel41@gmail.com',
    pass: 'Pratiksha@123'
}
});

// setup email data with unicode symbols
let mailOptions = {
    from: '"Admin" <satish.patel41@gmail.com>', // sender address
    to: 'satish.patel41@yahoo.com', // list of receivers
    subject: 'Alert : Call Generated', // Subject line
    text: 'Alert for', // plain text body
    html: '<p><b>Hello</b> Alert triggered on Wed Nov 7, 6:00 pm</p>' +
        '<p>Here\'s a nyan cat for you as an embedded attachment:<br/><img src="cid:nyan@example.com"/></p>',

    list: {
        // List-Help: <mailto:admin@example.com?subject=help>
        help: 'admin@example.com?subject=help',
        // List-Unsubscribe: <http://example.com> (Comment)
        unsubscribe: [
            {
                url: 'http://example.com/unsubscribe',
                comment: 'A short note about this url'
            },
            'unsubscribe@example.com'
        ],
        // List-ID: "comment" <example.com>
        id: {
            url: 'mylist.example.com',
            comment: 'This is my awesome list'
        }
    }
};


var transporter = nodemailer.createTransport({
    host: 'smtp.ethereal.email',
    port: 587,
    auth: {
        user: 'tito25@ethereal.email',
        pass: 'cXqDHqccV9T7VMqhzs'
    }
});

function sendingMail(toEmail, strategy, symbolsList){
    console.log("sendingMail> " + toEmail +" : "+ strategy +" :: "+symbolsList);
    var list = "<ul>";
    symbolsList.map(symbol =>
    {
        list+="<li>"+symbol+"</li>";
    });
    list+="</ul>";
   
    var india = moment.tz(new Date(), "Asia/Kolkata");
    india.format(); 
    var now = india.date() +"/"+(india.month() + 1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.LASTTRADETIME);
    

    mailOptions.subject = 'Scan alert ' + strategy, // Subject line
    mailOptions.to = toEmail;
    mailOptions.html =  "<h1>Alert triggered on " +now+"</h1><br><p>Below is the list of new stocks filtered through scan <u>" +strategy+"</u></p><br><p><b>" + list+"</b></p>";
    
    // send mail with defined transport object

    if(symbolsList.length > 1){
        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                return console.log(error);
            }
            console.log('Message sent: %s', info.messageId);
            //console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
        });
    }
}
/* 
"use strict";
const nodemailer = require("nodemailer");

// async..await is not allowed in global scope, must use a wrapper

async  function sendingMail(toEmail, strategy, symbolsList){

  // Generate test SMTP service account from ethereal.email
  // Only needed if you don't have a real mail account for testing
  let account = await nodemailer.createTestAccount();

  // create reusable transporter object using the default SMTP transport
  let transporter = nodemailer.createTransport({
    host: "smtp.ethereal.email",
    port: 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: account.user, // generated ethereal user
      pass: account.pass // generated ethereal password
    }
  });
  //console.log('nodemailer user  : ' +  account.user +" \n "+ account.pass);

  // setup email data with unicode symbols
  let mailOptions = {
    from: '"Fred Foo 👻" <foo@example.com>', // sender address
    to: "bar@example.com, baz@example.com", // list of receivers
    subject: "Hello ✔", // Subject line
    text: "Hello world?", // plain text body
    html: "<b>Hello world?</b>" // html body
  };

  var list = "<ul>";
  symbolsList.map(symbol =>
  {
      list+="<li>"+symbol+"</li>";
  });
  list+="</ul>";
 
  var india = moment.tz(new Date(), "Asia/Kolkata");
  india.format(); 
  var now = india.date() +"/"+(india.month() + 1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.LASTTRADETIME);
  

  mailOptions.subject = 'Scan alert ' + strategy, // Subject line
  mailOptions.to = toEmail;
  mailOptions.html =  "<h1>Alert triggered on " +now+"</h1><br><p>Below is the list of new stocks filtered through scan <u>" +strategy+"</u></p><br><p><b>" + list+"</b></p>";
 

  // send mail with defined transport object
  let info = await transporter.sendMail(mailOptions)

  //console.log("Message sent: %s", info.messageId);
  // Preview only available when sending through an Ethereal account
  console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));

  // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>
  // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...
}

 */
var cron = require('node-cron');
var chalk = require('chalk');
var list;
var moment = require('moment-timezone');
var now = new Date();
var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
india.format();        
var end_date = formatDate(india.date())+"-"+formatDate(india.month() + 1)+"-"+india.year();
now.setDate(now.getDate() - 21);
india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
india.format(); 
var start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1)+"-"+india.year();

cron.schedule('*/2 * * * *', () => {
    //getAllLiveStrategy();
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/1 * * * *', () => {
    /* load5minData();
    load15minData();
    load30minData();
    load60minData(); */
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/3 * * * *', () => {
    console.log(chalk.blue('running a task every 3 minutes ' + new Date()));
    load3minData();
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/1 * * * *', () => {
  
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/5 * * * *', () => {
    console.log(chalk.blue('running a task every 5 minutes ' + new Date()));
    load5minData();
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/10 * * * *', () => {
    console.log(chalk.blue('running a task every 10 minutes ' + new Date()));
    load10minData();
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/15 * * * *', () => {
    console.log(chalk.blue('running a task every 15 minutes ' + new Date()));
    load15minData();   
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/30 * * * *', () => {
    console.log(chalk.blue('running a task every 30 minutes ' + new Date()));
    load30minData();
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('0 */1 * * *', () => {
    
    console.log(chalk.blue('running a task every 1 hour' + new Date()));
    load60minData();
    
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('59 23 * * *', () => {
    //console.log(chalk.yellow('Clean cache data'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});



// At 9:00 /autoLogin
cron.schedule('0 9 * * *', () => {
    console.log('Good morning : 9:00 autoLogin !');
    getAllLiveStrategy();
    autoLogin();    
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

// At 9:15 /trading Hours
cron.schedule('14 9 * * *', () => {
    isTradingHours = getTradingHours();
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

// At 3:15 /trading Hours
cron.schedule('30 15 * * *', () => {
    isTradingHours = getTradingHours();
 }, {
 scheduled: true,
 timezone: "Asia/Kolkata"
 });


// At 9:30
cron.schedule('31 9 * * *', () => {
    console.log('Good morning : 9:30 call');
    interval = '15MINUTE';

    /* Promise.all(open_low_high_List.map(async(strategy) =>{
        applyStrategy(watchList,interval,strategy); 
    })).then(function(result) {
        bollinger_open_List.map(async(strategy) =>{
            applyStrategy(watchList,interval,strategy); 
        });
        console.log('9:30 call result : ' + result);        
    }) */
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('0 18 * * *', () => {
    load1dayData();
    console.log(chalk.blue('running a task every 1 day'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('0 19 * * *', () => {
    load1WeekData();
    console.log(chalk.blue('running a task every 1 day'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

function load1WeekData()
{
    interval = '1WEEK';
    syncLiveAllStockData(watchList,interval,start_date,end_date);  
}

function load1dayData()
{
    interval = '1DAY';
    let promise = new Promise(function(resolve, reject) {
        const list = strategyList.filter(strategy => strategy.interval == '1DAY');
        syncLiveAllStockData(list,interval,start_date,end_date); 
        setTimeout(function() {
            resolve(1);
        },1000); 
    }).then(res=>{
        const list = strategyList.filter(strategy => strategy.interval == interval);
        console.log("1DAY strategy "  +list.length);
        applyStrategy(list,interval); 
        now = interval = india = start_date = null;
    }); 
}

function load60minData()
{
    now = new Date();
    now.setDate(now.getDate() - 6);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format(); 
    const list = strategyList.filter(strategy => strategy.interval == '60MINUTE');
    if(list.length > 0)
        executeLiveStrategy(list);
}

function load30minData()
{ 
    now = new Date();
    now.setDate(now.getDate() - 6);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format(); 
    start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1) +"-"+india.year();
    interval = '30MINUTE';
    const list = strategyList.filter(strategy => strategy.interval == '30MINUTE');
    if(list.length > 0)
        executeLiveStrategy(list);  
}

function load10minData()
{
    interval = '10MINUTE';   
    now = new Date();
    now.setDate(now.getDate() - 6);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format();    
    start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1) +"-"+india.year(); 
    const list = strategyList.filter(strategy => strategy.interval == '10MINUTE');
    if(list.length > 0)
        executeLiveStrategy(list);
}

function load5minData()
{
    interval = '5MINUTE';
    now = new Date();
    now.setDate(now.getDate() - 6);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format(); 
    start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1) +"-"+india.year();
    const list = strategyList.filter(strategy => strategy.interval == '5MINUTE');
    if(list.length > 0)
        executeLiveStrategy(list);
}

function load3minData()
{
    //getAllLiveStrategy();
    interval = '3MINUTE';
    now = new Date();
    now.setDate(now.getDate() - 2);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format();     
    start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1) +"-"+india.year();

    isTradingHours = getTradingHours();
    
    //console.log("load3minData StrategyList > " + strategyList.length);   
    const list = strategyList.filter(strategy => strategy.interval == '3MINUTE');
    if(list.length > 0)
        executeLiveStrategy(list);
}

function load1minData()
{
    interval = '1MINUTE';
    now = new Date();
    now.setDate(now.getDate() - 2);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format(); 
    start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1) +"-"+india.year();

    let promise = new Promise(function(resolve, reject) {
        syncLiveAllStockData(indices,interval,start_date,end_date);
        syncLiveAllStockData(watchList,interval,start_date,end_date);
        is15MinDataSync = false;
        resolve(1);      
    }).then(res=>{
        getPercent_list(watchList);
        getGapUpDown(watchList);
        now = interval = india = start_date = null; 
    });
}

async function load15minData()
{   
    interval = '15MINUTE';
    now = new Date();
    now.setDate(now.getDate() - 6);
    india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
    india.format(); 
    start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1) +"-"+india.year();
    const list = strategyList.filter(strategy => strategy.interval == '15MINUTE');
    if(list.length > 0)
        executeLiveStrategy(list);
}
var express = require('express');
var compression = require('compression')
var moment = require('moment-timezone');
var bodyParser = require('body-parser');
var chalk = require('chalk');
var fs = require('fs');
var url = require('url');
var cluster = require('cluster');
var session = require('express-session');
var FileStore = require('session-file-store')(session);
var Store = require('data-store');
var async = require('async');
const querystring = require('querystring');
var store = new Store({ path: 'store.json' });
const PORT = process.env.PORT || 3000;
var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
var date = new Date();
var __dirname = "views"
var exchanges =  [ 'MCX_FO', 'BSE_EQ', 'NSE_EQ', 'NSE_FO', 'NCD_FO'];
var today = date.getDate() +"-"+(date.getMonth() + 1) +"-"+date.getFullYear();
var time = date +":"+date.getHours() +":"+date.getMinutes();   
var fs = require('fs');
var events = require('events');
var eventEmitter = new events.EventEmitter();
var is15MinDataSync = false;
var nseSymbolList = [];
var isTradingHours = getTradingHours();

/* var numReqs = 0; 
if (cluster.isMaster) {
  // Fork workers.
  let cpus = 1;//require('os').cpus().length;
  console.log(chalk.green("cpus "  +cpus));
  for (var i = 0; i < cpus; i++) {
    var worker = cluster.fork();
 
    worker.on('message', function(msg) {
    
    });
  }
 
  cluster.on('death', function(worker) {
    console.log(chalk.red('worker ' + worker.pid + ' died'));
  });
} else { */
    var app = express();
    app.use(express.static('public'));
    // compress all responses
    app.use(compression());
    app.use(bodyParser.json()); // support json encoded bodies
    app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies
    app.use(session(
        {
            store: new FileStore({
                path: './session-store'
            }),
            name: '_fs_cookie', // cookie will show up as foo site
            resave: false,
            saveUninitialized: false,
            secret: "00777",
            cookie: {
                maxAge: 1000 * 60 * 60 * 10 * 15  
            }
        }    
    ));

    app.use(function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        next();
    });

  
    var callBackCount = 0;
    app.get('/callback', function (req, res) {
        var q = url.parse(req.url, true).query;
        var code = q.code;
        console.log("** code > " +callBackCount +" > "+ code + " > " + upstoxObjList);
        upstoxObjList[callBackCount]['traderObject'].getUpstoxAccessToken(code);
       // getAllData();
        q = null;
        callBackCount++;
    });
  
    app.get('/manualLogin/:your_api_key/:api_secret', function (req, res) {
        var your_api_key = req.params.your_api_key;  
        var api_secret = req.params.api_secret;  
        var userObj = {};
        userObj.your_api_key = your_api_key;
        userObj.api_secret = api_secret;
        userObj.traderObject = {};

        var up = new UpstoxBroker(your_api_key,api_secret,false);
        currentUserObj= userObj.traderObject = up;
        userObjList[index] = userObj;
        currentUserObj.traderObject = up;
        upstoxObjList.push(currentUserObj);
        res.send(up.loginUrl);
    });

    app.get('/welcome', checkSignIn,function (req, res) {
        res.send('<b>Hello</b> welcome to my http server made with express');
    });

    app.get('/login', function (req, res) {
        res.sendFile("login.html", {"root": __dirname});
    });

    app.get('/logout', function(req, res){
         req.session.destroy(function(){
            console.log(chalk.blue("user logged out."));
        });
        res.redirect('/login');
    });

    function checkSignIn(req, res,next){
        if(req.session.user){
            next();     //If session exists, proceed to page
        } else {
            //var err = new Error("Not logged in!");
            console.log(chalk.blue(JSON.stringify(req.session) +" session \n"+  req.session.user));
            res.sendFile("login.html", {"root": __dirname});
        }       
    }

    app.post('/login', function (req, res) {
    var email = req.body.username;
    var psw = req.body.password;

    if(email){
        
        var query = "select uid,name,isSuperAdmin,isVerified from User where email=? and password=?";
        var param = [email,psw];
        getFirst(query,param).then(user => {
                //console.log("result > " + JSON.stringify(user));
                if(user == undefined)
                {
                    res.send("error")
                }
                else{
                        req.session.user = user;
                        res.send(user);
                   
                }
            });     
    }
    else
        res.sendFile("login.html", {"root": __dirname});
    });

    app.post('/api/updateProfile',checkSignIn, function (req, res) {
        var profileObj = JSON.parse(req.body.data);
        
        //console.log("profileObj > " + JSON.stringify(profileObj));
        var name = profileObj.name;
        var mobile = profileObj.mobile;
        var email = profileObj.email;
        var your_api_key = profileObj.your_api_key;
        var your_redirect_uri = profileObj.your_redirect_uri;
        var user = profileObj.user;
        var broker_password = profileObj.broker_password;
        var password2f = profileObj.password2f;
        var api_secret = profileObj.api_secret;
        var isFullyAutomated = profileObj.isFullyAutomated;
        var uid = profileObj.uid;
        
       
        var query = "UPDATE User SET name = ?,mobile = ?,email = ?,your_api_key = ?,your_redirect_uri =?,user = ?,broker_password = ?,password2f = ?,api_secret = ?,isFullyAutomated = ? WHERE uid = ?";
        var param = [name,mobile,email,your_api_key,your_redirect_uri,user,broker_password,password2f,api_secret,isFullyAutomated,uid];
        
        updateDB(query,param).then(response => {
            if(response == 'success')
            {
                res.send('success');        
            }
            else{
                res.send("error");
            }
        });
    });



    app.get('/api/getProfile/:id', checkSignIn,function (req, res) { 
        var id = req.params.id;  
         if(id){
            var query = "select name, mobile, email,isVerified,isSuperAdmin,your_api_key,your_redirect_uri,user,broker_password,password2f,api_secret,isFullyAutomated from User where uid=?";
            var param = [id];
            getFirst(query,param).then(user => {
                //console.log("result > " + JSON.stringify(user));
                if(user == undefined)
                {
                    res.send("error")
                }
                else{
                        req.session.user = user;
                        res.send(user);
                    
                }
            });     
        }
        else
            res.sendFile("login.html", {"root": __dirname});
    });

    app.get('/signup', function (req, res) {
        res.sendFile("signup.html", {"root": __dirname});
    });

    app.get('/profile', function (req, res) {
        res.sendFile("profile.html", {"root": __dirname});
    });

    app.get('/gainerLoser', function (req, res) {
        res.sendFile("gainerloser.html", {"root": __dirname});
    });


    app.get('/gapupdown', function (req, res) {
        res.sendFile("gapUpDown.html", {"root": __dirname});
    });


    app.get('/index', function (req, res) {
        res.sendFile("index.html", {"root": __dirname});
    });
   // app.get('/api/gainerLoser', function (req, res) {

    
    app.get('/api/gapupdown/:exchange', checkSignIn,function (req, res) { 
        var exchange = req.params.exchange;  
        var list = [];
        if(exchange == "nifty")
            list =  nifty;
        else if(exchange == "fno")
            list = fno;
        else
            list = nse; 
           
        var response = store.get('gap').filter(isMatching);
        function isMatching(sItem) {
            var isMatch = false;
            for (var i = 0; i < list.length; i++) {
               
                if(list[i] == sItem.symbol){
                    isMatch = true;
                    break;
                }
            }
            return isMatch;
        }
       
          
        var filteredResponse = response.filter(isBigGap);
        res.send(filteredResponse);
        response =filteredResponse = list= exchange = null;
        res.end();
    });

    function isBigGap(value) {
        return value.gap > 1 || value.gap < -1;
      }

    app.get('/api/gainerLoser/:exchange', checkSignIn,function (req, res) { 
        var exchange = req.params.exchange;  
        var list = [];
        if(exchange == "nifty")
            list =  nifty;
        else if(exchange == "fno")
            list = fno;
        else
            list = nse; 
           
        var response = store.get('percentage').filter(isMatching);
        function isMatching(sItem) {
            var isMatch = false;
            for (var i = 0; i < list.length; i++) {
               
                if(list[i] == sItem.symbol){
                    isMatch = true;
                    break;
                }
            }
            return isMatch;
        }
       
        res.send(response);
        response =list= exchange = null;
        res.end();
    });

    app.post('/signup', function (req, res) {
        var email = req.body.email;
        var psw = req.body.psw;
        var mobile = req.body.mobile;
        var name = req.body.name;
        var pswRepeat = req.body.pswRepeat;

        if(email)
        {
            var query = "select * from User where email=?";
            var param = [email];
            var isMatchEmail = false;
            getFirst(query,param).then(user => {
                    //console.log("result > " + JSON.stringify(user));
                    if(user == undefined)
                    {
                        //Do nothing
                    }
                    else{
                        res.send("error");
                        isMatchEmail = true;
                    }
                });

                var query = "INSERT INTO User (name,mobile,email,password)VALUES(?,?,?,?)";
                var param = [name,mobile,email,psw];
                console.log(query +"> "+ param);
                
                if(!isMatchEmail){  
                    insertDB(query,param).then(responses => {
                        //console.log("result > " + JSON.stringify(responses));

                        if(responses == 'success')
                        {
                            res.send('success');
                        }
                        else{
                            res.send("error");
                        }
                    });
            }    
            //res.send('<b>username </b>  : ' + email +" > "+ mobile+" > "+ name+" > "+ psw);
        }
        else
            res.sendFile("signup.html", {"root": __dirname});
    });

    app.get('/contactus', checkSignIn,function (req, res) {
        res.sendFile("contactus.html", {"root": __dirname});
    });

    app.get('/allCharts', checkSignIn,function (req, res) {
        res.sendFile("allStockCharts.html", {"root": __dirname});
    });

    app.get('/applyStrategy', checkSignIn,function (req, res) {
        res.sendFile("applyStrategy.html", {"root": __dirname});
    });

    

    app.get('/chart', checkSignIn,function (req, res) {
         res.sendFile("chart.html", {"root": __dirname});      
    });

    app.get('/scanner', checkSignIn,function (req, res) {
        res.sendFile("scanner.html", {"root": __dirname});
    });

    app.get('/strategy', checkSignIn,function (req, res) {
        res.sendFile("strategy.html", {"root": __dirname});
    });

    app.get('/gainerloser', checkSignIn,function (req, res) {
        res.sendFile("gainerloser.html", {"root": __dirname});
    });

    var  lastObject = {open:'',close:'',low:'',high:'',volume:'',LASTTRADETIME:'',rsi:'',sma:'',bb:{upper:'',lower:'',isCrossed:'',middel:'',pb:''}};
    var stockData = [];


    app.get('/deleteApplyStrategy/:id',checkSignIn, function (req, res) {
        var id = req.params.id;  
        var query = "DELETE FROM applyStrategy WHERE id = ?";
        var param = [id];
        
        getAll(query,param).then(strategy => {
                //console.log("result > " + JSON.stringify(strategy));
                if(strategy == undefined)
                {
                    res.send("error")
                }
                else{
                    //console.log("result > " + JSON.stringify(strategy));
                    getAllLiveStrategy();
                    res.send(strategy);
                }
        });    
    });

    app.post('/applyStrategy',checkSignIn, function (req, res) {
        var strategyObj = JSON.parse(req.body.data);
        
        var uid = strategyObj.uid;
        var sid = strategyObj.sid;
        var symbol = strategyObj.symbol;
        var exchange = strategyObj.exchange;
        var interval = strategyObj.interval;
        var isIntraday = strategyObj.isIntraday;
        var odrerType = strategyObj.odrerType;
        var quantity = strategyObj.quantity;
        var transaction_type = strategyObj.transaction_type;

        var slSid = strategyObj.slSid;
        var profitSid = strategyObj.profitSid;
        var slPercent = strategyObj.slPercent;
        var slPoints = strategyObj.slPoints;
        var profitPercent = strategyObj.profitPercent;
        var profitPoints = strategyObj.profitPoints;
        var isLive = strategyObj.isLive;
        
        var query = "INSERT INTO applyStrategy (uid,sid,symbol,exchange,interval,isIntraday,odrerType,quantity,transaction_type,slSid,profitSid,slPercent,slPoints,profitPercent,profitPoints,isLive)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        var param = [uid,sid,symbol,exchange,interval,isIntraday,odrerType,quantity,transaction_type,slSid,profitSid,slPercent,slPoints,profitPercent,profitPoints,isLive];
        
        insertDB(query,param).then(responses => {
            if(responses == 'success')
            {
                getAllLiveStrategy();
                res.send('success');
            }
            else{
                res.send("error");
            }
        });
    });

    app.post('/createStrategy',checkSignIn, function (req, res) {
        var strategyObj = JSON.parse(req.body.data);
        //console.log("strategyObj > " + JSON.stringify(strategyObj));
        var uid = strategyObj.uid;
        var name = strategyObj.name;
        var description = strategyObj.description;
        var category = strategyObj.category;
        var isPrivate = strategyObj.isPrivate;

        var query = "INSERT INTO Strategy (uid,name,description,category,isPrivate)VALUES(?,?,?,?,?)";
        var param = [uid,name,description,category,isPrivate];
        
        insertDB(query,param).then(responses => {
            if(responses == 'success')
            {
                var query1 = 'select last_insert_rowid();';//"select sid from Strategy where uid=?";
                var param1 =[];

                getFirst(query1,param1).then(obj1 => {
                    if(obj1 == undefined){
                        res.send("error")
                    }
                    else{
                        var sid = obj1['last_insert_rowid()'];
                        strategyObj.indicators.map(async (obj) => {
                            var indicator1= obj.indicator1;
                            var indicator2= obj.indicator2;
                            var indicator_config1= obj.indicator_config1;
                            var indicator_config2= obj.indicator_config2;
                            var value = obj.value;
                            var op = obj.op;
                            var q = "INSERT INTO Indicators (sid,indicator1,indicator2,value,op,indicator_config1,indicator_config2)VALUES(?,?,?,?,?,?,?)";
                            var p = [sid,indicator1,indicator2,value,op,indicator_config1,indicator_config2];
                            
                            insertDB(q,p).then(responses => {
                                //console.log("Indicators result > " + JSON.stringify(responses));
                            }); 
                        });
                        res.send('success');
                    }
                });  
            }
            else{
                res.send("error");
            }
        });
    });

    app.post('/updateStrategy',checkSignIn, function (req, res) {
        var strategyObj = JSON.parse(req.body.data);
        //console.log("strategyObj > " + JSON.stringify(strategyObj));
        var sid = strategyObj.sid;
        var name = strategyObj.name;
        var description = strategyObj.description;
        var category = strategyObj.category;
        var isPrivate = strategyObj.isPrivate;
       
        var query = "UPDATE Strategy SET name = ?,description = ?,category = ?,isPrivate = ? WHERE sid = ?";
        var param = [name,description,category,isPrivate,sid];
        
        updateDB(query,param).then(response => {
            if(response == 'success')
            {
                var query = "DELETE FROM Indicators WHERE sid = ?";
                var p = [sid];
                getAll(query,p).then(res => {
                    //if(res == 'success')
                    //{
                        strategyObj.indicators.map(async (obj) => {
                            var indicator1= obj.indicator1;
                            var indicator2= obj.indicator2;
                            var indicator_config1= obj.indicator_config1;
                            var indicator_config2= obj.indicator_config2;
                            
                            var value = obj.value;
                            var op = obj.op;
                            //var q = "INSERT INTO Indicators (sid,indicator1,indicator2,value,op)VALUES(?,?,?,?,?)";
                            //var p = [sid,indicator1,indicator2,value,op];
                            var q = "INSERT INTO Indicators (sid,indicator1,indicator2,value,op,indicator_config1,indicator_config2)VALUES(?,?,?,?,?,?,?)";
                            var p = [sid,indicator1,indicator2,value,op,indicator_config1,indicator_config2];
                            
                            insertDB(q,p).then(responses => {
                                //console.log("Indicators result > " + JSON.stringify(responses));
                            }); 
                        });
                    //}
                });
               
                res.send('success');        
            }
            else{
                res.send("error");
            }
        });
    });

    
    app.get('/deleteStrategy/:sid',checkSignIn, function (req, res) {
        var sid = req.params.sid;  
        var query = "DELETE FROM Strategy WHERE sid =?";
        var param = [sid];
        getAll(query,param).then(strategy => {
                //console.log("result > " + JSON.stringify(strategy));
                if(strategy == undefined)
                {
                    res.send("error")
                }
                else{
                    //console.log("result > " + JSON.stringify(strategy));
                    res.send(strategy);
                }
        });    
    });
   
    app.get('/getAppliedList/:uid',checkSignIn, function (req, res) {
        var uid = req.params.uid;  
        var query = "SELECT applyStrategy.id,applyStrategy.uid,applyStrategy.sid,applyStrategy.symbol,applyStrategy.exchange,applyStrategy.interval,applyStrategy.isIntraday,applyStrategy.odrerType,applyStrategy.quantity,applyStrategy.transaction_type,Strategy.name,Strategy.description,Strategy.category,Strategy.isPrivate FROM applyStrategy LEFT JOIN Strategy ON Strategy.sid = applyStrategy.sid WHERE applyStrategy.uid=?;";

        //var query = "SELECT * FROM applyStrategy where uid=?";
        var param = [uid];
        getAll(query,param).then(strategy => {
                //console.log("result > " + JSON.stringify(strategy));
                if(strategy == undefined)
                {
                    res.send("error")
                }
                else{
                    //console.log("result > " + JSON.stringify(strategy));
                    res.send(strategy);
                }
        });    
    });

    app.get('/strategyList/:uid',checkSignIn, function (req, res) {
        var uid = req.params.uid;  
        var query = "SELECT sid,name,uid,description,category,isPrivate FROM Strategy where uid=?";
        var param = [uid];
        getAll(query,param).then(strategy => {
                //console.log("result > " + JSON.stringify(strategy));
                if(strategy == undefined)
                {
                    res.send("error")
                }
                else{
                    //console.log("result > " + JSON.stringify(strategy));
                    res.send(strategy);
                }
        });    
    });

    app.get('/indicatorList/:sid',checkSignIn, function (req, res) {
        var sid = req.params.sid;  
       // console.log("uid > " + uid);
       
        var query = "SELECT indicator_id,sid,indicator1,indicator2,value,indicator_config1,indicator_config2,op FROM Indicators where sid=?";
        var param = [sid];
        getAll(query,param).then(indicators => {
                //console.log("result > " + JSON.stringify(indicators));
                if(indicators == undefined)
                {
                    res.send("error")
                }
                else{
                    //console.log("indicators result > " + JSON.stringify(indicators));
                    res.send(indicators);
                }
        });    
    });

    function initiateIndicator()
    {
        //console.log("initiateIndicator");
        var inputRSI = {
            values : [],
            period : 14
        };
        rsi = new technicalindicators.RSI(inputRSI);
        var inputSMA = {
            values : [],
            period : 20
        };
        //console.log("rsi");
        sma= new technicalindicators.SMA(inputSMA);

        var inputBB = {
            period : 14, 
            values : [],
            stdDev : 2 
        }
        //console.log("sma");
        bb = new technicalindicators.BollingerBands(inputBB);
        inputBB = inputRSI = inputSMA = null;
    }

    app.get('/getFutureContract/:exchange', checkSignIn,function (req, res) { 
        var exchange = req.params.exchange;  

        //console.log("getMaster exchange > " +  JSON.stringify(exchange));

        fs.readFile('data/index/nse_fo.txt','utf8', function(err, response) {
            
            var obj = JSON.parse(response);
        /*  var now = new Date();
            var thisMonth = months[now.getMonth()].slice(0,3).toUpase();
            var monthPattern = new RegExp(thisMonth, 'gi'); */
                
            var data=csvTojs(obj.data);
            //console.log(data);
            var data = data.filter(x => (String(x.instrument_type) === exchange));
            
            //console.log(data);
            var arr = data.map(x => x.symbol);
            //console.log(arr);

            //console.log(arr);
            res.setHeader('Content-Type', 'application/json');
            res.send(arr);
            res.end();
        });


    });
    
    app.get('/getStockIndicators/:symbol/:interval', checkSignIn,function (req, res) { 
        var symbol = req.params.symbol;  
        var interval = req.params.interval;  
        
        var data = getStockDataFromDb(symbol,interval).then(stockData =>{

                var inputRSI = {
                    values : [],
                    period : 14
                };
                rsi = new technicalindicators.RSI(inputRSI);
                var inputSMA = {
                    values : [],
                    period : 20
                };    
                sma= new technicalindicators.SMA(inputSMA);
                
                var inputBB = {
                    period : 14, 
                    values : [],
                    stdDev : 2 
                }
             
                bb = new technicalindicators.BollingerBands(inputBB);
                inputBB = inputRSI = inputSMA = null;
                var data = [];
                try{
                    if(stockData && stockData.data && stockData.data != null){
                        data = JSON.parse(stockData.data); 

                        data.reverse();
                        data.map(row => {
                            row.rsi = rsi.nextValue(Number(row.CLOSE));
                            row.sma = sma.nextValue(Number(row.CLOSE));
                            row.bb = bb.nextValue(Number(row.CLOSE));                
                            
                            return row;
                        });
                        data.reverse();          
                        res.setHeader('Content-Type', 'application/json');
                    }
                }
                catch(e){
                    console.log(e);
                }
                res.send(JSON.stringify(data));
                exchange = list = interval =  null;
                res.end(); 
             });
    });
    
    app.get('/getDefaultIndicators/:interval/:exchange', checkSignIn,function (req, res) { 
        var interval = req.params.interval;  
        var exchange = req.params.exchange;  

        var list = [];
      /*   if(exchange == "nifty")
            list =  nifty;
        else if(exchange == "fno")
            list = fno;
        else */
            list = watchList; 


        Promise.all(list.map(async (x) =>  {
            var symbol = x.symbol ? x.symbol:x; 
            var ohlc = getStockDataFromDb(symbol,interval);    
            return ohlc;         
            })).then(stockData => {
               
                //stockData = stockData.reverse();    
                var arr = stockData.map(async (dataObj) =>  {
                    try{
                        var data = JSON.parse(dataObj.data); 

                        var inputRSI = {
                            values : [],
                            period : 14
                        };
                        rsi = new technicalindicators.RSI(inputRSI);
                        var inputSMA = {
                            values : [],
                            period : 20
                        };
                        //console.log("rsi");
                        sma= new technicalindicators.SMA(inputSMA);
                
                        var inputBB = {
                            period : 14, 
                            values : [],
                            stdDev : 2 
                        }
                        //console.log("sma");
                        bb = new technicalindicators.BollingerBands(inputBB);
                        inputBB = inputRSI = inputSMA = null;

                        //console.log("\n before " + JSON.stringify(data));
                        data.reverse();
                        //console.log("\n\n\n before " + JSON.stringify(data));
                        await data.map(async(row) => {
                            var india = moment.tz(new Date(Number(row.LASTTRADETIME)), "Asia/Kolkata");
                            india.format(); 
                            row.LASTTRADETIME = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.LASTTRADETIME);
                            
                            
                            row.rsi = rsi.nextValue(Number(row.CLOSE));
                            row.sma = sma.nextValue(Number(row.CLOSE));
                            row.bb = bb.nextValue(Number(row.CLOSE));
                            
                           // console.log("symbol "+ dataObj.symbol +" > "+row.rsi); 

                            if(row.bb && Number(row.CLOSE) > Number(row.OPEN) && Number(row.CLOSE) >= Number(row.bb.upper) && Number(row.OPEN) < Number(row.bb.upper))
                            {
                                row.bb.isCrossed = 'Crossed Above';
                            }
                            else if(row.bb && Number(row.CLOSE) < Number(row.OPEN) && Number(row.CLOSE) <= Number(row.bb.LOWer)  && Number(row.OPEN) > Number(row.bb.LOWer))
                            {
                                row.bb.isCrossed = 'Crossed Below';
                            }
                            else if(row.bb && Number(row.CLOSE) < Number(row.OPEN) && Number(row.CLOSE) <= Number(row.bb.upper)  && Number(row.OPEN) > Number(row.bb.upper))
                            {
                                row.bb.isCrossed = 'Reversal Upper Band';
                            }
                            else if(row.bb && Number(row.CLOSE) > Number(row.OPEN) && Number(row.CLOSE) >= Number(row.bb.LOWer)  && Number(row.OPEN) < Number(row.bb.LOWer))
                            {
                                row.bb.isCrossed = 'Reversal Lower Band';
                            }
                            
                            lastObject = row;
                            return row;
                        });
                        data.reverse();

                        var resonseData = {
                            "symbol":dataObj.symbol,
                            "close":data[0].CLOSE,
                            "volume":data[0].TRADEDQTY,
                            "rsi":data[0].rsi,
                            "LASTTRADETIME":data[0].LASTTRADETIME,
                            "sma":data[0].sma, 
                            "bb":data[0].bb
                        }; 
                        //console.log("row "+ JSON.stringify(resonseData)); 
                        return resonseData;
                      
                    }
                    catch(e){
                        //console.log("stockData.map Error " + e);
                    }
                });    
                
                Promise.all(arr)
                    .then(resonse=>
                    {
                        res.setHeader('Content-Type', 'application/json');
                        res.send(JSON.stringify(resonse));
                        exchange = list = interval =  null;
                        res.end();
                    })
                    .catch();
            })
            .catch(error => { 
                console.log(error)
            }); 

    });

    app.get('/getListOfAllSymbol/:exchange/:instrumentType', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        var exchange = req.params.exchange;  
        var instrumentType = req.params.instrumentType;  
        var data = {};
        data.exchange = exchange;//"NFO";
        data.instrumentType = instrumentType;//"NFO";
        
        getAllSymbol(data).then(list=>{
            res.send(list);
            res.end();
        });
    });

    
    app.get('/getInstrumentsOnSearch/:exchange/:instrumentType/:search', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        var exchange = req.params.exchange;  
        var search = req.params.search;  
        var instrumentType = req.params.instrumentType;  
        var data = {};
        data.exchange = exchange;
        data.search = search;
        data.instrumentType = instrumentType;
        
        
        GetInstrumentsOnSearch(data).then(list=>{
            res.send(list);
            res.end();
        });
    });

    
    app.get('/getStrikePrices/:exchange/:instrumentType/:product/:optionType/:expiry', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        var exchange = req.params.exchange;  
        var instrumentType = req.params.instrumentType;  
        var expiry = req.params.expiry;  
        var product = req.params.product;  
        var optionType = req.params.optionType;  
        //ar exchange = req.params.exchange;  


        var data = {};
        data.exchange = exchange;
        data.optionType = optionType;
        data.product = product;
        data.expiry = expiry;
        data.instrumentType = instrumentType;
        
        GetStrikePrices(data).then(list=>{
            console.log("GetStrikePrices  \n\n  "+list);
            res.send(list);
            res.end();
        });
    });

    app.get('/getOptionType/:exchange', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        var exchange = req.params.exchange;  
        var data = {};
        data.exchange = exchange;
        GetOptionType(data).then(list=>{
            //console.log("GetOptionType  \n\n  "+list);
            res.send(list);
            res.end();
        });
    });

    app.get('/getInstrumentTypes/:exchange', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        var exchange = req.params.exchange;  
        var data = {};
        data.exchange = exchange;//"NFO";
        GetInstrumentTypes(data).then(list=>{
            //console.log("GetInstrumentTypes  \n\n  "+list);
            res.send(list);
            res.end();
        });
    });

    app.get('/getExpiryDates/:exchange/:instrumentType/:product', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        var exchange = req.params.exchange;  
        var instrumentType = req.params.instrumentType;  
        var product = req.params.product;  
        var data = {};
        data.exchange = exchange;//"NFO";
        data.instrumentType= instrumentType;//"OPTSTK";
        data.product = product;//"ACC";

        GetExpiryDates(data).then(list=>{
            console.log("getExpiryDates  \n\n  "+JSON.stringify(list));
            res.send(list.EXPIRYDATES);
            res.end();
        });
    });

    app.get('/getIndices', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        
        GetExchanges().then(list=>{
            res.send(list);
            res.end();
        });
    });

    app.get('/getBalance', function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(balance));
        res.end();
    });

    app.get('/getProfile', function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(profile));
        res.end();
    });

    app.get('/authenticate', function (req, res) {  
        res.sendFile("index.html", {"root": __dirname}); 
        var your_api_key ="ukXaJKtebf3pfLnbrplan3mDi1yOtV4I2cyia4aO";
        var api_secret="70rkwasp80";
        var userObj = userObjList[index];
        var up = new UpstoxBroker(your_api_key,api_secret,false);
        currentUserObj= userObj.traderObject = up;
        userObjList[index] = userObj;
        //autoLogin();
        
    });

    app.post('/scan', function (req, res) {

    });

    app.get('/admin', checkSignIn,function (req, res) {
        var india = moment.tz(store.get('tokenValidity'),"Asia/Kolkata");
        var d =new Date();
        var now1 = moment.tz(d, 'YYYY-DD-MM HH:mm',"Asia/Kolkata");
        now1.format(); 
        console.log("tokenValidity "  +now1 +":"+india+":"+ india.isBefore(now1));
        
       /*  var loginUrl = upstox.getLoginUri(redirect_uri);
        console.log("*loginUri " + loginUrl);
        res.status(200).header('Content-type', 'text/html');
        code = req.params.code;
        res.status(302).setHeader('Location', loginUrl);
        res.end(); */
        
    });

   
    // Change the 404 message modifing the middlewar
    app.use(function(req, res, next) {
        res.status(404).send("<h1>404 ! This site can’t be reached</h1>");
    });

    // start the server in the port 3000 !
    app.listen(PORT, function () {
    console.log('App listening on port '+PORT);
   // console.log(`Heapdump enabled. Run "kill -USR2 ${process.pid}" or send a request to "/heapdump" to generate a heapdump.`);
    });
/* }

// Listen for dying workers
cluster.on('exit', function (worker) {

    // Replace the dead worker,
    // we're not sentimental
    console.log('Worker %d died :(', worker.id);
    cluster.fork();

}); */

var WebSocket = require('ws')
var wss = new WebSocket.Server({ port: 8080 })
var webSocket;
wss.on('connection', ws => {
  webSocket = ws;
  ws.on('message', message => {
   // console.log(`Received message => ${message}`)
  })
  //ws.send('Hello! Message From Server!!')

  eventEmitter.on('placeOrder', onSendNotification);

  function onSendNotification(data){
      console.log('Received message => ' + data.strategy.symbol);
      webSocket.send(JSON.stringify({data}));
  }
})


const sqlite3 = require('sqlite3').verbose();
var db = new sqlite3.Database('db/upstox.db', (err) => {
if (err) {
    return console.error(err.message);
}
console.log(chalk.green('Connected SQlite database'));
getAllUsers();
});

async function closeDb(){
    db.close();
}

async function insertDB(query,param){
    return new Promise(function(resolve, reject) {
        db.run(query, param,function(err){
            if(err)
                console.log(chalk.red("Insert error > " + err +" \n "+ query));
            else{
                //console.log(chalk.blue("Successfully inserted"));
                resolve("success");
            }               
        });
    })        
}

async function updateDB(query,param){
    return new Promise(function(resolve, reject) {
       // console.log(chalk.red("Update  > " + query +" \n "+ param));
        db.run(query, param,function(err){
            if(err)
                console.log(chalk.red("Update error > " + err +" \n "+ query));
            else{
                //console.log(chalk.blue("Successfully Updated"));
                resolve("success");
            }               
        });
    })        
}

async function getFirst(query,params){
    return new Promise(function(resolve, reject) {
        db.get(query, params, function(err, row){  
            if(err) reject("Read error: " + err.message);
            else {
                resolve(row);
            }
        })    
    })    
}

async function getAll(query,params){
    return new Promise(function(resolve, reject) {
        //console.log(query +" : "+params);
        db.all(query, params, function(err, row){  
            if(err) reject("Read error: " + err.message);
            else {
               resolve(row);
               //console.log("\n" + query +" : "+row);
               return row;
            }
        })    
    })    
}
var strategyList = [];
getAllLiveStrategy();
async function getAllLiveStrategy()
{
    //strategyList = [];
    var tempList = [];
    var query = "SELECT * from applyStrategy";
    var param = [];
    getAll(query,param).then(list => {
        console.log("getAllLiveStrategy > " + list.length);
        if(list == undefined)
        {
            console.log("\n Error to getLiveSymbol");
        }
        else{
            list.map(async(obj)=>{
                var query = "SELECT * from Indicators where sid=?;";
                var param = [obj.sid];
                getAll(query,param).then(indicators => {
                    if(indicators == undefined)
                    {
                        console.log("\n Error to getAllLiveStrategy");
                    }
                    else{
                        obj['indicators'] = indicators;    
                    }
                });

                var query = "SELECT name,description,category,isPrivate FROM Strategy where sid=?";
                var param = [obj.sid];
                getAll(query,param).then(strategy => {
                    //console.log("\n strategy > " + strategy.length);

                    if(strategy == undefined)
                    {
                        console.log("\n Error to Strategy");
                    }
                    else{
                        for (let [key, value] of Object.entries(strategy[0])) {
                            obj[key] = value;     
                        } 
                    }
                    tempList.push(obj);
                    if(tempList.length > 0 && tempList.length == list.length)
                        strategyList = tempList;
                   // console.log("Final result > " + strategyList.length);   
                });
            });
           
        }
    }); 
}

getLiveSymbol();

async function getLiveSymbol()
{
    var query = "SELECT * from applyStrategy";
    var param = [];
    await getAll(query,param).then(list => {
        //console.log("result > " + JSON.stringify(list));
        if(list == undefined)
        {
            console.log("\n Error to getLiveSymbol");
        }
        else{
            //console.log("\n getLiveSymbol result > " + JSON.stringify(list));
            watchList = list;
        }
    });  
}

var strategy_smaCross1 = {
    name:"EMA Cross Over",
    description : "Crossed 13 ema with 50 SMA",
    isLive:false,
    isBuyOrSell:"b",
    strategy : [
    {
        indicators:
        [
            {indicator:'EMA',period : 13,values:"closes"},
            {indicator:'EMA',period : 50,values:"closes"}
        ],output:[],strategy:"output[0][0] >= output[1][0]"
    },
    {
        indicators:
        [
            {indicator:'SMA',period : 20,values:"closes"},
            {indicator:'SMA',period : 50,values:"closes"}
        ],output:[],strategy:"output[0][1] < output[1][1]"
    }
]
}; 

var strategy_sma200 = {
    name:"SMA 200 Cross Over",
    description : "Close above 200 sma",
    isBuyOrSell:"b",
    isLive:false,
    strategy :[
        {
            indicators:
            [
                {indicator:'SMA',period : 200,values:"closes"}
            ],output:[],strategy:"closes[i] >= output[0][i]"
        },
        {
            indicators:
            [
                {indicator:'SMA',period : 200,values:"opens"}
            ],output:[],strategy:"opens[i+1] <= output[0][i]"
        },
        {
            indicators:
            [
                {indicator:''}
            ],output:[],strategy:"closes[i] > opens[i]"
        }
]
}; 

var strategy_rsi60_crossed = {
name:"RSI : 60 Cross Over",
description : "RSI : 60 Cross Over",
isLive:false,
isBuyOrSell:"b",
strategy : [
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i] >= 60"
    }, 
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i+1] < 60"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] > opens[i]"
    }  
]
}; 

var strategy_rsi40_crossed ={
    name:"RSI : 40 Cross Over",
    description : "RSI : 40 Cross Over",
    isBuyOrSell:"s",
    isLive:false,
    strategy : [
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i] <= 40"
    }, 
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i+1] >= 40"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) <= -0.5"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] < opens[i]"
    }  
]
}; 

var bbLower_band_crossed ={
    name:"Bollinger band : lower band Cross Over",
    description : "Bollinger band : lower band Cross Over",
    isBuyOrSell:"s",
    isLive:false,
    strategy : [
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[i] <= output[0][i]['lower']"
    },
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"opens[i] >= output[0][i]['lower']"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] < opens[i]"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[i] - opens[i]) / (highs[i] - lows[i])) <= -0.5"
    }
]
}; 

var bbUpper_band_crossed ={
    name:"Bollinger band : Upper band Cross Over",
    description : "Bollinger band : Upper band Cross Over",
    isBuyOrSell:"b",
    isLive:false,
    strategy : [
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[i] >= output[0][i]['upper']"
    },
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"opens[i] <= output[0][i]['upper']"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] > opens[i]"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[i] - opens[i]) / (highs[i] - lows[i])) >= 0.5"
    } 
]
}; 

var bbLower_band_reversal ={
    name:"Bollinger band : lower band reversal",
    description : "Bollinger band : lower band reversal",
    isBuyOrSell:"b",
    isLive:false,
    strategy : [
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[i] >= output[0][i]['lower']"
    },
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"opens[i] <= output[0][i]['lower']"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] > opens[i]"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[i] - opens[i]) / (highs[i] - lows[i])) >= 0.5"
    }
]
}; 

var bbUpper_band_reversal ={
    name:"Bollinger band : Upper band reversal",
    description : "Bollinger band : Upper band reversal",
    isBuyOrSell:"s",
    isLive:false,
    strategy : [
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[i] <= output[0][i]['upper']"
    },
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"opens[i] >= output[0][i]['upper']"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] < opens[i]"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[i] - opens[i]) / (highs[i] - lows[i])) <= -0.5"
    } 
]
}; 
    
//var strategyList = [strategy_rsi60_crossed,bbUpper_band_crossed,bbLower_band_crossed,power_play_buy];

var bollinger_open_List = [bbUpper_band_crossed,bbLower_band_crossed,bbUpper_band_reversal,bbLower_band_reversal];


/******Strong / week *****/

var strategy_rsi_above_60 = {
name:"RSI > 60 - Strong chart",
description : "RSI > 60 - Strong chart",
isLive:false,
isBuyOrSell:"b",
strategy : [
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i] > 60"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] > opens[i]"
    }  
]
}; 

var strategy_rsi_below_40 = {
name:"RSI < 40 - Weak chart",
description : "RSI < 4 - weak charts",
isLive:false,
isBuyOrSell:"s",
strategy : [
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i] < 40"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) <= -0.5"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[i] < opens[i]"
    }  
]
}; 

var strategyStrongList = [strategy_rsi_above_60];


var strategyWeakList = [strategy_rsi_below_40];

var rsiList = [strategy_rsi_above_60,strategy_rsi_below_40];



/******OPEN = HIGH / OPEN = LOW *****/

var open_low = {
    name:"OPEN = LOW",
    description : "OPEN = LOW",
    isLive:false,
    isBuyOrSell:"b",
    strategy : [
        {
            indicators:
            [
                {indicator:''}
            ],output:[],strategy:"open[i] == low[i]"
        }  
    ]
}; 


var open_high = {
    name:"OPEN = HIGH",
    description : "OPEN = HIGH",
    isLive:false,
    isBuyOrSell:"s",
    strategy : [
        {
            indicators:
            [
                {indicator:''}
            ],output:[],strategy:"open[i] == high[i]"
        }  
    ]
}; 


var power_play_buy = {
    name:"power_play_buy",
    description : "close Crossed above 5-ema with RSI 60",
    isLive:false,
    isBuyOrSell:"b",
    strategy : [
    {
        indicators:
        [
            {indicator:'EMA',period : 5,values:"closes"}
        ],output:[],strategy:"closes[0] >= output[0][0]"
    },
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i] > 60"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    }
]
}; 

var open_low_high_List = [open_high,open_low];

/* [
{"indicator_id":64,"sid":"21","indicator1":"close","indicator2":"sma","value":"200","op":">="},
{"indicator_id":65,"sid":"21","indicator1":"close","indicator2":"ubb","value":"60","op":"Crossed Above"},
{"indicator_id":66,"sid":"21","indicator1":"rsi","indicator2":"number","value":"50","op":">"}]


{"indicator1":"rsi","indicator2":"number","value":"50","op":">"}
{indicator:'EMA',period : 5,values:"closes",output:[],strategy:"closes[0] >= output[0][0]"}
strategy : [{
        indicators:
        [
            {indicator:'EMA',period : 5,values:"closes"}
        ],output:[],strategy:"closes[0] >= output[0][0]"
    },
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][i] > 60"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    } */

   // closes[0] >= RSI.calculate({values : closes,period : 14})[0]

var technicalindicators = require('technicalindicators');
var fs = require('fs');
var path = require('path');
var moment = require('moment-timezone');

var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
var date = new Date();
var today = date.getDate() +"-"+(date.getMonth() +  1)+"-"+date.getFullYear();
var time = date +":"+date.getHours() +":"+date.getMinutes();
var days = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
];

var strategyObj = {
    symbol:'BANKNIFTY19JANFUT',
    indicators:[{indicator:'rsi',settings:'14',value:'60',op:'>='}
               ,{indicator:'sma',settings:'20',value:'close',op:'>='}],
    interval:'15min'
};



    

//console.log("data  : " + x + " :: "+JSON.stringify(database.data));

/*  var df =  dataForge.fromJSON(JSON.stringify(obj.data)) // Read CSV file (or JSON!)
//.setIndex("LASTTRADETIME")
.dropSeries(["cp"]) // Drop certain columns.
.where(row => calculateIndicators(row)) // Filter rows.
.select(row => transform(row)); // Transform the data. 

const chronoOrder = df.reverse();
var output = df.toJSON();

var valuesDf = df.detectValues(); */ 
//console.log(valuesDf.toString());

function backTesting(stockData,path){ 

  /* var result = Enumerable.from(stockData).forEach(function(obj)
  {
      console.log(obj.sma + " > "+ obj.rsi);
      return obj.rsi >= 60;
  }); */

  //var example = Enumerable(stockData).where(function(item){ return item.rsi >= 60; });

  //var result = Enumerable.from(stockData).where(function(obj){return obj.rsi >= 60});
  //var result = Enumerable.from(stockData).select((val, i) => ({ return val.rsi >= 60}));

  var result = stockData.filter(function (item) {
      return item.rsi >= 60;
  });

  var result = result.filter(function (item) {
      return item.CLOSE >= item.sma;              
  });

  //console.log("\n \n stockData >> " + path +" >> "+result[0].LASTTRADETIME);


  /* var stockData =response.data;

  //console.log("\n \n stockData >> " + JSON.stringify(stockData));


  stockData= stockData.map(x => 
  {
      var obj = x;
      obj.LASTTRADETIME = new Date(obj.LASTTRADETIME);

      //console.log("\n \n LASTTRADETIME >> " +  obj.LASTTRADETIME);
      return obj;
  });  
  var closeData = stockData.map(x => x.CLOSE);  
  var inputRSI = {
      values : closeData,
      period : 14
  };
  var rsiData = technicalindicators.RSI.calculate(inputRSI);
  var inputSMA = {
      values : closeData,
      period : 20
  };
  var smaData = technicalindicators.SMA.calculate(inputSMA);
  var BB = technicalindicators.BollingerBands
  var period = 14
  var inputBB = {
      period : period, 
      values : closeData ,
      stdDev : 2 
  }
  var bbData = BB.calculate(inputBB);
  //console.log("\n \n BB >> " + JSON.stringify(bbData));

  var index = 0;
  var buyprice = 0;
  var sellprice = 0;
  var profit = 0;
  var totalProfit = 0;
  var isBuySignalGenerated = false;
  var isSellSignalGenerated = false;
  var buyCall = 0;
  var sellCall = 0;
  
  stockData= stockData.map(x => 
  {
      var obj = x;
      obj.rsi = index > inputRSI.period?rsiData[index - inputRSI.period]:0;
      obj.sma = index >= inputSMA.period?smaData[index - inputSMA.period]:0;
      obj.bb = index >= inputBB.period?bbData[index - inputBB.period]:null;

      var date = new Date(obj.LASTTRADETIME);;

      //console.log("date " + date);

      if(obj.rsi >= 60 && date.getDay() == date.getDay() && date.getMonth()== date.getMonth())
      {
          log(obj.rsi);
      }
      if(obj.rsi >= 60 && stockData[index - 1].rsi < 60)
      {
          buyCall++;
          buyprice = x.CLOSE;
          isBuySignalGenerated = true;
          console.log("\n\n BUY *>> " + x.LASTTRADETIME +" >> "+ buyprice);
      }
      else if(obj.rsi != 0 && obj.rsi <= 40 && stockData[index - 1].rsi > 40)
      {
          sellCall++;
          sellprice = x.CLOSE;
          isSellSignalGenerated = true;
          console.log("\n\n SELL *>> " + x.LASTTRADETIME +" >> "+ sellprice);
      }
      
      if(isBuySignalGenerated)
      {
          if(obj.rsi < 60 || x.CLOSE < obj.sma)
          {
              isBuySignalGenerated = false;  
              profit = x.CLOSE - buyprice;
              totalProfit += profit;
              console.log("\n\n EXIT CALL *>> " + x.LASTTRADETIME+" close >> "+x.CLOSE+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ buyCall);
          }
      }else if(isSellSignalGenerated)
      {
          if(obj.rsi > 40 || x.CLOSE > obj.sma)
          {
              isSellSignalGenerated = false;  
              profit = sellprice - x.CLOSE;
              totalProfit += profit;
              console.log("\n\n EXIT SELL *>> " + x.LASTTRADETIME+" close >> "+x.CLOSE+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ sellCall);
          }
      } 
      index++;
      return obj;
  }); 
  console.log(stockData); */
}

function searchPattern(row)
{
    var now = new Date();
    var thisMonth = months[now.getMonth()].slice(0,3).toUpperCase();
    var syombolPattern = /BANKNIFTY/i;
    var monthPattern = new RegExp(thisMonth, 'gi');
    var isWeeklyExpiry = true;
    var arr = row.split(",");
    var isMatchingSymbol  = String(arr[3]).search(syombolPattern);
 
  if(isMatchingSymbol >= 0){      
    var isMatchFound = false;
    var isMatchingMonth  = String(arr[3]).search(monthPattern);
    var isFuture = String(arr[3]).search("FUT");
    for(var i =0 ; i < 7;i++){
        if(days[now.getDay()] == "Thursday" || days[now.getDay()] == "Wednesday")
        {
            var fullyear = now.getFullYear();
            var month = now.getMonth() + 1;
            var day = now.getDate();
            day = String(day).length < 2 ? "0"+now.getDate() : now.getDate();
            var symbol = "BANKNIFTY" + String(fullyear).slice(2,4) +month+day;//18121328400CE
            var currentPrice = Math.round(arr[2] / 100) * 100;
            var pricePattern = new RegExp(String(currentPrice), 'gi');
            var isMatchingPrice  = String(arr[3]).search(pricePattern);
            var isMatchingWeek  = String(arr[3]).search(symbol);

            if(isMatchingWeek >= 0 && isMatchingPrice >=0){
                
                var isCE = String(arr[3]).search("CE");
                var isPE = String(arr[3]).search("PE");

                console.log("\n MATCH " + isCE +" > "+ isPE +" > "+arr[3]);

                if(isCE > 0)
                  bankNiftyCall.CE = arr[3];
                else if(isPE > 0)
                  bankNiftyCall.PE = arr[3];  
                isMatchFound = true;
            }
        }
        now.setDate(now.getDate() + 1);
    }

    if(!isMatchFound){
        if(isMatchingMonth >= 0 && isFuture >=0){
            //console.log("\n MATCH " + isMatchingWeek +" > "+ symbol +" > "+arr[3]);
            bankNiftyCall.FUTURE = arr[3];
            return row;
        }else{
            return 0;
        }
    }else{
        return row;
    }    
  }
  else{
      return 0;
  }
}




var index = 0;
var buyprice = 0;
var sellprice = 0;
var profit = 0;
var totalProfit = 0;
var isBuySignalGenerated = false;
var isSellSignalGenerated = false;
var buyCall = 0;
var sellCall = 0;

function calculateIndicators(row)
{
  row.rsi = rsi.nextValue(Number(row.CLOSE));
  row.sma = sma.nextValue(Number(row.CLOSE));
  row.bb = bb.nextValue(Number(row.CLOSE)); 

var d =new Date(Number(row.LASTTRADETIME));
var india = moment.tz(d, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
india.format(); 
row.date =india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();

    if(india.hour() == 9 && india.minute() == 25 && row.bb && row.CLOSE > row.bb.upper)
    {
        buyCall++;
          buyprice = row.CLOSE;
          isBuySignalGenerated = true;
          console.log("\n\n BUY *>> " + row.date  +" >> "+ buyprice);
    }

    if(isBuySignalGenerated)
    {
        if(row.bb && row.CLOSE <= row.bb.middle)
        {
            isBuySignalGenerated = false;  
            profit = row.CLOSE - buyprice;
            totalProfit += profit;
            console.log("\n\n EXIT CALL *>> " + row.date+" close >> "+row.CLOSE+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ buyCall);
        }
    }else if(isSellSignalGenerated)
    {
        if(obj.rsi > 40 || row.CLOSE > obj.sma)
        {
            isSellSignalGenerated = false;  
            profit = sellprice - row.CLOSE;
            totalProfit += profit;
            console.log("\n\n EXIT SELL *>> " + row.date+" close >> "+row.CLOSE+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ sellCall);
        }
    } 
    index++;
  
  return row;
}

function log(message){

    if(process.env.NODE_ENV=="production")
        return;
        
    date = new Date();
   
    today = date.getDate() +"-"+(date.getMonth() +1)+"-"+date.getFullYear();
  
    var path = "logs/log-"+today+".txt";
    try {
        if (fs.existsSync(path)) {
            fs.appendFile(path, "\n"+date +" "+message, function (err) {
            if (err) throw err;
            }); 
        }else {
            fs.writeFile(path, "\n"+date +" "+message, function (err) {
                if (err) throw err;
            }); 
        }
    }    
    catch(err) {
        console.error(err);
        fs.writeFile(path, "\n"+date +" "+message, function (err) {
            if (err) throw err;
        }); 
    }    
}

function addIndicators(response,path){ 
  var stockData =response.data;
  //stockData=  //stockData.map(x => 

  for (let x of stockData) {
      var obj = x;
      obj.LASTTRADETIME = new Date(obj.LASTTRADETIME);
       return obj;
  }

  var closeData =[];// stockData.map(x => x.CLOSE);  
  for (let x of stockData) {
    closeData.push(x.CLOSE);
  }

  var inputRSI = {
      values : closeData,
      period : 14
  };
 /*  var rsiData = technicalindicators.RSI.calculate(inputRSI);
  var inputSMA = {
      values : closeData,
      period : 20
  };
  var smaData = technicalindicators.SMA.calculate(inputSMA);
  var BB = technicalindicators.BollingerBands;
  var period = 14;
  var inputBB = {
      period : period, 
      values : closeData ,
      stdDev : 2 
  }
  var bbData = BB.calculate(inputBB); */
  //console.log("\n \n BB >> " + JSON.stringify(bbData));

  var index = 0;
  var buyprice = 0;
  var sellprice = 0;
  var profit = 0;
  var totalProfit = 0;
  var isBuySignalGenerated = false;
  var isSellSignalGenerated = false;
  var buyCall = 0;
  var sellCall = 0;
  
  for (let x of stockData) {
  //stockData= stockData.map(x =>{
      var obj = x;
     /*  obj.rsi = index > inputRSI.period?rsiData[index - inputRSI.period]:0;
      obj.sma = index >= inputSMA.period?smaData[index - inputSMA.period]:0;
      obj.bb = index >= inputBB.period?bbData[index - inputBB.period]:null; */

      index++;
      //console.log("\nobj > " + JSON.stringify(obj));
      return obj;
  } 


  backTesting(stockData,path);
  //log(stockData);
}

var bankNiftyCall;
function checkBankNiftyExpiry(data)
{
      bankNiftyCall = new Object();

     // fs.readFile('data/index/nse_fo.txt', function(err, response) {      
        //var  data= JSON.parse(response).data;
        const transformedData = new dataForge.DataFrame(data)
        .where(row => searchPattern(row)) // Filter rows.
        .toArray();                        // Back to normal JavaScript data!.
   
       console.log("WATCH BANK NIFTY  ****** " + JSON.stringify(bankNiftyCall)); 
       console.log(" \n \n BANK NIFTY >> data >>" + transformedData);
    //});
}
var fs = require('fs');
var path = require('path');

var loki  = require( 'lokijs' );
var intervalsArr =['1MINUTE','15MINUTE','1DAY'];
var allIntervalsArr = ['15MINUTE','5MINUTE','1DAY','60MINUTE','30MINUTE','1MONTH','1WEEK'];

var database;

async function syncLiveAllStockData(list,interval,start_date,end_date){ 
    console.log('syncLiveAllStockData  - ' + interval +" : "+list.length);
    list.map(async (x) =>  {
        var symbol = x.symbol ? x.symbol:x;        
        var ex = x.exchange;      
        //console.log('syncLiveAllStockData : Finished Queue  - ' + symbol +" :: "+ interval +" :: "+ ex);
        queue.push({symbol: symbol,ex:ex,interval:interval,start_date:start_date,end_date:end_date}, function (err) {
            //console.log('syncLiveAllStockData : Finished Queue  - ' + interval);
        });
        x = symbol = ex= null;
    });        
}

//Sync Upstox data on first load
async function syncAllUpstoxData(list){ 
    var now= new Date();
    var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata"); 
    var intervals = allIntervalsArr; 
   /*  if(india.day() == 0 || india.day() == 6 || india.hour() >= 18 || india.hour() <= 9)
    {
        intervals = allIntervalsArr;
    }
 */
    await intervals.map(async (interval) =>  {
        //console.log('syncAllUpstoxData :  interval  - ' + interval);
        await list.map(async (x) =>  {
            var symbol = x.symbol ? x.symbol:x;        
            var ex = x.exchange;      
            
            var now = new Date();
            var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata"); 
            var end_date = formatDate(india.date())+"-"+formatDate(india.month() + 1)+"-"+india.year();
            if(interval == '1MONTH')
                now.setMonth(now.getMonth() - 90);
            else if(interval == '1WEEK')
                now.setDate(now.getDate() - 150 * 7);
            else if(interval == '1DAY')
                now.setDate(now.getDate() - 400);    
            else if(interval == '30MINUTE')
                now.setDate(now.getDate() - 6);
            else if(interval == '60MINUTE')
                now.setDate(now.getDate() - 6);    
            else if(interval == '15MINUTE')
                now.setDate(now.getDate() - 6);
            else if(interval == '5MINUTE' || interval == '3MINUTE')
                now.setDate(now.getDate() - 2);
            else if(interval == '1MINUTE')
                 now.setDate(now.getDate());
            else
                now.setDate(now.getDate() - 6);

            india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
            india.format(); 
            var start_date = formatDate(india.date())+"-"+formatDate(india.month() + 1)+"-"+india.year();
           
            //console.log('Queue  - ' + symbol +" :: "+ interval +" :: "+ start_date);

            await queue.push({symbol:symbol,ex:ex,interval:interval,start_date:start_date,end_date:end_date}, function (err) {
                //console.log('syncAllUpstoxData : Finished Queue  - ' + symbol +" : "+interval);  
            });
        }); 
    });          
}

//Get Percentage change 
async function getPercent_list(list){ 
    var now = new Date();
    var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata"); 
    var time = india.hour() +":"+india.minute();

    //console.log("getPercent_list  - time : " + time);
    var intervalsArr = ['1DAY','5MINUTE'];
    Promise.all(intervalsArr.map(async (interval) => {  
        return new Promise(function(resolved, rejected) {           
            Promise.all(list.map(async (x) =>  {
                return getStockDataFromDb(x.symbol ? x.symbol:x,interval);          
            })).then(stockData => {
                //console.log("percentage : " + interval +"::"+stockData.length);
                resolved(stockData);
            })
            .catch(error => { 
                console.log(error)
            }); 
        })
    })).then(dataArr => {
            var percentageChangeArray = [];
            var configChangeArray =  store.get("percentage");
           
            for(var i = 0; i < dataArr[0].length;i++){
                try{
                    var dataObj1 = dataArr[0][i];
                    var dataObj2 = dataArr[1][i];

                    if(dataObj1.symbol == dataObj2.symbol)
                    {
                        var percObj = {};
                        for(var id = 0; id < configChangeArray.length;id++){
                            try{
                                if(configChangeArray[i].symbol == dataObj2.symbol)
                                {
                                    percObj = configChangeArray[id];
                                    break;
                                }
                            }
                            catch(error){ 
                                //console.log("percentage error  : " + error);
                            }
                        } 
                        var stock1 = [];
                        stock1 = JSON.parse(dataObj1.data);
                        stock1.reverse();
                        var stock2 = [];
                        stock2 = JSON.parse(dataObj2.data);
                        

                        var lows = [];
                        var highs = [];
                      
                        for(var j = 0; j < stock2.length;j++){
                            var d = new Date(Number(stock2[j].LASTTRADETIME));
                            if(d.getDate() == now.getDate()){
                                break;
                            }
                        }

                        stock2 = stock2.slice(j, stock2.length);  //**********  dont't change **********  
                        stock2.reverse();
                        for(var k = 0; k < stock2.length;k++){
                            lows.push(stock2[k].LOW);
                            highs.push(stock2[k].HIGH);
                        }

                        var perc = getPercentageChange(stock1[0].CLOSE,stock2[0].CLOSE);
                        percObj.symbol = dataObj1.symbol;
                        percObj.percentage = perc;
                        var india = moment.tz(new Date(Number(stock2[0].LASTTRADETIME)), "Asia/Kolkata");
                        india.format(); 
                        percObj.LASTTRADETIME = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.LASTTRADETIME);
                        percObj.prevClose = Number(stock1[0].CLOSE);
                        percObj.LOW = Math.min(...LOWs);
                        percObj.HIGH = Math.max(...HIGHs);
                        percObj.CLOSE = Number(stock2[0].CLOSE);
                        percObj.OPEN = Number(stock2[stock2.length - 1].OPEN);
                        
                        percentageChangeArray.push(percObj);
                        var india = moment.tz(new Date(Number(stock2[0].LASTTRADETIME)), "Asia/Kolkata");
                        stock1 =  stock2 = lows = highs = perc = percObj = dataObj1 = dataObj2 =india = null;
                    }
                }
                catch(error){ 
                    //console.log("getPercent_list Parsing error " +dataObj1.symbol +" : "+ error);
                    
                }
            }
            percentageChangeArray.sort(function(a, b){return a.percentage - b.percentage});
            percentageChangeArray.reverse();
            store.set("percentage",percentageChangeArray);
            
            percentageChangeArray = dataArr =  intervalsArr = null;
            return 1;
    })
    .catch(error => { 
        console.log(error)
    }); 
}

//Get Gap up / Down
async function getGapUpDown(list){ 
    var now = new Date();
    var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata"); 
    var time = india.hour() +":"+india.minute();

    console.log("getGapUpDown  - time : " + time);
    var intervalsArr = ['1DAY','5MINUTE'];
    Promise.all(intervalsArr.map(async (interval) => {  
        return new Promise(function(resolved, rejected) {           
            Promise.all(list.map(async (x) =>  {
                return getStockDataFromDb(x.symbol ? x.symbol:x,interval);          
            })).then(stockData => {
                resolved(stockData);
            })
            .catch(error => { 
                console.log(error)
            }); 
        })
    })).then(dataArr => {
            var percentageChangeArray = [];
            var configChangeArray =  store.get("gap");
           
            for(var i = 0; i < dataArr[0].length;i++){
                try{
                    var dataObj1 = dataArr[0][i];
                    var dataObj2 = dataArr[1][i];

                    if(dataObj1.symbol == dataObj2.symbol)
                    {
                        var percObj = {};
                        for(var id = 0; id < configChangeArray.length;id++){
                            try{
                                if(configChangeArray[i].symbol == dataObj2.symbol)
                                {
                                    percObj = configChangeArray[id];
                                    break;
                                }
                            }
                            catch(error){ 
                                //console.log("error  : " + error);
                            }
                        } 
                        var stock1 = [];
                        stock1 = JSON.parse(dataObj1.data);
                        stock1.reverse();
                        var stock2 = [];
                        stock2 = JSON.parse(dataObj2.data);
                        //stock2.reverse();

                        var lows = [];
                        var highs = [];
                        //console.log(stock2.length);

                        for(var j = 0; j < stock2.length;j++){
                            var d = new Date(Number(stock2[j].LASTTRADETIME));
                            //console.log(d.getDate() +"==="+ now.getDate());
                            if(d.getDate() == now.getDate()){
                                break;
                            }
                        }
                        //console.log(j +"==="+ stock2.length);
                        stock2 = stock2.slice(j, stock2.length);  //**********  dont't change **********  
                        stock2.reverse();
                        //console.log(stock2.length);


                        for(var k = 0; k < stock2.length;k++){
                            lows.push(stock2[k].LOW);
                            highs.push(stock2[k].HIGH);
                        }

                        var perc = getPercentageChange(stock1[0].CLOSE,Number(stock2[stock2.length - 1].OPEN));
                        percObj.symbol = dataObj1.symbol;
                        percObj.gap = perc;
                        var india = moment.tz(new Date(Number(stock2[0].LASTTRADETIME)), "Asia/Kolkata");
                        india.format(); 
                        percObj.LASTTRADETIME = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.LASTTRADETIME);
                        percObj.LOW = Math.min(...LOWs);
                        percObj.HIGH = Math.max(...HIGHs);
                        percObj.prevClose = Number(stock1[0].CLOSE);
                        percObj.CLOSE = Number(stock2[0].CLOSE);
                        percObj.OPEN = Number(stock2[stock2.length - 1].OPEN);
                        
                        percentageChangeArray.push(percObj);
                        var india = moment.tz(new Date(Number(stock2[0].LASTTRADETIME)), "Asia/Kolkata");
                        stock1 =  stock2 = lows = highs = perc = percObj = dataObj1 = dataObj2 =india = null;
                    }
                }
                catch(error){ 
                    //console.log("getGapUpDown Parsing error " +dataObj1.symbol +" : "+ error);
                }
            }
            percentageChangeArray.sort(function(a, b){return a.percentage - b.percentage});
            percentageChangeArray.reverse();
            store.set("gap",percentageChangeArray);
            
            percentageChangeArray = dataArr =  intervalsArr = null;
            return 1;
    })
    .catch(error => { 
        console.log(error)
    }); 
}

//Get Indicators 
async function getDefaultIndicatorsValues(list,interval){ 
// console.log("* getAllStockDataByInterval   >> "+list.length);
    var matchSymbols = [];
    Promise.all(list.map(async (x) =>  {
        var symbol = x.symbol ? x.symbol:x;    
        return getStockDataFromDb(symbol,interval);          
    })).then(stockData => {
        var arr = stockData.map(async (dataObj) =>  {
            try{
                var data = JSON.parse(dataObj.data); 
            }
            catch(e){
                console.log("Error " + e);
            }
        });                           
    })
    .catch(error => { 
        console.log(error)
    }); 
}

//backTesting
async function backTesting(symbol,interval,strategy,isbackTesting){ 
    var matchDates = [];
    return new Promise(function(resolved, rejected) {           
        var arr =  getStockDataFromDb(symbol,interval); 
        resolved(arr);  
    }).then(stockData => {
            try{
                var data = JSON.parse(stockData.data); 
                startBackTesting(symbol,data,strategy,isbackTesting).then(finalResult => { 
                for(var i=0; i < finalResult[1].length;i++){
                    var finalResultFlag = finalResult[0][i].every(x => x.flag == true);
                  
                    if(finalResultFlag){
                        matchDates.push(finalResult[1][i][0].date);
                       // console.log("\n > " +JSON.stringify(finalResult[0][i]));
                       // console.log("\n backTesting RESULT  > " +strategy.name +"::"+ stockData.symbol +" > "+ matchDates);
                    }
                }  
                
                console.log("\n backTesting RESULT  > " +strategy.name +"::"+ stockData.symbol +" > "+ matchDates);
            }).catch(error => 
            {
                console.log("OUTER LOOP ERROR > " + error)
            });
        }
        catch(e){
            console.log("Error " + e);
        }             
    })
    .catch(error => { 
        console.log(error)
    }); 
}

async function syncLiveStockDataByInterval(list,interval){ 
    list.map(async (x) =>  {
        var symbol = x.symbol ? x.symbol:x;    
        var ex = x.ex;        
        queue.push({symbol:symbol,ex:ex,interval:interval}, function (err) {
           //console.log('syncLiveStockDataByInterval : Finished Queue' + interval);
        });       
    }); 
}

function getStockDataByInterval(symbol,interval,strategy){ 
    getStockDataFromDb(symbol,interval)
    .then(dataObj  => {
        //console.log("symbol  "+dataObj.symbol);
       var data = JSON.parse(dataObj.data); 
       // console.log("getStockDataByInterval \n " + data.length);
       // (dataObj.symbol,data,strategy,true);
    }).catch(error => console.log(error));  
}

function getBankNifty(symbol,interval,strategy){ 
    getStockDataFromDb(symbol,interval)
    .then(dataObj  => {

        if(dataObj && dataObj.data){
            //console.log("getBankNifty \n " + JSON.stringify(dataObj) );
            var data = JSON.parse(dataObj.data); 
            
                var close = data[data.length - 1].CLOSE;
                var currentPrice = Math.round(close / 100) * 100;
                var pricePattern = new RegExp(String(currentPrice), 'gi');
                data.reverse();
                data.map(row => {
                    var india = moment.tz(new Date(Number(row.LASTTRADETIME)), "Asia/Kolkata");
                    india.format(); 
                    row.LASTTRADETIME = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();
                    row.rsi = rsi.nextValue(Number(row.CLOSE));
                    row.sma = sma.nextValue(Number(row.CLOSE));
                    row.bb = bb.nextValue(Number(row.CLOSE)); 
                    
                    return row;
                });
                data.reverse();

                console.log("getBankNifty \n " + JSON.stringify(data[0]) +":"+currentPrice);
            }

        //checkBankNiftyExpiry(data);
       // getIndicator(dataObj.symbol,data,strategy,true);
    }).catch(error => console.log(error));  
}

async function loadSymbol(symbol,exchange,interval='1day',start_date='',end_date=''){  
    var data ={};
    var candle_data = [];

    if(exchange.toUpperCase() =="NSE_EQ"){
        exchange ="NFO";
        data.instrumentIdentifier = 'FUTSTK_'+symbol+'_25JUL2019_XX_0';
    }else  if(exchange.toUpperCase() =="NFO"){
        data.instrumentIdentifier = symbol;//'FUTSTK_'+symbol+'_25JUL2019_XX_0';
    }else  if(exchange.toUpperCase() =="NSE_INDEX"){
        data.instrumentIdentifier = symbol;//'FUTIDX_'+symbol+'_25JUL2019_XX_0';
    }

    data.exchange = exchange;
    //console.log("\n > " + data.instrumentIdentifier + " > "+JSON.stringify(data));

    if(interval=='3MINUTE')
        candle_data = await GetHistory3Minute(data);
    else if(interval=='5MINUTE')
        candle_data = await GetHistory5Minute(data);
    else if(interval=='15MINUTE')
        candle_data = await GetHistory15Minute(data);
    else if(interval=='30MINUTE')
        candle_data = await GetHistory30Minute(data);
    else if(interval=='60MINUTE')
        candle_data = await GetHistory60Minute(data);
    else if(interval=='1DAY')
        candle_data = await GetHistory1Day(data);
   
    if(candle_data && candle_data.type =='invalid-json'){
        console.log("\n adding queue again > " + symbol + " > "+JSON.stringify(candle_data));
        queue.push({symbol:symbol,ex:exchange,interval:interval}, function (err) {
            //console.log('syncLiveStockDataByInterval : Finished Queue' + interval);
         });  
    }
    else{
        
    }
    return candle_data;
}

function getAllData(){
    var result = 0;
    let promise = new Promise(function(resolve, reject) {
        /* setTimeout(function() {
            var interval = '15MINUTE';
            getBankNifty(bankNiftySymbol,interval,'');
        }, 1300); */

        setTimeout(function() {
            resolve(1);
            syncAllUpstoxData(watchList);
        }, 7000);
   
    }).then(res=>{
        getPercent_list(watchList);
        getGapUpDown(watchList);
        
       /*  strategyStrongList.map(async(strategy)=>{
            applyStrategy(watchList,'15MINUTE',strategy); 
        }); */
        /* rsiList.map(async(strategy)=>{
            applyStrategy(bankNifty_indices,'15MINUTE',strategy); 
        }); */
    });
}
var Upstox = require("upstox");
var events = require('events');
var port = process.env.PORT || 3000;
var redirect_uri = "http://localhost:"+port+"/callback/";
if(process.env.NODE_ENV=="production")
{
    redirect_uri = "https://robo-trader.herokuapp.com/callback/";
}

class UpstoxBroker {  
    constructor(api,api_secret,isAutomated) {
        this.api = api;
        this.upstox = new Upstox(this.api);
        this.accessToken = "";
        this.api_secret = api_secret;
        this.client_id="";
        this.profile;
        this.balance;
        var that = this;
       // console.log("loginUri ***" + api +" > "+ api_secret +" > "+ isAutomated);
       // console.log("loginUri ***" + api +" > "+);
        if(!isAutomated){
            this.loginUrl = this.upstox.getLoginUri(redirect_uri);
            //console.log("loginUri ***" + this.loginUrl);
        }
        eventEmitter.on('placeOrder', onPlaceOrder);

        function getLoginURL(){
            return this.loginUrl;
        }

        function onPlaceOrder(data){
            var isValidUser = false;
            userObjList.map(userObj=>{
                if(userObj.user == that.client_id)
                {
                    isValidUser =true;
                }
            });

            if(isValidUser){
                //webSocket.send(JSON.stringify({data}));
               
                //Validate my orders with db
                console.log('\nEvent -> onPlaceOrder ' + data.strategy.name +":"+data.symbol+":"+data.strategy.transaction_type+":"+data.strategy.exchange+":"+data.strategy.odrerType+":"+data.strategy.isIntraday);
                //that.upstox.setToken(that.accessToken);
                var orderObject = {
                    transaction_type:getTransactionType(data.strategy.transaction_type),
                    exchange:getExchange(data.strategy.exchange),
                    symbol: getSymbol(data.symbol),
                    price:data.price,
                    quantity: data.strategy.quantity,
                    order_type:getOrderType(data.strategy.odrerType),
                    product: getProduct(data.strategy.isIntraday),
                };
                //console.log('\nEvent -> onPlaceOrder -> orderObject - ' + that.accessToken +":"+JSON.stringify(orderObject));
                if(that.accessToken){
                    
                        that.upstox.placeOrder(orderObject)
                            .then(function(response) {
                                // Order details received
                                console.log(response);
                            })
                            .catch(function(err) {
                                // Something went wrong.
                                console.log(err);
                            });
                    }
                }
            }
    }

    getUpstoxAccessToken(c)
    {
       var params = {
            "apiSecret": this.api_secret,
            "code": c,
            "grant_type": "authorization_code",
            "redirect_uri": redirect_uri
        };
        var that = this;
        that.upstox.getAccessToken(params)
            .then(function (response) {
                try{
                    var accessToken = response.access_token;
                    console.log("accessToken > " + accessToken);
                    //store.set('accessToken', accessToken); 
                    that.accessToken = accessToken;
                    that.upstox.setToken(accessToken);
                    that.start();
                }
                catch(e){
                    console.log( "Error > " + JSON.stringify(e));
                }
            })
            .catch(function (err) {
                console.log( "getAccessToken Error > " + JSON.stringify(err));
            });
    }

    start() {
        var that = this;
        that.getProfile();
        that.getBalance();

        that.upstox.connectSocket()
        .then(function(){
            that.upstox.on("orderUpdate", function(message) {
               // console.log("\n orderUpdate"+ JSON.stringify(message));
            });

            that.upstox.on("positionUpdate", function(message) {
                //message for position conversion
                console.log("\n positionUpdate"+ JSON.stringify(message));
            });
            
            that.upstox.on("tradeUpdate", function(message) {
                //message for trade updates
                console.log("\n tradeUpdate"+ JSON.stringify(message));
            });

            var niftyStr = [];//fno.join();

            that.upstox.subscribeFeed({
                "exchange": "NSE_FO",
                "symbol": niftyStr,
                "type": "ltp"
            })
            .then(function (response) {
                console.log('\n subscribeFeed response ', JSON.stringify(response));
            })
            .catch(function (error) {
                //res.send({ error: error });
                //console.log('Error in subscribe feed ', error);
            });  

            that.upstox.on("liveFeed", function(message) {
                //message for live feed
                console.log("liveFeed"+ JSON.stringify(message));
            });
            that.upstox.on("disconnected", function(message) {
                //listener after socket connection is disconnected
                console.log("UPSTOX disconnected > "+ message);
            });
            that.upstox.on("error", function(error) {
                //error listener
                console.log("upstox.on error"+ error);
            });
        }).catch(function(error) {
                console.log( "connectSocket #" + error);
        });
    }

    // Get Balance
    getBalance()
    {
        var that = this;
        that.upstox.getBalance({ type: "security" })  // type can be security or commodity
        .then(function (response) {
            that.balance = JSON.stringify(response);
            //console.log( '\n balance' + that.balance);
           // getListOfAllSymbol();
        })
        .catch(function (err) {
            console.log(err);
            //getListOfAllSymbol();
        });
    }

    getProfile()
    {
        var that = this;
        that.upstox.getProfile()
        .then(function (response) {
            
            that.client_id = response.data.client_id;
            that.profile = JSON.stringify(response.data);
            console.log("\n getProfile - "+ that.client_id);// +" : "+  that.profile);
        })
        .catch(function (error) {
            console.log("getProfile Error"+ JSON.stringify(error));
        });
    }
}

function getOrderType(odrerType){
    var  odrer = '';
    if(odrerType == "market"){
        odrer = 'M';
    }
    else if(odrerType == "limit"){
        odrer = 'L';
    }
    else if(odrerType == "stopLossLimit"){
        odrer = 'SL';
    }
    else if(odrerType == "stopLossMarket"){
        odrer = 'SL-M';
    }
    return odrer;
}

function getDuration(duration){
    var  dur = '';
    if(duration == "DAY"){
        dur = 'DAY';
    }
    else if(duration == "IOC"){
        dur = 'IOC';
    }
    else if(duration == "GTD"){
        dur = 'GTD';
    }
    
    return dur;
}

function getProduct(product){
    var  pro = '';
    if(product == "Intraday"){
        pro = 'I';
    }
    else if(product == "Delivery"){
        pro = 'D';
    }
    else if(product == "CO"){
        pro = 'CO';
    }
    else if(product == "OCO"){
        pro = 'OCO';
    }
    return pro;
}

function getExchange(exchange){
    var upstoxEx =  '';
    if(exchange == "NFO"){
        upstoxEx = 'nse_fo';
    }
    else if(exchange == "NSE"){
        upstoxEx = 'nse_eq';
    }
    else if(exchange == "MCX"){
        upstoxEx = 'mcx_fo';
    }
    else if(exchange == "CDS"){
        upstoxEx = 'ncd_fo';
    }
    else if(exchange == "NSE_IDX"){
        upstoxEx = 'nse_index';
    }
    else{
        upstoxEx = '';
    }
    return upstoxEx;
    
}

function getTransactionType(transaction_type){
    var transaction =  '';
    if(transaction_type == "sell"){
        transaction = 'S';
    }
    else if(transaction_type == "buy"){
        transaction = 'B';
    }
    return transaction;
}


function getSymbol(symbol){
    var sym =  '';
    var symbolArr = symbol.split('_');
    //console.log("symbolArr " + symbolArr);
    var now = new Date();
    var year = now.getFullYear();

    var isFutureStock = symbol.search('FUTSTK');
    var isFutureIndex = symbol.search('FUTIDX');
    var isOptionIndex = symbol.search('OPTIDX');
    var isOptionStock = symbol.search('OPTSTK');
    
    //console.log("isOptionStock " + isFutureStock+ isFutureIndex+ isOptionIndex+ isOptionStock);
    if(isFutureStock >= 0 || isFutureIndex >= 0){
        sym = symbolArr[1] + String(year).substring(2,4) + String(String(symbolArr[2]).split(year)[0]).substring(2,5) + 'FUT';
    }
    else if(isOptionIndex >= 0 || isOptionStock >= 0 ){
        var dateMonth = String(String(symbolArr[2]).split(year)[0]);
        var month = 0;
        var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];

        for(var i= 0; i < months.length;i++){
            if(String(months[i]).toLowerCase().search(dateMonth.substring(2,5).toLowerCase()) >= 0){
                break;
            }
        }
        sym = symbolArr[1] + String(year).substring(2,4) + Number(i+1) +dateMonth.substring(0,2) + symbolArr[4]+ symbolArr[3];
    }
    //console.log("sym " + sym);
    return sym;
}

function csvTojs(csv) {
  var lines=csv;//.split(",");
  var result = [];

  var headers = lines[0].split(",");

    

  for(var i=1; i<lines.length; i++) {
    var obj = {};

    var row = lines[i],
      queryIdx = 0,
      startValueIdx = 0,
      idx = 0;

    if (row.trim() === '') { continue; }

    while (idx < row.length) {
      /* if we meet a double quote we skip until the next one */
      var c = row[idx];

      if (c === '"') {
        do { c = row[++idx]; } while (c !== '"' && idx < row.length - 1);
      }

      if (c === ',' || /* handle end of line with no comma */ idx === row.length - 1) {
        /* we've got a value */
        var value = row.substr(startValueIdx, idx - startValueIdx).trim();

        /* skip first double quote */
        if (value[0] === '"') { value = value.substr(1); }
        /* skip last comma */
        if (value[value.length - 1] === ',') { value = value.substr(0, value.length - 1); }
        /* skip last double quote */
        if (value[value.length - 1] === '"') { value = value.substr(0, value.length - 1); }

        var key = headers[queryIdx++];
        obj[key] = value;
        startValueIdx = idx + 1;
      }

      ++idx;
    }

    result.push(obj);
  }
  return result;
}

function getPercentageChange(oldNumber, newNumber){
  var decreaseValue = newNumber - oldNumber;

  return ((decreaseValue / oldNumber) * 100).toFixed(2);
}


Array.prototype.insert = function(i,...rest){
  return this.slice(0,i).concat(rest,this.slice(i));
}


function formatDate(str)
{
    if(String(str).length == 1)
    {
        str ="0"+str;
    }
    return str;
}

function getTradingHours()
{
  var flag = false;

  var now = new Date();
  now.setDate(now.getDate() - 2);
  var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
  india.format();  
  var hour= india.hour();
  var min = india.minute();
  //console.log(hour+" : "+min);
  if(hour >= 9 && hour <= 16)
  {
      flag = true;
      if(hour == 9 && min < 15){
        flag = false;
      }
      else if(hour == 15 && min > 15){
        flag = false;
      }
  }
  else{
    flag = false;
  }

  return flag;
}


Array.prototype.groupBy = function(prop) {
  return this.reduce(function(groups, item) {
    const val = item[prop]
    groups[val] = groups[val] || []
    groups[val].push(item)
    return groups
  }, {})
}

function getBankNifity(str)
{
  var bnf = "BANKNIFTY";//BANKNIFTY19MAYFUT
  var now = new Date();
  var y = now.getFullYear();
  var y = now.getMonth();
  y = String(y).slice(2,4);
  m =  String(months[now.getMonth()]).slice(0,3);

  return bnf = bnf + y + m +"FUT";
}

function getAllBankNifityOption(str)
{
  var bnf = "BANKNIFTY";//BANKNIFTY19MAYFUT
  var now = new Date();
  var y = now.getFullYear();
  var y = now.getMonth();
  y = String(y).slice(2,4);
  m =  String(months[now.getMonth()]).slice(0,3);

  return bnf = bnf + y + m +"FUT";
}

