'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var sqlite3 = require('sqlite3').verbose();
var db = new sqlite3.Database('db/upstox.db', function (err) {
    if (err) {
        return console.error(err.message);
    }
    console.log('Connected to the in-memory SQlite database.');
});
function closeDb() {
    db.close();
}
function insertDB(query, param) {
    return new Promise(function (resolve, reject) {
        db.run(query, param, function (err) {
            if (err)
                console.log("Insert error > " + err);
            else {
                console.log("Successfully inserted");
                resolve("success");
            }
        });
    });
}
function getFirst(query, params) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    db.get(query, params, function (err, row) {
                        if (err)
                            reject("Read error: " + err.message);
                        else {
                            resolve(row);
                        }
                    });
                })];
        });
    });
}
var nodemailer = require('nodemailer');
var transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'satish.patel41@gmail.com',
        pass: 'Pratiksha@123'
    }
});
// setup email data with unicode symbols
var mailOptions = {
    from: '"Admin" <satish.patel41@gmail.com>',
    to: 'satish.patel41@yahoo.com',
    subject: 'Call Generated',
    text: 'Alert for',
    html: '<p><b>Hello</b> Alert triggered on Wed Nov 7, 6:00 pm</p>' +
        '<p>Here\'s a nyan cat for you as an embedded attachment:<br/><img src="cid:nyan@example.com"/></p>',
    // An array of attachments
    attachments: [
        // String attachment
        {
            filename: 'notes.txt',
            content: 'Some notes about this e-mail',
            contentType: 'text/plain' // optional, would be detected from the filename
        }
    ],
    list: {
        // List-Help: <mailto:admin@example.com?subject=help>
        help: 'admin@example.com?subject=help',
        // List-Unsubscribe: <http://example.com> (Comment)
        unsubscribe: [
            {
                url: 'http://example.com/unsubscribe',
                comment: 'A short note about this url'
            },
            'unsubscribe@example.com'
        ],
        // List-ID: "comment" <example.com>
        id: {
            url: 'mylist.example.com',
            comment: 'This is my awesome list'
        }
    }
};
function sendingMail() {
    // send mail with defined transport object
    transporter.sendMail(mailOptions, function (error, info) {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: %s', info.messageId);
        console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
    });
}
var cron = require('node-cron');
var list = fnoList;
cron.schedule('*/5 * * * *', function () {
    load5minData();
    console.log('running a task every 5 minutes');
}, {
    scheduled: true,
    timezone: "Asia/Kolkata"
});
cron.schedule('*/10 * * * *', function () {
    load10minData();
    console.log('running a task every 10 minutes');
}, {
    scheduled: true,
    timezone: "Asia/Kolkata"
});
cron.schedule('*/30 * * * *', function () {
    load30minData();
    console.log('running a task every 30 minutes');
}, {
    scheduled: true,
    timezone: "Asia/Kolkata"
});
cron.schedule('0 */1 * * *', function () {
    load60minData();
    console.log('running a task every 1 hour');
}, {
    scheduled: true,
    timezone: "Asia/Kolkata"
});
cron.schedule('59 23 * * *', function () {
    store.unlink();
    console.log('Clean cache data');
}, {
    scheduled: true,
    timezone: "Asia/Kolkata"
});
cron.schedule('0 17 * * *', function () {
    load1dayData();
    console.log('running a task every 1 day');
}, {
    scheduled: true,
    timezone: "Asia/Kolkata"
});
function load1dayData() {
    log('NSE 1 day data update');
    var list = niftyList;
    var now = new Date();
    now.setDate(now.getDate() - 21);
    /* var india = moment.tz(now, "Asia/Kolkata");
    india.format(); */
    var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
    var interval = '1DAY';
    if (accessToken) {
        loadAllSymbolData(list, interval, start_date).then(function (response) {
            if (response.length > 0)
                store.set('data1day', response);
            list = now = interval = null;
        })
            .catch(function (error) {
            log("load1dayData/ error > " + JSON.stringify(error));
        });
    }
}
function load60minData() {
    log('NSE 60MINUTE data update');
    var list = niftyList;
    var now = new Date();
    now.setMinutes(now.getMinutes() - 50 * 60);
    /* var india = moment.tz(now, "Asia/Kolkata");
    india.format(); */
    var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
    var interval = '60MINUTE';
    if (accessToken) {
        loadAllSymbolData(list, interval, start_date).then(function (response) {
            if (response.length > 0)
                store.set('data60', response);
            list = now = interval = null;
        })
            .catch(function (error) {
            log("load60minData/ error > " + JSON.stringify(error));
        });
    }
}
function load30minData() {
    log('NSE 30MINUTE data update');
    var list = niftyList;
    var now = new Date();
    now.setMinutes(now.getMinutes() - 50 * 30);
    /*  var india = moment.tz(now, "Asia/Kolkata");
     india.format(); */
    var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
    var interval = '30MINUTE';
    if (accessToken) {
        loadAllSymbolData(list, interval, start_date).then(function (response) {
            if (response.length > 0)
                store.set('data30', response);
            list = now = interval = null;
        })
            .catch(function (error) {
            log("load30minData/ error > " + JSON.stringify(error));
        });
    }
}
function load10minData() {
    log('NSE 10MINUTE data update');
    var list = niftyList;
    var interval = '10MINUTE';
    var now = new Date();
    now.setMinutes(now.getMinutes() - 50 * 10);
    /*  var india = moment.tz(now, "Asia/Kolkata");
     india.format(); */
    var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
    if (accessToken) {
        loadAllSymbolData(list, interval, start_date).then(function (response) {
            if (response.length > 0)
                store.set('data10', response);
            list = now = interval = null;
        })
            .catch(function (error) {
            log("load10minData/ error > " + JSON.stringify(error));
        });
    }
}
function load5minData() {
    log('NSE 5 MINUTE data update');
    var list = niftyList;
    var now = new Date();
    now.setMinutes(now.getMinutes() - 50 * 5);
    /*    var india = moment.tz(now, "Asia/Kolkata");
       india.format(); */
    var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
    var interval = '5MINUTE';
    if (accessToken) {
        loadAllSymbolData(list, interval, start_date).then(function (response) {
            if (response.length > 0)
                store.set('data5', response);
            list = now = interval = null;
        })
            .catch(function (error) {
            log("load5minData/ error > " + start_date + " >> " + JSON.stringify(error));
        });
    }
}
var express = require('express');
var moment = require('moment-timezone');
var bodyParser = require('body-parser');
var fs = require('fs');
var url = require('url');
var cluster = require('cluster');
var dataForge = require('data-forge');
var session = require('express-session');
var FileStore = require('session-file-store')(session);
var Store = require('data-store');
var async = require('async');
var querystring = require('querystring');
var store = new Store({ path: 'config.json' });
require('data-forge-fs');
var Upstox = require("upstox");
var api = "cIs71szuLZ7WFKInU8O0o7GTHm5QIJke8ahnzLVw";
var upstox = new Upstox(api);
var PORT = process.env.PORT || 8080;
var redirect_uri = "http://localhost:" + PORT;
var nifty = "https://www.nseindia.com/content/indices/ind_nifty50list.csv";
var fno = "https://www.nseindia.com/content/fo/fo_mktlots.csv";
if (process.env.NODE_ENV == "production") {
    api = "cIs71szuLZ7WFKInU8O0o7GTHm5QIJke8ahnzLVw";
    redirect_uri = "https://robo-trader.herokuapp.com/";
}
var numReqs = 0;
if (cluster.isMaster) {
    // Fork workers.
    var cpus = require('os').cpus().length;
    console.log("cpus " + cpus);
    for (var i = 0; i < cpus; i++) {
        var worker = cluster.fork();
        worker.on('message', function (msg) {
            /*  if (msg.cmd && msg.cmd == 'notifyRequest') {
               numReqs++;
             } */
        });
    }
    cluster.on('death', function (worker) {
        console.log('worker ' + worker.pid + ' died');
    });
}
else {
    // Worker processes have a http server.
    var app = express();
    app.use(express.static('public'));
    app.use(bodyParser.json()); // support json encoded bodies
    app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies
    app.use(session({
        store: new FileStore({
            path: './session-store'
        }),
        name: '_fs_cookie',
        resave: false,
        saveUninitialized: false,
        secret: "00777",
        cookie: {
            maxAge: 1000 * 60 * 60 * 1 //24
        }
    }));
    app.use(function (req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        next();
    });
    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    var date = new Date();
    var today = date.getDate() + "-" + (date.getMonth() + 1) + "-" + date.getFullYear();
    var time = date + ":" + date.getHours() + ":" + date.getMinutes();
    var fnoArr = dataForge.readFileSync("data/list/fo_mktlots.csv")
        .parseCSV()
        .toArray();
    //console.log("fnoArr " + fnoArr);
    var fnoList = [];
    fnoArr.forEach(function (item) {
        //console.log(JSON.stringify(item));
        if (item.SYMBOL)
            fnoList.push(item.SYMBOL);
        //else
        // fnoList.push(item.Symbol)
    });
    store.set('fnoList', fnoList);
    //console.log("fnoList " + fnoList);
    var niftyList = dataForge.readFileSync("data/list/ind_nifty50list.csv")
        .parseCSV()
        .toArray();
    niftyList = niftyList.map(function (x) { return x.Symbol; });
    store.set('niftyList', niftyList);
    // console.log("Res niftyList" + niftyList);
    app.get('/', function (req, res) {
        var q = url.parse(req.url, true).query;
        code = q.code;
        console.log("session > " + JSON.stringify(req.session.cookie));
        //checkBankNiftyExpiry();
        if (code) {
            getAcceToken(code);
            res.sendFile("index.html", { "root": __dirname });
        }
        else {
            res.sendFile("index.html", { "root": __dirname });
        }
        q = null;
    });
    app.get('/welcome', checkSignIn, function (req, res) {
        res.send('<b>Hello</b> welcome to my http server made with express');
    });
    app.get('/login', function (req, res) {
        res.sendFile("login.html", { "root": __dirname });
    });
    app.get('/logout', function (req, res) {
        req.session.destroy(function () {
            console.log("user logged out.");
        });
        res.redirect('/login');
    });
    function checkSignIn(req, res, next) {
        if (req.session.user) {
            next(); //If session exists, proceed to page
        }
        else {
            //var err = new Error("Not logged in!");
            console.log(JSON.stringify(req.session) + " session \n" + req.session.user);
            res.sendFile("login.html", { "root": __dirname });
        }
    }
    app.post('/login', function (req, res) {
        var email = req.body.username;
        var psw = req.body.password;
        if (email) {
            var query = "select * from User where email=? and password=?";
            var param = [email, psw];
            getFirst(query, param).then(function (user) {
                console.log("result > " + JSON.stringify(user));
                if (user == undefined) {
                    res.send("error");
                }
                else {
                    //client.set('user', user);
                    req.session.user = user;
                    res.send(user);
                }
            });
        }
        else
            res.sendFile("login.html", { "root": __dirname });
    });
    app.get('/signup', function (req, res) {
        res.sendFile("signup.html", { "root": __dirname });
    });
    app.post('/signup', function (req, res) {
        var email = req.body.email;
        var psw = req.body.psw;
        var mobile = req.body.mobile;
        var name = req.body.name;
        var pswRepeat = req.body.pswRepeat;
        if (email) {
            var query = "select * from User where email=?";
            var param = [email];
            var isMatchEmail = false;
            getFirst(query, param).then(function (user) {
                console.log("result > " + JSON.stringify(user));
                if (user == undefined) {
                    //Do nothing
                }
                else {
                    res.send("error");
                    isMatchEmail = true;
                }
            });
            var query = "INSERT INTO User (name,mobile,email,password)VALUES(?,?,?,?)";
            var param = [name, mobile, email, psw];
            console.log(query + "> " + param);
            if (!isMatchEmail) {
                insertDB(query, param).then(function (responses) {
                    console.log("result > " + JSON.stringify(responses));
                    if (responses == 'success') {
                        res.send('success');
                    }
                    else {
                        res.send("error");
                    }
                });
            }
            //res.send('<b>username </b>  : ' + email +" > "+ mobile+" > "+ name+" > "+ psw);
        }
        else
            res.sendFile("signup.html", { "root": __dirname });
    });
    app.get('/contactus', checkSignIn, function (req, res) {
        res.sendFile("contactus.html", { "root": __dirname });
    });
    app.get('/index', checkSignIn, function (req, res) {
        res.sendFile("index.html", { "root": __dirname });
    });
    app.get('/scan', checkSignIn, function (req, res) {
        res.sendFile("scanner.html", { "root": __dirname });
    });
    app.get('/strategy', checkSignIn, function (req, res) {
        res.sendFile("strategy.html", { "root": __dirname });
    });
    app.get('/gainerloser', checkSignIn, function (req, res) {
        res.sendFile("gainerloser.html", { "root": __dirname });
    });
    var lastObject = { open: '', close: '', low: '', high: '', volume: '', timestamp: '', rsi: '', sma: '', bb: { upper: '', lower: '', isCrossed: '', middel: '', pb: '' } };
    var stockData = [];
    app.post('/createStrategy', function (req, res) {
        var strategyObj = JSON.parse(req.body.data);
        var uid = strategyObj.uid;
        var name = strategyObj.name;
        var symbol = strategyObj.symbol;
        var exchange = strategyObj.exchange;
        var orderType = strategyObj.orderType;
        var symbolToBuySell = strategyObj.symbolToBuySell;
        var indicator = strategyObj.indicators[0].indicator;
        var settings = strategyObj.indicators[0].settings;
        var value = strategyObj.indicators[0].value;
        var op = strategyObj.indicators[0].op;
        var interval = strategyObj.interval;
        var query = "INSERT INTO Strategy (uid,name,symbol,exchange,orderType,symbolToBuySell,indicator,settings,value,op,interval)VALUES(?,?,?,?,?,?,?,?,?,?,?)";
        var param = [uid, name, symbol, exchange, orderType, symbolToBuySell, indicator, settings, value, op, interval];
        console.log(query + "> " + JSON.stringify(param));
        insertDB(query, param).then(function (responses) {
            console.log("result > " + JSON.stringify(responses));
            if (responses == 'success') {
                res.send('success');
            }
            else {
                res.send("error");
            }
        });
        //var interval = strategyObj.interval;
        var now = new Date();
        if (interval == "5MINUTE") // 1WEEK, 1MONTH
            now.setDate(now.getDate() - 2); //now.setMinutes(now.getMinutes() - 5 * 20);
        else if (interval == "10MINUTE")
            now.setDate(now.getDate() - 3); //now.setMinutes(now.getMinutes() - 10 * 20);
        else if (interval == "30MINUTE")
            now.setDate(now.getDate() - 4); //now.setMinutes(now.getMinutes() - 30* 20);
        else if (interval == "60MINUTE")
            now.setDate(now.getDate() - 4); //now.setMinutes(now.getMinutes() - 60* 20);
        else if (interval == "1DAY")
            now.setDate(now.getDate() - 20);
        else if (interval == "1WEEK")
            now.setDate(now.getDate() - 7 * 20);
        else if (interval == "1MONTH")
            now.setMonth(now.getMonth() - 20);
        var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
        initiateIndicator();
        stockData = [];
        loadSymbol(strategyObj.symbol, strategyObj.exchange, interval, start_date).then(function (response) {
            res.setHeader('Content-Type', 'application/json');
            stockData = response.data;
            lastObject = { open: '', close: '', low: '', high: '', volume: '', timestamp: '', rsi: '', sma: '', bb: { upper: '', lower: '', isCrossed: '', middel: '', pb: '' } };
            stockData.map(function (row) {
                var india = moment.tz(new Date(row.timestamp), "Asia/Kolkata");
                india.format();
                row.timestamp = india.date() + "/" + (india.month() + 1) + "/" + india.year() + " " + india.hour() + ":" + india.minute(); //new Date(row.timestamp);
                row.rsi = rsi.nextValue(Number(row.close));
                row.sma = sma.nextValue(Number(row.close));
                row.bb = bb.nextValue(Number(row.close));
                lastObject = row;
                return row;
            });
            stockData.reverse();
            var data = {
                "symbol": strategyObj.symbol,
                "close": stockData[0].close,
                "volume": stockData[0].volume,
                "rsi": stockData[0].rsi,
                "timestamp": stockData[0].timestamp,
                "sma": stockData[0].sma,
                "bb": stockData[0].bb
            };
            var isMatch = false;
            for (var i = 0; i < strategyObj.indicators.length; i++) {
                var op = strategyObj.indicators[i]['op'];
                var a = data[strategyObj.indicators[i]['indicator']];
                var b = strategyObj.indicators[i]['value'];
                var result = false;
                if (op == '<')
                    result = (a < b);
                else if (op == '>')
                    result = (a > b);
                else if (op == '<=')
                    result = (a <= b);
                else if (op == '>=')
                    result = (a >= b);
                else if (op == '==')
                    result = (a == b);
                if (result) {
                    isMatch = true;
                }
                console.log("isMatch :> " + isMatch);
            }
            if (isMatch) {
                var orderObject = {
                    transaction_type: strategyObj.orderType,
                    exchange: strategyObj.exchange,
                    symbol: strategyObj.symbolToBuySell,
                    quantity: 1,
                    order_type: "m"
                };
                upstox.placeOrder(orderObject).then(function (response) {
                    // Order details received
                    console.log(response);
                })
                    .catch(function (err) {
                    // Something went wrong.
                    console.log(err);
                });
            }
            console.log("Result " + JSON.stringify(data));
            res.send(JSON.stringify(data));
            stockData = null;
            res.end();
        })
            .catch(function (error) {
            log("createStrategy error > " + JSON.stringify(error));
        });
    });
    app.get('/loadSymbol/:symbol/:interval', function (req, res) {
        var symbol = req.params.symbol;
        var interval = req.params.interval;
        var now = new Date();
        if (interval == "5MINUTE") // 1WEEK, 1MONTH
            now.setMinutes(now.getMinutes() - 5 * 20);
        else if (interval == "10MINUTE")
            now.setMinutes(now.getMinutes() - 10 * 20);
        else if (interval == "30MINUTE")
            now.setMinutes(now.getMinutes() - 30 * 20);
        else if (interval == "60MINUTE")
            now.setMinutes(now.getMinutes() - 60 * 20);
        else if (interval == "1DAY")
            now.setDate(now.getDate() - 20);
        else if (interval == "1WEEK")
            now.setDate(now.getDate() - 7 * 20);
        else if (interval == "1MONTH")
            now.setMonth(now.getMonth() - 20);
        else
            now.setDate(now.getDate() - 20);
        var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
        //console.log("start_date > " + interval +" >> "+start_date);
        initiateIndicator();
        stockData = [];
        loadSymbol(symbol, 'nse_eq', interval, start_date).then(function (response) {
            res.setHeader('Content-Type', 'application/json');
            stockData = response.data;
            //console.log(stockData);
            lastObject = { open: '', close: '', low: '', high: '', volume: '', timestamp: '', rsi: '', sma: '', bb: { upper: '', lower: '', isCrossed: '', middel: '', pb: '' } };
            stockData.map(function (row) {
                var india = moment.tz(new Date(row.timestamp), "Asia/Kolkata");
                india.format();
                row.timestamp = india.date() + "/" + (india.month() + 1) + "/" + india.year() + " " + india.hour() + ":" + india.minute(); //new Date(row.timestamp);
                row.rsi = rsi.nextValue(Number(row.close));
                row.sma = sma.nextValue(Number(row.close));
                row.bb = bb.nextValue(Number(row.close));
                if (Number(row.close) >= row.bb.upper) // && Number(lastObject.close) < Number(lastObject.bb.upper))
                 {
                    row.bb.isCrossed = 'Crossed Above';
                }
                else if (Number(row.close) <= row.bb.lower) // && Number(lastObject.close) > Number(lastObject.bb.lower))
                 {
                    row.bb.isCrossed = 'Crossed Below';
                }
                //lastObject = row;
                return row;
            });
            stockData.reverse();
            res.send(JSON.stringify(stockData));
            stockData = null;
            res.end();
        })
            .catch(function (error) {
            if (error.code == '401') {
                accessToken = '';
                store.set('accessToken', accessToken);
                var loginUrl = upstox.getLoginUri(redirect_uri);
                res.status(200).header('Content-type', 'text/html');
                code = req.params.code;
                res.status(302).setHeader('Location', loginUrl);
                res.end();
            }
            log("/loadSymbol/:symbol/:interval error > " + JSON.stringify(error));
        });
    });
    function initiateIndicator() {
        //console.log("initiateIndicator");
        var inputRSI = {
            values: [],
            period: 14
        };
        rsi = new technicalindicators.RSI(inputRSI);
        var inputSMA = {
            values: [],
            period: 20
        };
        //console.log("rsi");
        sma = new technicalindicators.SMA(inputSMA);
        var inputBB = {
            period: 14,
            values: [],
            stdDev: 2
        };
        //console.log("sma");
        bb = new technicalindicators.BollingerBands(inputBB);
        inputBB = inputRSI = inputSMA = null;
    }
    app.get('/getFutureContract/:exchange', function (req, res) {
        var exchange = req.params.exchange;
        //console.log("getMaster exchange > " +  JSON.stringify(exchange));
        fs.readFile('data/index/nse_fo.txt', 'utf8', function (err, response) {
            var obj = JSON.parse(response);
            var now = new Date();
            var thisMonth = months[now.getMonth()].slice(0, 3).toUpperCase();
            var monthPattern = new RegExp(thisMonth, 'gi');
            var data = csvTojs(obj.data);
            //console.log(data);
            var data = data.filter(function (x) { return (String(x.instrument_type) === exchange); });
            //console.log(data);
            var arr = data.map(function (x) { return x.symbol; });
            //console.log(arr);
            //console.log(arr);
            res.setHeader('Content-Type', 'application/json');
            res.send(arr);
            res.end();
        });
        /* getMaster(exchange).then(function (response:any) {
    
            console.log("getMaster respone > " +  JSON.stringify(response));
    
    
            var data = response.filter(function (el) {
                return (el != null && el.close != null && el.close != undefined && el.close != "");
            });
    
            res.setHeader('Content-Type', 'application/json');
            res.send(JSON.stringify(response));
            exchange =  data = null;
            res.end();
        })
        .catch(function(error:any){
            log("getMaster/ error > " +  JSON.stringify(error));
        }); */
    });
    var result = [];
    var map = new Map();
    app.get('/loadAllSymbolData/:interval/:exchange', function (req, res) {
        console.log('params: ' + JSON.stringify(req.params));
        var interval = req.params.interval;
        var exchange = req.params.exchange;
        var list = [];
        if (exchange == "nifty")
            list = store.get('niftyList'); //niftyList;
        else if (exchange == "fno")
            list = store.get('fnoList'); //fnoList;
        else {
            list = store.get('nseSymbolList');
        }
        var stockData = [];
        if (interval == "5MINUTE")
            stockData = store.get('data5');
        else if (interval == "10MINUTE")
            stockData = store.get('data10');
        else if (interval == "30MINUTE")
            stockData = store.get('data30');
        else if (interval == "60MINUTE")
            stockData = store.get('data60');
        else if (interval == "1DAY")
            stockData = store.get('data1day');
        else if (interval == "1WEEK")
            stockData = store.get('data1week');
        else if (interval == "1MONTH")
            stockData = store.get('data1month');
        var data = [];
        if (stockData && stockData != undefined && stockData.length > 0) {
            stockData.filter(function (el) {
                return (el != null && el.close != null && el.close != undefined && el.close != "");
            });
        }
        //console.log('*stockData interval : ' +interval +">"+ stockData.length);
        if (stockData && stockData.length > 0) {
            res.setHeader('Content-Type', 'application/json');
            res.send(JSON.stringify(stockData));
            res.end();
        }
        else {
            console.log('*No data available.. Fetch it : ' + interval);
            var now = new Date();
            if (interval == "5MINUTE")
                now.setDate(now.getDate() - 2);
            else if (interval == "10MINUTE")
                now.setDate(now.getDate() - 3);
            else if (interval == "30MINUTE")
                now.setDate(now.getDate() - 4);
            else if (interval == "60MINUTE")
                now.setDate(now.getDate() - 4);
            else if (interval == "1DAY")
                now.setDate(now.getDate() - 20);
            else if (interval == "1WEEK")
                now.setDate(now.getDate() - 7 * 20);
            else if (interval == "1MONTH")
                now.setMonth(now.getMonth() - 20);
            var start_date = now.getDate() + "-" + (now.getMonth() + 1) + "-" + now.getFullYear();
            console.log("start_date :: " + interval + "> " + start_date);
            loadAllSymbolData(list, interval, start_date).then(function (response) {
                console.log("loadAllSymbolData" + JSON.stringify(response));
                var data = [];
                if (interval == "5MINUTE") {
                    store.set('data5', response);
                }
                else if (interval == "10MINUTE") {
                    store.set('data10', response);
                }
                else if (interval == "30MINUTE") {
                    store.set('data30', response);
                }
                else if (interval == "60MINUTE") {
                    store.set('data60', response);
                }
                else if (interval == "1DAY") {
                    store.set('data1day', response);
                }
                else if (interval == "1WEEK") {
                    store.set('data1week', response);
                }
                else if (interval == "1MONTH") {
                    store.set('data1month', response);
                }
                res.setHeader('Content-Type', 'application/json');
                res.send(JSON.stringify(response));
                exchange = list = interval = data = null;
                res.end();
            })
                .catch(function (error) {
                log("loadAllSymbolData/ error > " + JSON.stringify(error));
            });
        }
    });
    app.get('/getListOfAllSymbol', function (req, res) {
        res.setHeader('Content-Type', 'application/json');
        fnoList = store.get('fnoList');
        if (fnoList.length > 0)
            res.send(JSON.stringify(fnoList));
        else
            res.send(JSON.stringify(getListOfAllSymbol()));
        res.end();
    });
    app.get('/sync', function (req, res) {
        syncStockData();
        res.setHeader('Content-Type', 'application/json');
        res.send("Successfully sync data !");
        res.end();
    });
    app.get('/getBalance', function (req, res) {
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(balance));
        res.end();
    });
    app.get('/getProfile', function (req, res) {
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(profile));
        res.end();
    });
    app.post('/scan', function (req, res) {
    });
    app.get('/admin', function (req, res) {
        if (store.get('accessToken') != '') {
            accessToken = store.get('accessToken');
            upstox.setToken(accessToken);
            getListOfAllSymbol();
            res.sendFile("index.html", { "root": __dirname });
        }
        else {
            var loginUrl = upstox.getLoginUri(redirect_uri);
            log("*loginUri " + loginUrl);
            res.status(200).header('Content-type', 'text/html');
            code = req.params.code;
            res.status(302).setHeader('Location', loginUrl);
            res.end();
        }
    });
    // Change the 404 message modifing the middleware
    app.use(function (req, res, next) {
        res.status(404).send("Sorry, that route doesn't exist. Have a nice day :)");
    });
    // start the server in the port 3000 !
    app.listen(PORT, function () {
        log('App listening on port ' + PORT);
    });
}
// Listen for dying workers
cluster.on('exit', function (worker) {
    // Replace the dead worker,
    // we're not sentimental
    console.log('Worker %d died :(', worker.id);
    cluster.fork();
});
var technicalindicators = require('technicalindicators');
var fs = require('fs');
var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var date = new Date();
var today = date.getDate() + "-" + (date.getMonth() + 1) + "-" + date.getFullYear();
var time = date + ":" + date.getHours() + ":" + date.getMinutes();
var days = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
];
var strategyObj = {
    symbol: 'BANKNIFTY19JANFUT',
    indicators: [{ indicator: 'rsi', settings: '14', value: '60', op: '>=' },
        { indicator: 'sma', settings: '20', value: 'close', op: '>=' }],
    interval: '15min'
};
function backTesting(stockData, path) {
    /* var result = Enumerable.from(stockData).forEach(function(obj)
    {
        console.log(obj.sma + " > "+ obj.rsi);
        return obj.rsi >= 60;
    }); */
    //var example = Enumerable(stockData).where(function(item){ return item.rsi >= 60; });
    //var result = Enumerable.from(stockData).where(function(obj){return obj.rsi >= 60});
    //var result = Enumerable.from(stockData).select((val, i) => ({ return val.rsi >= 60}));
    var result = stockData.filter(function (item) {
        return item.rsi >= 60;
    });
    var result = result.filter(function (item) {
        return item.close >= item.sma;
    });
    //console.log("\n \n stockData >> " + path +" >> "+result[0].timestamp);
    /* var stockData =response.data;
  
    //console.log("\n \n stockData >> " + JSON.stringify(stockData));
  
  
    stockData= stockData.map(x =>
    {
        var obj = x;
        obj.timestamp = new Date(obj.timestamp);
  
        //console.log("\n \n timestamp >> " +  obj.timestamp);
        return obj;
    });
    var closeData = stockData.map(x => x.close);
    var inputRSI = {
        values : closeData,
        period : 14
    };
    var rsiData = technicalindicators.RSI.calculate(inputRSI);
    var inputSMA = {
        values : closeData,
        period : 20
    };
    var smaData = technicalindicators.SMA.calculate(inputSMA);
    var BB = technicalindicators.BollingerBands
    var period = 14
    var inputBB = {
        period : period,
        values : closeData ,
        stdDev : 2
    }
    var bbData = BB.calculate(inputBB);
    //console.log("\n \n BB >> " + JSON.stringify(bbData));
  
    var index = 0;
    var buyprice = 0;
    var sellprice = 0;
    var profit = 0;
    var totalProfit = 0;
    var isBuySignalGenerated = false;
    var isSellSignalGenerated = false;
    var buyCall = 0;
    var sellCall = 0;
    
    stockData= stockData.map(x =>
    {
        var obj = x;
        obj.rsi = index > inputRSI.period?rsiData[index - inputRSI.period]:0;
        obj.sma = index >= inputSMA.period?smaData[index - inputSMA.period]:0;
        obj.bb = index >= inputBB.period?bbData[index - inputBB.period]:null;
  
        var date = new Date(obj.timestamp);;
  
        //console.log("date " + date);
  
        if(obj.rsi >= 60 && date.getDay() == date.getDay() && date.getMonth()== date.getMonth())
        {
            log(obj.rsi);
        }
        if(obj.rsi >= 60 && stockData[index - 1].rsi < 60)
        {
            buyCall++;
            buyprice = x.close;
            isBuySignalGenerated = true;
            console.log("\n\n BUY *>> " + x.timestamp +" >> "+ buyprice);
        }
        else if(obj.rsi != 0 && obj.rsi <= 40 && stockData[index - 1].rsi > 40)
        {
            sellCall++;
            sellprice = x.close;
            isSellSignalGenerated = true;
            console.log("\n\n SELL *>> " + x.timestamp +" >> "+ sellprice);
        }
        
        if(isBuySignalGenerated)
        {
            if(obj.rsi < 60 || x.close < obj.sma)
            {
                isBuySignalGenerated = false;
                profit = x.close - buyprice;
                totalProfit += profit;
                console.log("\n\n EXIT CALL *>> " + x.timestamp+" close >> "+x.close+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ buyCall);
            }
        }else if(isSellSignalGenerated)
        {
            if(obj.rsi > 40 || x.close > obj.sma)
            {
                isSellSignalGenerated = false;
                profit = sellprice - x.close;
                totalProfit += profit;
                console.log("\n\n EXIT SELL *>> " + x.timestamp+" close >> "+x.close+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ sellCall);
            }
        }
        index++;
        return obj;
    });
    console.log(stockData); */
}
var rsi, sma, bb;
function getList(list) {
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var x = list_1[_i];
        //list.map(Object(x) => {
        if (x) {
            var inputRSI = {
                values: [],
                period: 14
            };
            rsi = new technicalindicators.RSI(inputRSI);
            var inputSMA = {
                values: [],
                period: 20
            };
            sma = new technicalindicators.SMA(inputSMA);
            var inputBB = {
                period: 14,
                values: [],
                stdDev: 2
            };
            bb = new technicalindicators.BollingerBands(inputBB);
            var symbol = x.symbol ? x.symbol : x;
            var path = 'data/stock/1day/' + symbol + '.txt';
            fs.access(path, fs.constants.F_OK | fs.constants.R_OK, function (err) {
                if (err) {
                    console.error(path + " " + (err.code === 'ENOENT' ? 'does not exist' : 'is read-only'));
                }
                else {
                    console.log(path + " exists, and it is Readable");
                    fs.readFile(path, 'utf8', function (err, response) {
                        if (err)
                            throw err;
                        if (response != '' && response != undefined && response != null) {
                            var obj = JSON.parse(response);
                            var df = dataForge.fromJSON(JSON.stringify(obj.data)) // Read CSV file (or JSON!)
                                .dropSeries(["cp"]) // Drop certain columns.
                                .where(function (row) { return calculateIndicators(row); }) // Filter rows.
                                .select(function (row) { return transform(row); }); // Transform the data. 
                            var chronoOrder = df.reverse();
                            var output = df.toJSON();
                            log("data >> " + path + " \ n \n " + output);
                            /* const indexedDf = chronoOrder.setIndex("timestamp");
                            const close = indexedDf.getSeries("close");
                            dataFrame.plot().renderImage("my-chart.png"); */
                        }
                    });
                }
            });
        }
    }
}
function mappedFunction() {
}
function transform(row) {
    row.timestamp = new Date(row.timestamp);
    return row;
}
function searchPattern(row) {
    var now = new Date();
    var thisMonth = months[now.getMonth()].slice(0, 3).toUpperCase();
    var syombolPattern = /BANKNIFTY/i;
    var monthPattern = new RegExp(thisMonth, 'gi');
    var isWeeklyExpiry = true;
    var arr = row.split(",");
    var isMatchingSymbol = String(arr[3]).search(syombolPattern);
    if (isMatchingSymbol >= 0) {
        var isMatchFound = false;
        var isMatchingMonth = String(arr[3]).search(monthPattern);
        var isFuture = String(arr[3]).search("FUT");
        for (var i = 0; i < 7; i++) {
            if (days[now.getDay()] == "Thursday" || days[now.getDay()] == "Wednesday") {
                var fullyear = now.getFullYear();
                var month = now.getMonth() + 1;
                var day = now.getDate();
                day = String(day).length < 2 ? "0" + now.getDate() : now.getDate();
                var symbol = "BANKNIFTY" + String(fullyear).slice(2, 4) + month + day; //18121328400CE
                var currentPrice = Math.round(arr[2] / 100) * 100;
                var pricePattern = new RegExp(String(currentPrice), 'gi');
                var isMatchingPrice = String(arr[3]).search(pricePattern);
                var isMatchingWeek = String(arr[3]).search(symbol);
                if (isMatchingWeek >= 0 && isMatchingPrice >= 0) {
                    var isCE = String(arr[3]).search("CE");
                    var isPE = String(arr[3]).search("PE");
                    console.log("\n MATCH " + isCE + " > " + isPE + " > " + arr[3]);
                    if (isCE > 0)
                        bankNiftyCall.CE = arr[3];
                    else if (isPE > 0)
                        bankNiftyCall.PE = arr[3];
                    isMatchFound = true;
                }
            }
            now.setDate(now.getDate() + 1);
        }
        if (!isMatchFound) {
            if (isMatchingMonth >= 0 && isFuture >= 0) {
                //console.log("\n MATCH " + isMatchingWeek +" > "+ symbol +" > "+arr[3]);
                bankNiftyCall.FUTURE = arr[3];
                return row;
            }
            else {
                return 0;
            }
        }
        else {
            return row;
        }
    }
    else {
        return 0;
    }
}
function calculateIndicators(row) {
    row.rsi = rsi.nextValue(Number(row.close));
    row.sma = sma.nextValue(Number(row.close));
    row.bb = bb.nextValue(Number(row.close));
    return row;
}
function log(message) {
    if (process.env.NODE_ENV == "production")
        return;
    date = new Date();
    today = date.getDate() + "-" + (date.getMonth() + 1) + "-" + date.getFullYear();
    var path = "logs/log-" + today + ".txt";
    try {
        if (fs.existsSync(path)) {
            fs.appendFile(path, "\n" + date + " " + message, function (err) {
                if (err)
                    throw err;
            });
        }
        else {
            fs.writeFile(path, "\n" + date + " " + message, function (err) {
                if (err)
                    throw err;
            });
        }
    }
    catch (err) {
        console.error(err);
        fs.writeFile(path, "\n" + date + " " + message, function (err) {
            if (err)
                throw err;
        });
    }
}
function addIndicators(response, path) {
    var stockData = response.data;
    //stockData=  //stockData.map(x => 
    for (var _i = 0, stockData_1 = stockData; _i < stockData_1.length; _i++) {
        var x = stockData_1[_i];
        var obj = x;
        obj.timestamp = new Date(obj.timestamp);
        return obj;
    }
    var closeData = []; // stockData.map(x => x.close);  
    for (var _a = 0, stockData_2 = stockData; _a < stockData_2.length; _a++) {
        var x = stockData_2[_a];
        closeData.push(x.close);
    }
    var inputRSI = {
        values: closeData,
        period: 14
    };
    var rsiData = technicalindicators.RSI.calculate(inputRSI);
    var inputSMA = {
        values: closeData,
        period: 20
    };
    var smaData = technicalindicators.SMA.calculate(inputSMA);
    var BB = technicalindicators.BollingerBands;
    var period = 14;
    var inputBB = {
        period: period,
        values: closeData,
        stdDev: 2
    };
    var bbData = BB.calculate(inputBB);
    //console.log("\n \n BB >> " + JSON.stringify(bbData));
    var index = 0;
    var buyprice = 0;
    var sellprice = 0;
    var profit = 0;
    var totalProfit = 0;
    var isBuySignalGenerated = false;
    var isSellSignalGenerated = false;
    var buyCall = 0;
    var sellCall = 0;
    for (var _b = 0, stockData_3 = stockData; _b < stockData_3.length; _b++) {
        var x = stockData_3[_b];
        //stockData= stockData.map(x =>{
        var obj = x;
        obj.rsi = index > inputRSI.period ? rsiData[index - inputRSI.period] : 0;
        obj.sma = index >= inputSMA.period ? smaData[index - inputSMA.period] : 0;
        obj.bb = index >= inputBB.period ? bbData[index - inputBB.period] : null;
        index++;
        //console.log("\nobj > " + JSON.stringify(obj));
        return obj;
    }
    backTesting(stockData, path);
    //log(stockData);
}
var bankNiftyCall;
function checkBankNiftyExpiry() {
    bankNiftyCall = new Object();
    fs.readFile('data/index/nse_fo.txt', function (err, response) {
        var data = JSON.parse(response).data;
        var transformedData = new dataForge.DataFrame(data)
            .where(function (row) { return searchPattern(row); }) // Filter rows.
            .toArray(); // Back to normal JavaScript data!.
        console.log("WATCH BANK NIFTY  ****** " + JSON.stringify(bankNiftyCall));
        log(" \n \n BANK NIFTY >> data >>" + transformedData);
    });
}
var Upstox = require("upstox");
var api = "cIs71szuLZ7WFKInU8O0o7GTHm5QIJke8ahnzLVw";
var upstox = new Upstox(api);
var fs = require('fs');
var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var code = '';
var __dirname = "views";
var exchanges = ['MCX_FO', 'BSE_EQ', 'NSE_EQ', 'NSE_FO', 'NCD_FO'];
var login_code = "ce728b73424e719680aa66a51ba4eb469f9875f2";
var api_secret = "xs5ibb0pk0";
var client_id = "";
var watchList = ['banknifty', 'hindalco', 'ICICIBANK', 'sbin', 'idea', 'lt', 'HAVELLS'];
var accessToken;
function getAcceToken(code) {
    var params = {
        "apiSecret": api_secret,
        "code": code,
        "grant_type": "authorization_code",
        "redirect_uri": redirect_uri
    };
    upstox.getAccessToken(params)
        .then(function (response) {
        params = api_secret = code = null;
        accessToken = response.access_token;
        store.set('accessToken', accessToken);
        log("****accessToken*\n" + accessToken);
        upstox.setToken(accessToken);
        //accessToken = null;
        start();
        //res.sendFile("index.html", {"root": __dirname});
    })
        .catch(function (err) {
        log("getAccessToken > " + err);
    });
}
function start() {
    getProfile();
    var bankNiftyCall;
    upstox.getMasterContract({ exchange: "nse_fo" })
        .then(function (response) {
        //console.log("NSE FO " + JSON.stringify(response));
        bankNiftyCall = new Object();
        //  var response = JSON.parse(response);
        //console.log('\n 1.1' + response);
        var data = csvTojs(response.data);
        //console.log("NSE FO " + JSON.stringify(data));
        var now = new Date();
        var thisMonth = months[now.getMonth()].slice(0, 3).toUpperCase();
        var monthPattern = new RegExp(thisMonth, 'gi');
        var transformedData = JSON.parse(JSON.stringify(transformedData));
        //console.log(' >  ' + transformedData);
        var dataFrame = dataForge.fromJSON(transformedData)
            .where(function (row) {
            //console.log('\n row > ' + JSON.stringify(row));
            row = JSON.stringify(row);
            // console.log('\n row > ' + JSON.stringify(row));
            // console.log('\n symbol > ' + row.symbol);
            var isMatchingMonth = String(row.symbol).search(monthPattern);
            var isFuture = String(row.symbol).search("FUT");
            if (isMatchingMonth >= 0 && isFuture >= 0) {
                console.log("\n \n MATCH  >> > " + row.symbol);
                bankNiftyCall.FUTURE = row.symbol;
                return row;
            }
        });
        log("FNO data >> \n \n" + transformedData);
        fs.writeFile("data/index/nse_fo.txt", JSON.stringify(response), function (err) {
            if (err)
                throw err;
            console.log('nse_fo File is created successfully.');
        });
        checkBankNiftyExpiry();
    })
        .catch(function (err) {
        console.log("nse fo error " + JSON.stringify(err));
    });
    // Get Master Contract
    upstox.getMasterContract({ exchange: "NSE_INDEX", format: "json" })
        .then(function (response) {
        fs.writeFile("data/index/index.txt", JSON.stringify(response), function (err) {
            if (err)
                throw err;
            log('index File is created successfully.');
        });
    })
        .catch(function (err) {
        log(err);
    });
    // PlaceOrder Note : default product = I i.e intra day order will be placed.
    /*var orderObject = {
        transaction_type:"b",
        exchange:"NSE_EQ",
        symbol: "RELIANCE",
        quantity: 1,
        order_type:"m"
    };

    upstox.placeOrder(orderObject)
        .then(function(response) {
            // Order details received
            console.log(response);
        })
        .catch(function(err) {
            // Something went wrong.
            console.log(err);
        });
    */
    upstox.connectSocket()
        .then(function () {
        upstox.on("orderUpdate", function (message) {
            log("orderUpdate" + message);
        });
        upstox.on("positionUpdate", function (message) {
            //message for position conversion
            log("positionUpdate" + message);
        });
        upstox.on("tradeUpdate", function (message) {
            //message for trade updates
            log("tradeUpdate" + message);
        });
        //console.log("niftyList" + niftyList);
        var niftyStr = niftyList.join();
        //console.log("join" + niftyStr);
        upstox.subscribeFeed({
            "exchange": "nse_eq",
            "symbol": niftyStr,
            "type": "ltp"
        })
            .then(function (response) {
            console.log('feedsymbols subscribeFeed response ', response);
        })
            .catch(function (error) {
            //res.send({ error: error });
            console.log('Error in subscribe feed ', error);
        });
        upstox.on("liveFeed", function (message) {
            //message for live feed
            log("liveFeed" + message);
        });
        upstox.on("disconnected", function (message) {
            //listener after socket connection is disconnected
            log("disconnected > " + message);
        });
        upstox.on("error", function (error) {
            //error listener
            log("error" + error);
        });
    }).catch(function (error) {
        log("connectSocket #" + error);
    });
}
var nseSymbolList = [];
function getListOfAllSymbol() {
    upstox.getMasterContract({ exchange: "nse_eq", format: "json" })
        .then(function (response) {
        var list = response.data;
        nseSymbolList = list.map(function (x) { return x.symbol; });
        store.set('nseSymbolList', nseSymbolList);
        getAllData();
    })
        .catch(function (err) {
        log("Error getListOfAllSymbol > " + JSON.stringify(err));
        getAllData();
    });
}
// Get Balance
var balance;
function getBalance() {
    upstox.getBalance({ type: "security" }) // type can be security or commodity
        .then(function (response) {
        balance = JSON.stringify(response);
        /* log("****************** Balance ******************\n");
        fs.writeFile("data/balance/"+client_id+'-balance.txt', JSON.stringify(response), function (err:any) {
        if (err) throw err;
            log('balance is created successfully.');
        });   */
        getListOfAllSymbol();
    })
        .catch(function (err) {
        log(err);
        getListOfAllSymbol();
    });
}
var profile;
function getProfile() {
    upstox.getProfile()
        .then(function (response) {
        client_id = response.data.client_id;
        profile = JSON.stringify(response.data);
        getBalance();
        /* fs.writeFile("data/profile/"+client_id+'.txt', JSON.stringify(response), function (err:any) {
        if (err) throw err;
            log('client_id is created successfully.');
        });

        /*  var watchList = ['dlf','hindalco','ICICIBANK','sbin','yesbank','reliance','idea','WIPRO','lt','HAVELLS']
        watchList.map(async (obj) => {
            loadAllSymbolData(obj,'1DAY','1-1-2005');
        });
         */
    })
        .catch(function (error) {
        log("Error" + error);
    });
}
function getMaster(ex) {
    if (ex === void 0) { ex = "nse_fo"; }
    if (accessToken) {
        return upstox.getMasterContract({ exchange: ex });
    }
}
function loadSymbol(symbol, exchange, interval, start_date) {
    if (interval === void 0) { interval = '1day'; }
    if (start_date === void 0) { start_date = '12-12-2018'; }
    log("loadSymbol > " + symbol + " > " + interval + " > " + exchange + " > " + start_date);
    if (accessToken) {
        return upstox.getOHLC({ "exchange": exchange,
            "symbol": symbol,
            "start_date": start_date,
            "format": "json",
            "interval": interval
        });
    }
}
function getAllData() {
    // syncStockData();
}
function syncStockData() {
    delay(10).then(function () { return load5minData(); });
    delay(10000).then(function () { return load10minData(); });
    delay(20000).then(function () { return load30minData(); });
    delay(30000).then(function () { return load60minData(); });
    delay(60000).then(function () { return load1dayData(); });
}
var delay = function (t) { return new Promise(function (resolve) { return setTimeout(resolve, t); }); };
var stockData = [];
var data = {};
var promiseArr = [];
function loadAllSymbolData(response, interval, start_date) {
    if (interval === void 0) { interval = '1DAY'; }
    if (start_date === void 0) { start_date = '11-11-2018'; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            console.log('* Step 1 : loadSymbol ');
            promiseArr = [];
            return [2 /*return*/, Promise.all(response.map(function (symbol) {
                    return loadSymbol(symbol, 'nse_eq', interval, start_date).then(function (response) {
                        stockData = response.data;
                        console.log('**** loadSymbol response  > ' + symbol + ":: " + stockData);
                        var inputRSI = {
                            values: [],
                            period: 14
                        };
                        rsi = new technicalindicators.RSI(inputRSI);
                        var inputSMA = {
                            values: [],
                            period: 20
                        };
                        sma = new technicalindicators.SMA(inputSMA);
                        var inputBB = {
                            period: 14,
                            values: [],
                            stdDev: 2
                        };
                        bb = new technicalindicators.BollingerBands(inputBB);
                        inputBB = inputRSI = inputSMA = null;
                        console.log('**** 1   > ');
                        stockData.map(function (row) {
                            console.log('**** 2   > ');
                            var india = moment.tz(new Date(row.timestamp), "Asia/Kolkata");
                            india.format();
                            if (india.minute() > 0)
                                row.timestamp = india.date() + "/" + (india.month() + 1) + "/" + india.year() + " " + india.hour() + ":" + india.minute();
                            else
                                row.timestamp = india.date() + "/" + (india.month() + 1) + "/" + india.year();
                            row.rsi = rsi.nextValue(Number(row.close));
                            row.sma = sma.nextValue(Number(row.close));
                            row.bb = bb.nextValue(Number(row.close));
                            //row.change = getPercentageChange(Number(lastObject.close),Number(row.close)); 
                            //console.log('**** 3   > ');
                            if (row.bb && Number(row.close) >= Number(row.bb.upper)) // && lastObject && Number(lastObject.close) < Number(lastObject.bb.upper))
                             {
                                row.bb.isCrossed = 'Crossed Above';
                            }
                            else if (row.bb && Number(row.close) <= Number(row.bb.lower)) // && lastObject && Number(lastObject.close) > Number(lastObject.bb.lower))
                             {
                                row.bb.isCrossed = 'Crossed Below';
                            }
                            //lastObject = row;
                            console.log('**** 4   > ');
                            return row;
                        });
                        //console.log('**** 5   > ');
                        stockData.reverse();
                        data = {
                            "symbol": symbol,
                            "close": stockData[0].close,
                            "volume": stockData[0].volume,
                            "rsi": stockData[0].rsi,
                            "timestamp": stockData[0].timestamp,
                            "sma": stockData[0].sma,
                            "bb": stockData[0].bb,
                            "change": stockData[0].change
                        };
                        console.log("\n data   > " + JSON.stringify(data));
                        stockData = null;
                        promiseArr.push(data);
                        return data;
                    });
                }))];
        });
    });
}
// Start from https://gist.github.com/iwek/7154578#file-csv-to-json-js
// and fix the issue with double quoted values
function csvTojs(csv) {
    var lines = csv; //.split(",");
    var result = [];
    var headers = lines[0].split(",");
    for (var i = 1; i < lines.length; i++) {
        var obj = {};
        var row = lines[i], queryIdx = 0, startValueIdx = 0, idx = 0;
        if (row.trim() === '') {
            continue;
        }
        while (idx < row.length) {
            /* if we meet a double quote we skip until the next one */
            var c = row[idx];
            if (c === '"') {
                do {
                    c = row[++idx];
                } while (c !== '"' && idx < row.length - 1);
            }
            if (c === ',' || /* handle end of line with no comma */ idx === row.length - 1) {
                /* we've got a value */
                var value = row.substr(startValueIdx, idx - startValueIdx).trim();
                /* skip first double quote */
                if (value[0] === '"') {
                    value = value.substr(1);
                }
                /* skip last comma */
                if (value[value.length - 1] === ',') {
                    value = value.substr(0, value.length - 1);
                }
                /* skip last double quote */
                if (value[value.length - 1] === '"') {
                    value = value.substr(0, value.length - 1);
                }
                var key = headers[queryIdx++];
                obj[key] = value;
                startValueIdx = idx + 1;
            }
            ++idx;
        }
        result.push(obj);
    }
    return result;
}
function getPercentageChange(oldNumber, newNumber) {
    var decreaseValue = newNumber - oldNumber;
    return ((decreaseValue / oldNumber) * 100).toFixed(2);
}
