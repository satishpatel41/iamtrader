//require('./Utility.js');
/* require('./MailServer.js');
require('db.js');
require('Strategy.js');
require('UpstoxAPI.js');
require('server.js');
require('Scheduler.js');
 */

var chalk = require('chalk');
const sqlite3 = require('sqlite3').verbose();
let db = new sqlite3.Database('db/upstox.db', (err) => {
if (err) {
    return console.error(err.message);
}
console.log(chalk.green('Connected to the in-memory SQlite database.'));
});

function closeDb(){
    db.close();
}

function insertDB(query,param){
    return new Promise(function(resolve, reject) {
        db.run(query, param,function(err){
            if(err)
                console.log(chalk.red("Insert error > " + err));
            else{
                console.log(chalk.blue("Successfully inserted"));
                resolve("success");
            }               
        });
    })        
}

async function getFirst(query,params){
    return new Promise(function(resolve, reject) {
        db.get(query, params, function(err, row){  
        if(err) reject("Read error: " + err.message);
        else {
            resolve(row);
        }
        })    
    })    
}

'use strict';
const nodemailer = require('nodemailer');

var transporter = nodemailer.createTransport({
service: 'gmail',
auth: {
    user: 'satish.patel41@gmail.com',
    pass: 'Pratiksha@123'
}
});

// setup email data with unicode symbols
let mailOptions = {
    from: '"Admin" <satish.patel41@gmail.com>', // sender address
    to: 'satish.patel41@yahoo.com', // list of receivers
    subject: 'Call Generated', // Subject line
    text: 'Alert for', // plain text body
    html: '<p><b>Hello</b> Alert triggered on Wed Nov 7, 6:00 pm</p>' +
        '<p>Here\'s a nyan cat for you as an embedded attachment:<br/><img src="cid:nyan@example.com"/></p>',

    // An array of attachments
    attachments: [
    // String attachment
    {
        filename: 'notes.txt',
        content: 'Some notes about this e-mail',
        contentType: 'text/plain' // optional, would be detected from the filename
    }
    ],

    list: {
        // List-Help: <mailto:admin@example.com?subject=help>
        help: 'admin@example.com?subject=help',
        // List-Unsubscribe: <http://example.com> (Comment)
        unsubscribe: [
            {
                url: 'http://example.com/unsubscribe',
                comment: 'A short note about this url'
            },
            'unsubscribe@example.com'
        ],
        // List-ID: "comment" <example.com>
        id: {
            url: 'mylist.example.com',
            comment: 'This is my awesome list'
        }
    }
};

function sendingMail(){
    // send mail with defined transport object
    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: %s', info.messageId);
        console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
    });
}
const SMA = require('technicalindicators').SMA;
const EMA = require('technicalindicators').EMA;
const RSI = require('technicalindicators').RSI;
const BB = require('technicalindicators').BollingerBands;
const ADL = require('technicalindicators').ADL;
const ADX = require('technicalindicators').ADX;
const ATR = require('technicalindicators').ATR
const MACD = require('technicalindicators').MACD;
var bullish = require('technicalindicators').bullish;

async function getIndicator(symbol,stockData,strategyList,isBackTesting){
    var closes = [];
    var opens = [];
    var highs = [];
    var lows = [];
    var timestamps = [];
    var values = stockData.map(async (obj) =>  {
        closes.push(Number(obj.close));       
        opens.push(Number(obj.open));       
        highs.push(Number(obj.high));       
        lows.push(Number(obj.low));       
        timestamps.push(Number(obj.timestamp));       
    });  

    timestamps = timestamps.reverse();//**********  dont't change **********  
    Promise.all(strategyList.map(async (strategyObj) => {  
        return new Promise(function(resolved, rejected) {
        var result = [];
        var output = new Array();
        Promise.all(strategyObj.indicators.map(async (indicatorObj) => {
            return new Promise(function(resolve, reject) {
                try{
                    if(indicatorObj.indicator && indicatorObj.indicator != ""){
                        if(indicatorObj.values == "closes")
                            indicatorObj.values = eval(indicatorObj.values);
                        else
                            indicatorObj.values = closes;
                        
                        //console.log("*getIndicator " +symbol +" > " +closes[0] +" ::"+ indicatorObj.values[0]);
                        var str = indicatorObj.indicator+".calculate("+JSON.stringify(indicatorObj)+")";
                        var res = eval(str); 
                        //console.log("*getIndicator " +res); 
                        var op = isBackTesting ? res.reverse():res.reverse().slice(0, 3);  //**********  dont't change **********  
                        output.push(op);     
                     // console.log("*indicators " +symbol +" > " +closes[0] +">> "+JSON.stringify(output));
                        indicatorObj = null;
                        resolve(output);   
                    }     
                    else{
                        resolve("");   
                    }                
                }
                catch(e){
                    reject(e);
                }
            });        
        }))
        .then(obj => { 
            if(isBackTesting)
            {      
                closes = closes.reverse(); //**********  dont't change **********  
                var strategyRes = [];
                for(var i=0;i < output[0].length;i++)
                {
                    result.push(eval(strategyObj.strategy));   
                    var india = moment.tz(new Date(Number(timestamps[i])), "Asia/Kolkata");
                    india.format(); 
                    var d = india.date() +"/"+(india.month() + 1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.timestamp);
                    strategyRes.push(result.every(x => x == true));  
                    console.log("\n" + symbol +" > " +strategyObj.strategy +" :: "+ d +"  > "+closes[i] +"::"+output[0][i]);  // +"::"+  strategyRes +" > "+ result)
                }
                closes = closes.reverse(); //**********  dont't change **********  
                output = result = null;
                console.log("*****strategyRes " +strategyRes);
                return resolved(strategyRes);    
            }
            else{
                //console.log("***** " +strategyObj.strategy);
                closes = closes.reverse(); //**********  dont't change **********  
                highs = highs.reverse(); //**********  dont't change **********  
                lows = lows.reverse(); //**********  dont't change **********  
                opens = opens.reverse(); //**********  dont't change **********  

                var strategy = eval(strategyObj.strategy);
                result.push(strategy);   
                //console.log("*" +symbol +" > " + result +":: "+ eval((closes[0] - opens[0])/highs[0] - lows[0]));
                closes = closes.reverse(); //**********  dont't change **********  
                highs = highs.reverse(); //**********  dont't change **********  
                lows = lows.reverse(); //**********  dont't change **********  
                opens = opens.reverse(); //**********  dont't change **********  
                var d =new Date(Number(timestamps[0])); 
                var strategyRes = result.every(x => x == true);  
                //console.log(symbol +" > " + d +"  > "+  strategyRes +" > "+ result);  
                output = result = null;
                return resolved(strategyRes);       
            }          
        })
        .catch(err => {
            rejected(err);
            console.log("INNER LOOP : " + err)
        });
    })
    })).then(finalResult => { 
        var finalResultFlag = finalResult.every(x => x == true);
        if(finalResultFlag)
          console.log("Strategy RESULT  > " + strategyObj +" :: "+symbol +" > " +finalResultFlag +" >> "+finalResult);

        closes =  opens =  highs = lows = timestamps = finalResult=  strategyObj = null;
    }).catch(error => 
    {
        console.log("OUTER LOOP ERROR > " + error)
    });
 }

 Array.prototype.insert = function(i,...rest){
    return this.slice(0,i).concat(rest,this.slice(i));
  }
var cron = require('node-cron');
var chalk = require('chalk');
var list;
var moment = require('moment-timezone');

cron.schedule('*/5 * * * *', () => {
   //load5minData();
    console.log(chalk.blue('running a task every 5 minutes'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/10 * * * *', () => {
    //load10minData();
    console.log(chalk.blue('running a task every 10 minutes'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('*/15 * * * *', () => {
    load15minData();
    console.log(chalk.blue('running a task every 15 minutes'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});


cron.schedule('*/30 * * * *', () => {
   // load30minData();
    console.log(chalk.blue('running a task every 30 minutes'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('0 */1 * * *', () => {
    load60minData();
    console.log(chalk.blue('running a task every 1 hour'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('59 23 * * *', () => {
    store.unlink();
    console.log(chalk.yellow('Clean cache data'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('0 17 * * *', () => {
    load1dayData();
    console.log(chalk.blue('running a task every 1 day'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});

cron.schedule('0 17 * * *', () => {
    load1WeekData();
    console.log(chalk.blue('running a task every 1 day'));
}, {
scheduled: true,
timezone: "Asia/Kolkata"
});



function load1WeekData()
{
    var list = niftyList;
    var now = new Date();
    var end_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();
    now.setDate(now.getDate() - 5 * 200);
    var start_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();
    var interval = '1WEEK';
    if(store.get('accessToken')){    
        syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date); 
    }   
}

function load1dayData()
{
    var list = niftyList;
    var now = new Date();
    var end_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();
    now.setDate(now.getDate() - 200);
    var start_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();
    var interval = '1DAY';
    if(store.get('accessToken')){    
        syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date); 
    }   
}

var now = new Date();
var india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
india.format(); 
            
var start_date = "";//india.date()+"-"+(india.month())+"-"+india.year();
now.setDate(now.getDate() - 15);
india = moment.tz(now, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
india.format(); 
var end_date = "";//india.date()+"-"+(india.month())+"-"+india.year();

function load60minData()
{
    var interval = '60MINUTE';
    if(store.get('accessToken')){   
        syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date); 
    }   
}

function load30minData()
{ 
    var interval = '30MINUTE';
    if(store.get('accessToken')){    
        syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date); 
   }    
}

function load10minData()
{
     var interval = '10MINUTE';   
    if(store.get('accessToken')){    
      syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date); 
    }    
}

function load5minData()
{
     var interval = '5MINUTE';
    if(store.get('accessToken')){
        syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date); 
    }    
}

function load3minData()
{  
    var interval = '3MINUTE';
    if(store.get('accessToken')){
       syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date);       
    }    
}

function load15minData()
{   
    var interval = '15MINUTE';
    if(store.get('accessToken')){
        syncLiveAllStockData(store.get('fnoList'),interval,start_date,end_date);     
    }    
}
var express = require('express');
var compression = require('compression')
var moment = require('moment-timezone');
var bodyParser = require('body-parser');
var chalk = require('chalk');
var fs = require('fs');
var url = require('url');
var cluster = require('cluster');
const dataForge = require('data-forge');
var session = require('express-session');
var FileStore = require('session-file-store')(session);
var Store = require('data-store');
var async = require('async');
const querystring = require('querystring');
var store = new Store({ path: 'config.json' });
require('data-forge-fs');
var Upstox = require("upstox");
var api = "OknufM07tm1g9EfN4fHKP2Eqi9DSw40I2Y3xliHg";
var upstox = new Upstox(api);
const PORT = process.env.PORT || 3000;
var redirect_uri = "http://localhost:"+PORT;
var nifty = "https://www.nseindia.com/content/indices/ind_nifty50list.csv";
var fno = "https://www.nseindia.com/content/fo/fo_mktlots.csv";
if(process.env.NODE_ENV=="production")
{
    api = "OknufM07tm1g9EfN4fHKP2Eqi9DSw40I2Y3xliHg";
    redirect_uri = "https://robo-trader.herokuapp.com/";
}

var numReqs = 0; 
if (cluster.isMaster) {
  // Fork workers.
  let cpus = 1;//require('os').cpus().length;
  console.log(chalk.green("cpus "  +cpus));
  for (var i = 0; i < cpus; i++) {
    var worker = cluster.fork();
 
    worker.on('message', function(msg) {
     /*  if (msg.cmd && msg.cmd == 'notifyRequest') {
        numReqs++;
      } */
    });
  }
 
  cluster.on('death', function(worker) {
    console.log(chalk.red('worker ' + worker.pid + ' died'));
  });
} else {
        var app = express();
        app.use(express.static('public'));
        // compress all responses
        app.use(compression());
        app.use(bodyParser.json()); // support json encoded bodies
        app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies
        app.use(session(
            {
                store: new FileStore({

                    path: './session-store'
            
                }),
                name: '_fs_cookie', // cookie will show up as foo site
                resave: false,
                saveUninitialized: false,
                secret: "00777",
                cookie: {
                    maxAge: 1000 * 60 * 60 * 1//24
                }
            }    
        ));
    
        app.use(function(req, res, next) {
            res.header("Access-Control-Allow-Origin", "*");
            res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
            next();
        });

        var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
        var date = new Date();
        var today = date.getDate() +"-"+(date.getMonth() + 1) +"-"+date.getFullYear();
        var time = date +":"+date.getHours() +":"+date.getMinutes();   
        
        var fnoArr=  dataForge.readFileSync("data/list/fo_mktlots.csv")
        .parseCSV()
        .toArray();

        var fnoList = [];
        fnoArr.forEach(function(item) {   
            if(item.SYMBOL)
                fnoList.push(item.SYMBOL)
        });
        store.set('fnoList',fnoList);

        var niftyList =  dataForge.readFileSync("data/list/ind_nifty50list.csv")
        .parseCSV()
        .toArray();

        niftyList = niftyList.map(x => x.Symbol);
        store.set('niftyList',niftyList);
       
        app.get('/', function (req, res) {
            var q = url.parse(req.url, true).query;
            code = q.code;

            console.log(chalk.green("session > " + JSON.stringify(req.session.cookie)));

            //checkBankNiftyExpiry();

            if(code)
            {
                getAcceToken(code);        
                res.sendFile("index.html", {"root": __dirname});
            }
            else{
                res.sendFile("index.html", {"root": __dirname});
            }
            q = null;
    });

    app.get('/welcome', checkSignIn,function (req, res) {
        res.send('<b>Hello</b> welcome to my http server made with express');
    });

    app.get('/login', function (req, res) {
        res.sendFile("login.html", {"root": __dirname});
    });

    app.get('/logout', function(req, res){
         req.session.destroy(function(){
            console.log(chalk.blue("user logged out."));
        });
        res.redirect('/login');
    });

    function checkSignIn(req, res,next){
        if(req.session.user){
            next();     //If session exists, proceed to page
        } else {
            //var err = new Error("Not logged in!");
            console.log(chalk.blue(JSON.stringify(req.session) +" session \n"+  req.session.user));
            res.sendFile("login.html", {"root": __dirname});
        }       
    }

    app.post('/login', function (req, res) {
    var email = req.body.username;
    var psw = req.body.password;

    if(email){
        var query = "select * from User where email=? and password=?";
        var param = [email,psw];
        getFirst(query,param).then(user => {
                console.log("result > " + JSON.stringify(user));
                if(user == undefined)
                {
                    res.send("error")
                }
                else{
                    console.log(chalk.green("Login token > " + store.get('accessToken')));
                    /* if(store.get('accessToken') && store.get('accessToken') != '')
                    { */
                        req.session.user = user;
                        res.send(user);
                   /*  }
                    else{
                        var loginUrl = upstox.getLoginUri(redirect_uri);
                        res.status(200).header('Content-type', 'text/html');
                        //code = req.params.code;
                        //res.status(302).setHeader('Location', loginUrl);
                        //res.end();
                    } */
                }
            });     
    }
    else
        res.sendFile("login.html", {"root": __dirname});
    });

    app.get('/signup', function (req, res) {
        res.sendFile("signup.html", {"root": __dirname});
    });

    app.post('/signup', function (req, res) {
        var email = req.body.email;
        var psw = req.body.psw;
        var mobile = req.body.mobile;
        var name = req.body.name;
        var pswRepeat = req.body.pswRepeat;

        if(email)
        {
            var query = "select * from User where email=?";
            var param = [email];
            var isMatchEmail = false;
            getFirst(query,param).then(user => {
                    console.log("result > " + JSON.stringify(user));
                    if(user == undefined)
                    {
                        //Do nothing
                    }
                    else{
                        res.send("error");
                        isMatchEmail = true;
                    }
                });

                var query = "INSERT INTO User (name,mobile,email,password)VALUES(?,?,?,?)";
                var param = [name,mobile,email,psw];
                console.log(query +"> "+ param);
                
                if(!isMatchEmail){  
                    insertDB(query,param).then(responses => {
                        console.log("result > " + JSON.stringify(responses));

                        if(responses == 'success')
                        {
                            res.send('success');
                        }
                        else{
                            res.send("error");
                        }
                    });
            }    
            //res.send('<b>username </b>  : ' + email +" > "+ mobile+" > "+ name+" > "+ psw);
        }
        else
            res.sendFile("signup.html", {"root": __dirname});
    });

    app.get('/contactus', checkSignIn,function (req, res) {
        res.sendFile("contactus.html", {"root": __dirname});
    });

    app.get('/index', checkSignIn,function (req, res) {
        res.sendFile("index.html", {"root": __dirname});
    });

    app.get('/scan', checkSignIn,function (req, res) {
        res.sendFile("scanner.html", {"root": __dirname});
    });

    app.get('/strategy', checkSignIn,function (req, res) {
        res.sendFile("strategy.html", {"root": __dirname});
    });

    app.get('/gainerloser', checkSignIn,function (req, res) {
        res.sendFile("gainerloser.html", {"root": __dirname});
    });

    var  lastObject = {open:'',close:'',low:'',high:'',volume:'',timestamp:'',rsi:'',sma:'',bb:{upper:'',lower:'',isCrossed:'',middel:'',pb:''}};
    var stockData = [];

    app.post('/createStrategy',checkSignIn, function (req, res) {
        var strategyObj = JSON.parse(req.body.data);

        var uid = strategyObj.uid;
        var name = strategyObj.name;
        var symbol= strategyObj.symbol;
        var exchange = strategyObj.exchange;
        var orderType = strategyObj.orderType;
        var symbolToBuySell  = strategyObj.symbolToBuySell;
        var interval = strategyObj.interval;
        
        var query = "INSERT INTO Strategy (uid,name,symbol,exchange,orderType,symbolToBuySell,interval)VALUES(?,?,?,?,?,?,?)";
        var param = [uid,name,symbol,exchange,orderType,symbolToBuySell,interval];
        
        insertDB(query,param).then(responses => {
          
            if(responses == 'success')
            {
                var query1 = "select sid from Strategy where uid=?";
                var param1 = [uid];

                getFirst(query1,param1).then(obj => {
                    //console.log("result > " + obj.sid);
                    if(obj.sid == undefined)
                    {
                        res.send("error")
                    }
                    else{
                        console.log(obj.sid);
                         var sid = obj.sid;
                        strategyObj.indicators.map(async (obj) => {

                            var indicator= obj.indicator;
                            var settings = obj.settings;
                            var value = obj.value;
                            var op = obj.op;
                            
                            var q = "INSERT INTO Indicators (sid,indicator,settings,value,op)VALUES(?,?,?,?,?)";
                            var p = [sid,indicator,settings,value,op];
                            //console.log(q +"> "+ JSON.stringify(p));

                            insertDB(q,p).then(responses => {
                                console.log("result > " + JSON.stringify(responses));
                            }); 
                        });

                        res.send('success');
                       
                    }
                });  
            }
            else{
                res.send("error");
            }
        });

        var now = new Date();
        if(interval == "5MINUTE") 
                now.setDate(now.getDate() - 2);
        else if(interval == "3MINUTE")
            now.setDate(now.getDate() - 1);
        else if(interval == "15MINUTE")
             now.setDate(now.getDate() - 2);
        else if(interval == "10MINUTE")
                now.setDate(now.getDate() - 3);
        else if(interval == "30MINUTE")
            now.setDate(now.getDate() - 4);
        else if(interval == "60MINUTE")
            now.setDate(now.getDate() - 4);
        else if(interval == "1DAY")
            now.setDate(now.getDate() - 20);
        else if(interval == "1WEEK")
            now.setDate(now.getDate() - 7*20);
        else if(interval == "1MONTH")
            now.setMonth(now.getMonth() - 20);   
        
        var start_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();

        initiateIndicator();
        stockData = [];
        loadSymbol(strategyObj.symbol,strategyObj.exchange,interval,start_date).then(function (response) {
            res.setHeader('Content-Type', 'application/json');
            stockData =response.data;
            
            lastObject = {open:'',close:'',low:'',high:'',volume:'',timestamp:'',rsi:'',sma:'',bb:{upper:'',lower:'',isCrossed:'',middel:'',pb:''}};
            stockData.map(row => {
                var india = moment.tz(new Date(Number(row.timestamp)), "Asia/Kolkata");
                india.format(); 
                row.timestamp = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.timestamp);
                row.rsi = rsi.nextValue(Number(row.close));
                row.sma = sma.nextValue(Number(row.close));
                row.bb = bb.nextValue(Number(row.close)); 
                
                lastObject = row;
                return row;
            });
            stockData.reverse();
            var data = {
                "symbol":strategyObj.symbol,
                "close":stockData[0].close,
                "volume":stockData[0].volume,
                "rsi":stockData[0].rsi,
                "timestamp":stockData[0].timestamp,
                "sma":stockData[0].sma, 
                "bb":stockData[0].bb
            }; 

            var isMatch = false;
            
            for(var i=0;i<strategyObj.indicators.length;i++)
            {
                var op = strategyObj.indicators[i]['op'];
                var a = data[strategyObj.indicators[i]['indicator']];
                var b = strategyObj.indicators[i]['value'];
                var result = false;
                if(op == '<')
                    result = (a < b);
                else if(op == '>')
                    result = (a > b);   
                else if(op == '<=')
                    result = (a <= b);
                else if(op == '>=')
                    result = (a >= b);    
                    else if(op == '==')
                    result = (a == b);        
                
                if(result)
                {
                    isMatch = true;
                }
                console.log("isMatch :> " + isMatch);
            }
            
            if(isMatch){
                    var orderObject = {
                        transaction_type:strategyObj.orderType,
                        exchange:strategyObj.exchange,
                        symbol: strategyObj.symbolToBuySell,
                        quantity: 1,
                        order_type:"m"
                    };
                
                    upstox.placeOrder(orderObject).then(function(response) {
                        // Order details received
                        console.log(response);
                    })
                    .catch(function(err) {
                        // Something went wrong.
                        console.log(chalk.red(err));
                    });
            } 

            console.log("Result " + JSON.stringify(data));
            res.send(JSON.stringify(data));
            stockData = null;
            res.end();
        })
        .catch(function(error){
            console.log("createStrategy error > " +  JSON.stringify(error));
        });

    });

    app.get('/loadSymbol/:symbol/:interval',checkSignIn, function (req, res) { 
        console.log('params: ' + JSON.stringify(req.params));
     
        var symbol = req.params.symbol;  
        var interval = req.params.interval; 

        var now = new Date();
        if(interval == "5MINUTE") // 1WEEK, 1MONTH
            now.setMinutes(now.getMinutes() - 5* 20);
        else if(interval == "3MINUTE")
            now.setMinutes(now.getMinutes() - 3 * 20);
        else if(interval == "10MINUTE")
            now.setMinutes(now.getMinutes() - 10 * 20);
        else if(interval == "15MINUTE")
            now.setMinutes(now.getMinutes() - 15 * 20);    
        else if(interval == "30MINUTE")
            now.setMinutes(now.getMinutes() - 30* 20);
        else if(interval == "60MINUTE")
            now.setMinutes(now.getMinutes() - 60* 20);
        else if(interval == "1DAY")
            now.setDate(now.getDate() - 20);
        else if(interval == "1WEEK")
            now.setDate(now.getDate() - 7*20);
        else if(interval == "1MONTH")
            now.setMonth(now.getMonth() - 20);  
        else 
            now.setDate(now.getDate() - 20);  

        var start_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();
        console.log("start_date > " + interval +" >> "+start_date);
        
        var inputRSI = {
            values : [],
            period : 14
        };
        var rsi = new technicalindicators.RSI(inputRSI);
        var inputSMA = {
            values : [],
            period : 20
        };
        //console.log("rsi");
        var sma= new technicalindicators.SMA(inputSMA);

        var inputBB = {
            period : 14, 
            values : [],
            stdDev : 2 
        }
        //console.log("sma");
        var bb = new technicalindicators.BollingerBands(inputBB);
        inputBB = inputRSI = inputSMA = null;

        stockData = [];
        loadSymbol(symbol,'NSE_EQ',interval,start_date).then(function (response) {
            res.setHeader('Content-Type', 'application/json');
            stockData =response.data;
            //console.log("loadSymbol stockData : " + response);
            lastObject = {open:'',close:'',low:'',high:'',volume:'',timestamp:'',rsi:'',sma:'',bb:{upper:'',lower:'',isCrossed:'',middel:'',pb:''}};
            stockData.map(row => {
                var india = moment.tz(new Date(Number(row.timestamp)), "Asia/Kolkata");
                india.format(); 
               // row.timestamp = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();//new Date(row.timestamp);
                row.rsi = rsi.nextValue(Number(row.close));
                row.sma = sma.nextValue(Number(row.close));
                row.bb = bb.nextValue(Number(row.close)); 
                if(row && row.bb && Number(row.close) >= Number(row.bb.upper))// && Number(lastObject.close) < Number(lastObject.bb.upper))
                {
                    row.bb.isCrossed = 'Crossed Above';
                }
                else if(row && row.bb && Number(row.close) <= Number(row.bb.lower))// && Number(lastObject.close) > Number(lastObject.bb.lower))
                {
                    row.bb.isCrossed = 'Crossed Below';
                }
                
                lastObject = row;
                return row;
            });
            stockData.reverse();
            res.send(JSON.stringify(stockData));
            stockData = null;
            res.end();
        })
        .catch(function(error){
            if(error.code == 401){
                accessToken = '';
                store.set('accessToken', accessToken); 

                var loginUrl = upstox.getLoginUri(redirect_uri);
                res.status(200).header('Content-type', 'text/html');
                code = req.params.code;
                res.status(302).setHeader('Location', loginUrl);
                res.end();
            }
            console.log("/loadSymbol/:symbol/:interval error > " +  JSON.stringify(error));
        });

    });

    function initiateIndicator()
    {
        //console.log("initiateIndicator");
        var inputRSI = {
            values : [],
            period : 14
        };
        rsi = new technicalindicators.RSI(inputRSI);
        var inputSMA = {
            values : [],
            period : 20
        };
        //console.log("rsi");
        sma= new technicalindicators.SMA(inputSMA);

        var inputBB = {
            period : 14, 
            values : [],
            stdDev : 2 
        }
        //console.log("sma");
        bb = new technicalindicators.BollingerBands(inputBB);
        inputBB = inputRSI = inputSMA = null;
    }

    app.get('/getFutureContract/:exchange', checkSignIn,function (req, res) { 
    var exchange = req.params.exchange;  

    //console.log("getMaster exchange > " +  JSON.stringify(exchange));

    fs.readFile('data/index/nse_fo.txt','utf8', function(err, response) {
        
        var obj = JSON.parse(response);
       /*  var now = new Date();
        var thisMonth = months[now.getMonth()].slice(0,3).toUpase();
        var monthPattern = new RegExp(thisMonth, 'gi'); */
            
        var data=csvTojs(obj.data);
        //console.log(data);
        var data = data.filter(x => (String(x.instrument_type) === exchange));
        
        //console.log(data);
        var arr = data.map(x => x.symbol);
        //console.log(arr);

        //console.log(arr);
        res.setHeader('Content-Type', 'application/json');
        res.send(arr);
        res.end();
    });


    /* getMaster(exchange).then(function (response) {

        console.log("getMaster respone > " +  JSON.stringify(response));


        var data = response.filter(function (el) {
            return (el != null && el.close != null && el.close != undefined && el.close != "");
        });

        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(response));
        exchange =  data = null;
        res.end();
    })
    .catch(function(error){
        log("getMaster/ error > " +  JSON.stringify(error));
    }); */

    });

    var result = [];
    var map = new Map();

    app.get('/loadAllSymbolData/:interval/:exchange', checkSignIn,function (req, res) { 
    console.log('params: ' + JSON.stringify(req.params));
     
    var interval = req.params.interval;  
    var exchange = req.params.exchange;  

    var list = [];
    if(exchange == "nifty")
        list =  store.get('niftyList');//niftyList;
    else if(exchange == "fno")
        list = store.get('fnoList');//fnoList;
    else{
        list = store.get('nseSymbolList');
    }

    var stockData = [];
    if(interval == "5MINUTE") 
        stockData =store.get('data5');
    else if(interval == "3MINUTE")
        stockData =store.get('data3');
    else if(interval == "10MINUTE")
        stockData =store.get('data10');
    else if(interval == "15MINUTE")
        stockData =store.get('data15');    
    else if(interval == "30MINUTE")
        stockData =store.get('data30');
    else if(interval == "60MINUTE")
        stockData = store.get('data60');
    else if(interval == "1DAY")
        stockData = store.get('data1day');         
    else if(interval == "1WEEK")
        stockData = store.get('data1week');       
    else if(interval == "1MONTH")
        stockData = store.get('data1month');        

    var data = [];
    if(stockData && stockData != undefined && stockData.length > 0)
    {
        stockData.filter(function (el) {
            return (el != null && el.close != null && el.close != undefined && el.close != "");
        });
    }
        
    //console.log('*stockData interval : ' +interval +">"+ stockData.length);
    if(stockData && stockData.length > 0 && stockData[0])
    {
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(stockData));
        res.end();
    }
    else{ 
        console.log('*No data available '+ interval+' Fetch it.');
        
        var now = new Date();
        if(interval == "5MINUTE")
                now.setDate(now.getDate() - 2);
        else if(interval == "3MINUTE")
                now.setDate(now.getDate() - 2);
        else if(interval == "10MINUTE")
                now.setDate(now.getDate() - 3); 
        else if(interval == "15MINUTE")
                now.setDate(now.getDate() - 3);               
        else if(interval == "30MINUTE")
            now.setDate(now.getDate() - 4);
        else if(interval == "60MINUTE")
            now.setDate(now.getDate() - 4);
        else if(interval == "1DAY")
            now.setDate(now.getDate() - 30);
        else if(interval == "1WEEK")
            now.setDate(now.getDate() - 7*20);
        else if(interval == "1MONTH")
            now.setMonth(now.getMonth() - 20);    
        
        var start_date = now.getDate()+"-"+(now.getMonth() + 1)+"-"+now.getFullYear();
            
        //console.log("start_date :: "+interval +"> "+start_date);
        loadAllSymbolData(list,interval,start_date).then(function (response) {
            console.log("\n loadAllSymbolData **"+JSON.stringify(response));
            var data = [];
           
            if(interval == "5MINUTE")
            {
                store.set('data5', response); 
            }
            else if(interval == "3MINUTE"){
                store.set('data3', response); 
            }
            else if(interval == "10MINUTE"){
                store.set('data10', response); 
            }
            else if(interval == "15MINUTE"){
                store.set('data15', response); 
            }
            else if(interval == "30MINUTE"){
                store.set('data30', response); 
            }
            else if(interval == "60MINUTE"){
                store.set('data60', response); 
            }
            else if(interval == "1DAY"){
                store.set('data1day', response); 
            } 
            else if(interval == "1WEEK"){
                store.set('data1week', response); 
            } 
            else if(interval == "1MONTH"){
                store.set('data1month', response); 
            } 
                    
            res.setHeader('Content-Type', 'application/json');
            res.send(JSON.stringify(response));
            exchange = list = interval = data = null;
            res.end();
        })
        .catch(function(error){
            console.log("loadAllSymbolData/ error > " +  JSON.stringify(error));
        });
    }
    });

    app.get('/getListOfAllSymbol', checkSignIn,function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        
        fnoList =  store.get('fnoList');
        if(fnoList.length > 0)
            res.send(JSON.stringify(fnoList));
        else
            res.send(JSON.stringify(getListOfAllSymbol()));
            
        res.end();
    });

    app.get('/sync',checkSignIn, function (req, res) {   
        syncStockData();
        res.setHeader('Content-Type', 'application/json');
        res.send("Successfully sync data !");
        res.end();
    });

    app.get('/getBalance', function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(balance));
        res.end();
    });

    app.get('/getProfile', function (req, res) {   
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify(profile));
        res.end();
    });

    app.post('/scan', function (req, res) {

    });

    app.get('/admin', checkSignIn,function (req, res) {
        var india = moment.tz(store.get('tokenValidity'),"Asia/Kolkata");
        var d =new Date();
        var now1 = moment.tz(d, 'YYYY-DD-MM HH:mm',"Asia/Kolkata");
        now1.format(); 
        console.log("tokenValidity "  +now1 +":"+india+":"+ india.isBefore(now1));
        if(india.isBefore(now1))
        {
            accessToken = '';
            store.set('accessToken',accessToken)
        }

        if(store.get('accessToken') && store.get('accessToken') != ''){
             accessToken = store.get('accessToken');
             upstox.setToken(accessToken);
             getListOfAllSymbol();
             res.sendFile("index.html", {"root": __dirname});
        }
        else{
            var loginUrl = upstox.getLoginUri(redirect_uri);
            console.log("*loginUri " + loginUrl);
            res.status(200).header('Content-type', 'text/html');
            code = req.params.code;
            res.status(302).setHeader('Location', loginUrl);
            res.end();
        }
    });

    // Change the 404 message modifing the middlewar
    app.use(function(req, res, next) {
        res.status(404).send("Sorry, that route doesn't exist. Have a nice day :)");
    });

    // start the server in the port 3000 !
    app.listen(PORT, function () {
    console.log('App listening on port '+PORT);
    });
}

// Listen for dying workers
cluster.on('exit', function (worker) {

    // Replace the dead worker,
    // we're not sentimental
    console.log('Worker %d died :(', worker.id);
    cluster.fork();

});


var technicalindicators = require('technicalindicators');
var fs = require('fs');
var path = require('path');
var moment = require('moment-timezone');

var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
var date = new Date();
var today = date.getDate() +"-"+(date.getMonth() +  1)+"-"+date.getFullYear();
var time = date +":"+date.getHours() +":"+date.getMinutes();
var days = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
];

var strategyObj = {
    symbol:'BANKNIFTY19JANFUT',
    indicators:[{indicator:'rsi',settings:'14',value:'60',op:'>='}
               ,{indicator:'sma',settings:'20',value:'close',op:'>='}],
    interval:'15min'
};




    

//console.log("data  : " + x + " :: "+JSON.stringify(database.data));

/*  var df =  dataForge.fromJSON(JSON.stringify(obj.data)) // Read CSV file (or JSON!)
//.setIndex("timestamp")
.dropSeries(["cp"]) // Drop certain columns.
.where(row => calculateIndicators(row)) // Filter rows.
.select(row => transform(row)); // Transform the data. 

const chronoOrder = df.reverse();
var output = df.toJSON();

var valuesDf = df.detectValues(); */ 
//console.log(valuesDf.toString());

function backTesting(stockData,path){ 

  /* var result = Enumerable.from(stockData).forEach(function(obj)
  {
      console.log(obj.sma + " > "+ obj.rsi);
      return obj.rsi >= 60;
  }); */

  //var example = Enumerable(stockData).where(function(item){ return item.rsi >= 60; });

  //var result = Enumerable.from(stockData).where(function(obj){return obj.rsi >= 60});
  //var result = Enumerable.from(stockData).select((val, i) => ({ return val.rsi >= 60}));

  var result = stockData.filter(function (item) {
      return item.rsi >= 60;
  });

  var result = result.filter(function (item) {
      return item.close >= item.sma;              
  });

  //console.log("\n \n stockData >> " + path +" >> "+result[0].timestamp);


  /* var stockData =response.data;

  //console.log("\n \n stockData >> " + JSON.stringify(stockData));


  stockData= stockData.map(x => 
  {
      var obj = x;
      obj.timestamp = new Date(obj.timestamp);

      //console.log("\n \n timestamp >> " +  obj.timestamp);
      return obj;
  });  
  var closeData = stockData.map(x => x.close);  
  var inputRSI = {
      values : closeData,
      period : 14
  };
  var rsiData = technicalindicators.RSI.calculate(inputRSI);
  var inputSMA = {
      values : closeData,
      period : 20
  };
  var smaData = technicalindicators.SMA.calculate(inputSMA);
  var BB = technicalindicators.BollingerBands
  var period = 14
  var inputBB = {
      period : period, 
      values : closeData ,
      stdDev : 2 
  }
  var bbData = BB.calculate(inputBB);
  //console.log("\n \n BB >> " + JSON.stringify(bbData));

  var index = 0;
  var buyprice = 0;
  var sellprice = 0;
  var profit = 0;
  var totalProfit = 0;
  var isBuySignalGenerated = false;
  var isSellSignalGenerated = false;
  var buyCall = 0;
  var sellCall = 0;
  
  stockData= stockData.map(x => 
  {
      var obj = x;
      obj.rsi = index > inputRSI.period?rsiData[index - inputRSI.period]:0;
      obj.sma = index >= inputSMA.period?smaData[index - inputSMA.period]:0;
      obj.bb = index >= inputBB.period?bbData[index - inputBB.period]:null;

      var date = new Date(obj.timestamp);;

      //console.log("date " + date);

      if(obj.rsi >= 60 && date.getDay() == date.getDay() && date.getMonth()== date.getMonth())
      {
          log(obj.rsi);
      }
      if(obj.rsi >= 60 && stockData[index - 1].rsi < 60)
      {
          buyCall++;
          buyprice = x.close;
          isBuySignalGenerated = true;
          console.log("\n\n BUY *>> " + x.timestamp +" >> "+ buyprice);
      }
      else if(obj.rsi != 0 && obj.rsi <= 40 && stockData[index - 1].rsi > 40)
      {
          sellCall++;
          sellprice = x.close;
          isSellSignalGenerated = true;
          console.log("\n\n SELL *>> " + x.timestamp +" >> "+ sellprice);
      }
      
      if(isBuySignalGenerated)
      {
          if(obj.rsi < 60 || x.close < obj.sma)
          {
              isBuySignalGenerated = false;  
              profit = x.close - buyprice;
              totalProfit += profit;
              console.log("\n\n EXIT CALL *>> " + x.timestamp+" close >> "+x.close+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ buyCall);
          }
      }else if(isSellSignalGenerated)
      {
          if(obj.rsi > 40 || x.close > obj.sma)
          {
              isSellSignalGenerated = false;  
              profit = sellprice - x.close;
              totalProfit += profit;
              console.log("\n\n EXIT SELL *>> " + x.timestamp+" close >> "+x.close+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ sellCall);
          }
      } 
      index++;
      return obj;
  }); 
  console.log(stockData); */
}


function mappedFunction()
{
 
}

function transform(row)
{
    var timestamp = '';
    if(row.timestamp > 0){
        var d =new Date(Number(row.timestamp));
        var india = moment.tz(d, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
        india.format(); 
        //console.log(india +" : "+ stockData[0].timestamp +" : "+ d);
        /*  if(india.minute() > 0)
            timestamp = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();
        else
            timestamp = india.date() +"/"+(india.month()+1) +"/"+india.year();      */       
    }  

    row.timestamp = india;

  //row.timestamp = new Date(row.timestamp);
  return row;
}

/* function searchPattern(row)
{
    var now = new Date();
    var thisMonth = months[now.getMonth()].slice(0,3).toUpperCase();
    var syombolPattern = /BANKNIFTY/i;
    var monthPattern = new RegExp(thisMonth, 'gi');
    var isWeeklyExpiry = true;
    var arr = row.split(",");
    var isMatchingSymbol  = String(arr[3]).search(syombolPattern);
 
  if(isMatchingSymbol >= 0){      
    var isMatchFound = false;
    var isMatchingMonth  = String(arr[3]).search(monthPattern);
    var isFuture = String(arr[3]).search("FUT");
    for(var i =0 ; i < 7;i++){
        if(days[now.getDay()] == "Thursday" || days[now.getDay()] == "Wednesday")
        {
            var fullyear = now.getFullYear();
            var month = now.getMonth() + 1;
            var day = now.getDate();
            day = String(day).length < 2 ? "0"+now.getDate() : now.getDate();
            var symbol = "BANKNIFTY" + String(fullyear).slice(2,4) +month+day;//18121328400CE
            var currentPrice = Math.round(arr[2] / 100) * 100;
            var pricePattern = new RegExp(String(currentPrice), 'gi');
            var isMatchingPrice  = String(arr[3]).search(pricePattern);
            var isMatchingWeek  = String(arr[3]).search(symbol);

            if(isMatchingWeek >= 0 && isMatchingPrice >=0){
                
                var isCE = String(arr[3]).search("CE");
                var isPE = String(arr[3]).search("PE");

                console.log("\n MATCH " + isCE +" > "+ isPE +" > "+arr[3]);

                if(isCE > 0)
                  bankNiftyCall.CE = arr[3];
                else if(isPE > 0)
                  bankNiftyCall.PE = arr[3];  
                isMatchFound = true;
            }
        }
        now.setDate(now.getDate() + 1);
    }

    if(!isMatchFound){
        if(isMatchingMonth >= 0 && isFuture >=0){
            //console.log("\n MATCH " + isMatchingWeek +" > "+ symbol +" > "+arr[3]);
            bankNiftyCall.FUTURE = arr[3];
            return row;
        }else{
            return 0;
        }
    }else{
        return row;
    }    
  }
  else{
      return 0;
  }
}
 */






var index = 0;
var buyprice = 0;
var sellprice = 0;
var profit = 0;
var totalProfit = 0;
var isBuySignalGenerated = false;
var isSellSignalGenerated = false;
var buyCall = 0;
var sellCall = 0;

function calculateIndicators(row)
{
  row.rsi = rsi.nextValue(Number(row.close));
  row.sma = sma.nextValue(Number(row.close));
  row.bb = bb.nextValue(Number(row.close)); 

var d =new Date(Number(row.timestamp));
var india = moment.tz(d, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
india.format(); 
row.date =india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();

    if(india.hour() == 9 && india.minute() == 25 && row.bb && row.close > row.bb.upper)
    {
        buyCall++;
          buyprice = row.close;
          isBuySignalGenerated = true;
          console.log("\n\n BUY *>> " + row.date  +" >> "+ buyprice);
    }

    if(isBuySignalGenerated)
    {
        if(row.bb && row.close <= row.bb.middle)
        {
            isBuySignalGenerated = false;  
            profit = row.close - buyprice;
            totalProfit += profit;
            console.log("\n\n EXIT CALL *>> " + row.date+" close >> "+row.close+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ buyCall);
        }
    }else if(isSellSignalGenerated)
    {
        if(obj.rsi > 40 || row.close > obj.sma)
        {
            isSellSignalGenerated = false;  
            profit = sellprice - row.close;
            totalProfit += profit;
            console.log("\n\n EXIT SELL *>> " + row.date+" close >> "+row.close+" profit>> "+ profit+" totalProfit >> "+ totalProfit +">>"+ sellCall);
        }
    } 
    index++;
  
  return row;
}

function log(message){

    if(process.env.NODE_ENV=="production")
        return;
        
    date = new Date();
   
    today = date.getDate() +"-"+(date.getMonth() +1)+"-"+date.getFullYear();
  
    var path = "logs/log-"+today+".txt";
    try {
        if (fs.existsSync(path)) {
            fs.appendFile(path, "\n"+date +" "+message, function (err) {
            if (err) throw err;
            }); 
        }else {
            fs.writeFile(path, "\n"+date +" "+message, function (err) {
                if (err) throw err;
            }); 
        }
    }    
    catch(err) {
        console.error(err);
        fs.writeFile(path, "\n"+date +" "+message, function (err) {
            if (err) throw err;
        }); 
    }    
}

function addIndicators(response,path){ 
  var stockData =response.data;
  //stockData=  //stockData.map(x => 

  for (let x of stockData) {
      var obj = x;
      obj.timestamp = new Date(obj.timestamp);
       return obj;
  }

  var closeData =[];// stockData.map(x => x.close);  
  for (let x of stockData) {
    closeData.push(x.close);
  }

  var inputRSI = {
      values : closeData,
      period : 14
  };
 /*  var rsiData = technicalindicators.RSI.calculate(inputRSI);
  var inputSMA = {
      values : closeData,
      period : 20
  };
  var smaData = technicalindicators.SMA.calculate(inputSMA);
  var BB = technicalindicators.BollingerBands;
  var period = 14;
  var inputBB = {
      period : period, 
      values : closeData ,
      stdDev : 2 
  }
  var bbData = BB.calculate(inputBB); */
  //console.log("\n \n BB >> " + JSON.stringify(bbData));

  var index = 0;
  var buyprice = 0;
  var sellprice = 0;
  var profit = 0;
  var totalProfit = 0;
  var isBuySignalGenerated = false;
  var isSellSignalGenerated = false;
  var buyCall = 0;
  var sellCall = 0;
  
  for (let x of stockData) {
  //stockData= stockData.map(x =>{
      var obj = x;
     /*  obj.rsi = index > inputRSI.period?rsiData[index - inputRSI.period]:0;
      obj.sma = index >= inputSMA.period?smaData[index - inputSMA.period]:0;
      obj.bb = index >= inputBB.period?bbData[index - inputBB.period]:null; */

      index++;
      //console.log("\nobj > " + JSON.stringify(obj));
      return obj;
  } 


  backTesting(stockData,path);
  //log(stockData);
}
/* 
var bankNiftyCall;
function checkBankNiftyExpiry()
{
      bankNiftyCall = new Object();

      fs.readFile('data/index/nse_fo.txt', function(err, response) {      
        var  data= JSON.parse(response).data;
        const transformedData = new dataForge.DataFrame(data)
        .where(row => searchPattern(row)) // Filter rows.
        .toArray();                        // Back to normal JavaScript data!.
   
       console.log("WATCH BANK NIFTY  ****** " + JSON.stringify(bankNiftyCall)); 
       console.log(" \n \n BANK NIFTY >> data >>" + transformedData);
    });
} */
var fs = require('fs');
var path = require('path');
var loki  = require( 'lokijs' );
var intervalsArr = ['1MONTH','1WEEK','1DAY','60MINUTE','30MINUTE','10MINUTE','5MINUTE'];
var database;

var queue = async.queue(function(task, callback) {
    //console.log('async.queue    ' +task.interval+"> "+ task.symbol);
    if(task.symbol){

        var symbolfile;
        try{      
            symbolfile = path.resolve(path.join(__dirname, '..', 'db/stock/'+task.interval+'/'+task.symbol+'.db'));
        }
        catch(e){
            console.log("Error > " + e);
        }

        var lokiJson = new loki(symbolfile, 
        {
            autoload: true,
            autoloadCallback : loadHandler,
            autosave: true, 
            autosaveInterval: 10000
        }); 
        
        function loadHandler() {
            var database = lokiJson.getCollection(task.symbol);
            if(!database){
                database = lokiJson.addCollection(task.symbol);
            }  
         
           var stockData = [];
            return loadSymbol(task.symbol,'NSE_EQ',task.interval,task.start_date,task.end_date).then(function (response) {
                try {
                        if(response != '' && response != undefined && response != null){
                            stockData = response;
                            if(response.error){
                                console.log('Queue error ' + JSON.stringify(response.error));
                            }
                            else if(database.get(1) && database.get(1).data && database.get(1).data.timestamp && database.get(1).data.timestamp === response.timestamp){
                                console.log('Do nothing   ' +task.interval+"> "+ task.symbol);
                            }
                            else{
                               // console.log('UPDATE   ' +task.interval+"> "+ task.symbol);
                                database.clear();
                                database.insert(stockData);      
                            }
                            lokiJson.saveDatabase();    
                            callback();         
                        } 
                        else{
                            callback();     
                        }
                      
                   // stockData = null;
                    
                  } catch (err) {
                    console.log("loadHandler queue : err   > " + err);
                    callback();    
                    //return err;
                  }
            });
           /*  var filePath = 'data/stock/'+task.interval+'/'+task.symbol+'.txt';                 
            fs.exists(filePath, function(exists) {
                if (exists){
                    fs.readFile(filePath, 'utf8', function(err, response) {
                        if (err) console.log('readFile  ' +err);
                        if(response != '' && response != undefined && response != null){
                            var obj = JSON.parse(response);
                            //console.log("read file  > " +  database +"::"+database.get(1).timestamp +" : "+ obj.timestamp);
                            if(database.get(1) && database.get(1).timestamp && database.get(1).timestamp === obj.timestamp){
                                //console.log('update   ' +task.interval+"> "+ task.symbol);
                            }
                            else{
                                console.log('****************UPDATE   ' +task.interval+"> "+ task.symbol);
                                database.clear();
                                database.insert(obj);      
                            }
                            lokiJson.saveDatabase();    
                            callback();         
                        } 
                    });
                }
                else{
                    callback();
                }
            }); */     
        }  
    } 
}, 4);

var strategy_smaCross1 = [
{
    indicators:
    [
        {indicator:'SMA',period : 20,values:"closes"},
        {indicator:'SMA',period : 50,values:"closes"}
    ],output:[],strategy:"output[0][0] >= output[1][0]"
},
{
    indicators:
    [
        {indicator:'SMA',period : 20,values:"closes"},
        {indicator:'SMA',period : 50,values:"closes"}
    ],output:[],strategy:"output[0][1] < output[1][1]"
}
]; 
var strategy_sma200 = [
    {
        indicators:
        [
            {indicator:'SMA',period : 20,values:"closes"},
            {indicator:'SMA',period : 50,values:"closes"}
        ],output:[],strategy:"output[0][0] >= output[1][0]"
    },
    {
        indicators:
        [
            {indicator:'SMA',period : 20,values:"closes"},
            {indicator:'SMA',period : 50,values:"closes"}
        ],output:[],strategy:"output[0][1] < output[1][1]"
    }
]; 
var strategy_smaCross = [
    {
        indicators:
        [
            {indicator:'SMA',period : 200,values:"closes"}
        ],output:[],strategy:"closes[0] >= output[0][0]"
    },
  /*   {
        indicators:
        [
            {indicator:'SMA',period : 200,values:"closes"}
        ],output:[],strategy:"closes[0] <= output[0][1]"
    }, */
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    }  
]; 
var strategy_rsi60_crossed = [
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][0] >= 60"
    }, 
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][1] <= 60"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    }  
]; 

var strategy_rsi40_crossed = [
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][0] <= 40"
    }, 
    {
        indicators:
        [
            {indicator:'RSI',period : 14,values:"closes"}
        ],output:[],strategy:"output[0][1] >= 40"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) <= -0.5"
    }  
]; 


var strategy_bbLower = [
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[0] <= output[0][0]['lower']"
    },
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[1] >= output[0][1]['lower']"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[0] < opens[0]"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) <= -0.5"
    }
]; 
var strategy_bbUpper_band_crossed = [
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[0] >= output[0][0]['upper']"
    },
    {
        indicators:
        [
            {indicator:'BB',period : 14,values:"closes",stdDev : 2}
        ],output:[],strategy:"closes[1] <= output[0][1]['upper']"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"closes[0] > opens[0]"
    },
    {
        indicators:
        [
            {indicator:''}
        ],output:[],strategy:"((closes[0] - opens[0]) / (highs[0] - lows[0])) >= 0.5"
    } 
]; 
  
//syncLiveAllStockData(store.get('nseSymbolList')); 
//syncLiveStockDataByInterval(store.get('nseSymbolList'),'5MINUTE'); 
//getStockDataByInterval('BATAINDIA','1DAY',strategy_rsi60);
//getAllStockDataByInterval(store.get('niftyList'),'1DAY',strategy_rsi60);
//getAllStockDataByInterval(['ULTRACEMCO','ENGINERSIN','DRREDDY','HINDALCO','LT','MINDTREE','PCJEWELLER'],'1DAY',strategy_rsi60);
//getAllStockDataByInterval(['ULTRACEMCO','VEDL','SBIN'],'1DAY');
//getAllData();
/* getAllStockDataByInterval(store.get('fnoList').sort(),'1DAY',strategy_rsi60_crossed);

getAllStockDataByInterval(store.get('fnoList').sort(),'1DAY',strategy_rsi40_crossed);

//getAllStockDataByInterval(store.get('fnoList').sort(),'1DAY',strategy_rsi60_crossed);
//getAllStockDataByInterval(['ULTRACEMCO','ENGINERSIN','DRREDDY','HINDALCO','LT','MINDTREE','PCJEWELLER'],'1DAY',strategy_bbUpper_band_crossed);
getAllStockDataByInterval(store.get('fnoList').sort(),'1DAY',strategy_bbLower); */

getAllStockDataByInterval(store.get('fnoList').sort(),'15MINUTE',strategy_rsi40_crossed);


async function syncLiveAllStockData(list,interval,start_date,end_date){ 
    //intervalsArr.map(async (interval) =>  {
        list.map(async (x) =>  {
            var symbol = x.symbol ? x.symbol:x;        
            queue.push({symbol: symbol,interval:interval,start_date:start_date,end_date:end_date}, function (err) {
              //  console.log('SyncLiveAllStockData : Finished Queue  - ' + interval);
            });
        }); 
    //});          
}

async function getAllStockDataByInterval(list,interval,strategy){ 
   // console.log("* getAllStockDataByInterval   >> "+list.length);
        Promise.all(list.map(async (x) =>  {
        var symbol = x.symbol ? x.symbol:x;    
        return getStock(symbol,interval);          
        })).then(stockData => {
      //      console.log("* getAllStockDataByInterval  "+stockData.length);
            stockData.map(async (dataObj) =>  {
                try{
                    var data = JSON.parse(dataObj.data); 
                    await getIndicator(dataObj.symbol,data,strategy,false);
                }
                catch(e){
                    console.log("Error " + e);
                }
            });   
        })
        .catch(error => { 
            console.log(error)
        }); 
}

async function syncLiveStockDataByInterval(list,interval){ 
    list.map(async (x) =>  {
        var symbol = x.symbol ? x.symbol:x;        
        queue.push({symbol: symbol,interval:interval}, function (err) {
            //console.log('syncLiveStockDataByInterval : Finished Queue' + interval);
        });       
    }); 
}

function getStockDataByInterval(symbol,interval,strategy){ 
    getStock(symbol,interval)
    .then(dataObj  => {
        //console.log("symbol  "+dataObj.symbol);
       var data = JSON.parse(dataObj.data); 
       // console.log("getStockDataByInterval \n " + data.length);
       // getIndicator(dataObj.symbol,data,strategy,true);
    }).catch(error => console.log(error));  
}

function getStock(symbol,interval)
{
    return new Promise((resolve, reject)=>{
        var symbolfile;
        try{      
            symbolfile = path.resolve(path.join(__dirname, '..', 'db/stock/'+interval+'/'+symbol+'.db'));
        }
        catch(e){
            console.log("getStock > Error > " + e);
            reject(e);
        }

        var lokiJson = new loki(symbolfile, 
        {
            autoload: true,
            autoloadCallback : loadHandler,
            autosave: true, 
            autosaveInterval: 10000
        }); 
        
        function loadHandler() {
            var database = lokiJson.getCollection(symbol);
            if(!database){
                database = lokiJson.addCollection(symbol);
            }  
                   
            try{
               // console.log("\n \n  loadHandler > " +symbol +" >> "+ database.get(1));  
                if(database.get(1) && database.get(1).data && database.get(1).data)
                    resolve({"symbol":symbol,data:JSON.stringify(database.get(1).data)}); 
                else
                    resolve({"symbol":symbol,data:[]}); 
            }
            catch(e){
                reject(e);
            }   
        } 
    }); 
}
var Upstox = require("upstox");
var moment = require('moment-timezone');
var api = "OknufM07tm1g9EfN4fHKP2Eqi9DSw40I2Y3xliHg";
var upstox = new Upstox(api);
var fs = require('fs');
var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
var code = '';
var __dirname = "views"
var exchanges =  [ 'MCX_FO', 'BSE_EQ', 'NSE_EQ', 'NSE_FO', 'NCD_FO'];
var login_code = "OknufM07tm1g9EfN4fHKP2Eqi9DSw40I2Y3xliHg";
var api_secret = "69xldylnvf";
var client_id="";
var watchList = ['banknifty','hindalco','ICICIBANK','sbin','idea','lt','HAVELLS'];
var accessToken;

function getAcceToken(code)
{
    var params = {
        "apiSecret": api_secret,
        "code": code,
        "grant_type": "authorization_code",
        "redirect_uri": redirect_uri
    };
    
    upstox.getAccessToken(params)
        .then(function (response) {
            params = api_secret = code = null;
            
         
            accessToken = response.access_token;
            store.set('accessToken', accessToken); 
            var d  = new Date();
            
            var india = moment.tz(d, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
            india.format(); 
            
            india = india.set({
                'year' : india.year(),
                'date' : india.date() + 1,
                'hour' : 9,
                'minute'  : 05, 
                'second' : 05
             });
     

            store.set('tokenValidity', india); 

            console.log("****accessToken*\n" +accessToken);
            upstox.setToken(accessToken);
            
            start();
            //res.sendFile("index.html", {"root": __dirname});
        })
        .catch(function (err) {
            console.log( "getAccessToken > " + err);
    });
}


function start() {
    // an example using an object instead of an array
    async.parallel({
        getProfile,
        getBalance,
        getListOfAllSymbol,
        getAllData
    }, function(err, results) {
        // results is now equals to: {one: 1, two: 2}
    });

    //getProfile();
       
    var bankNiftyCall;
          
    upstox.getMasterContract({exchange: "nse_fo"})
    .then(function(response) {
        //console.log("NSE FO " + JSON.stringify(response));
        
        /* bankNiftyCall = new Object();

      //  var response = JSON.parse(response);
        //console.log('\n 1.1' + response);
        var  data=csvTojs(response.data);

        //console.log("NSE FO " + JSON.stringify(data));

        var now = new Date();
        var thisMonth = months[now.getMonth()].slice(0,3).toUpperCase();
        var monthPattern = new RegExp(thisMonth, 'gi');
        
       var transformedData = JSON.parse(JSON.stringify(transformedData));
        //console.log(' >  ' + transformedData);

        var dataFrame = dataForge.fromJSON(transformedData)
        .where(row => {
     
           //console.log('\n row > ' + JSON.stringify(row));
            row = JSON.stringify(row);
           // console.log('\n row > ' + JSON.stringify(row));
           // console.log('\n symbol > ' + row.symbol);
            var isMatchingMonth  = String(row.symbol).search(monthPattern);
            var isFuture = String(row.symbol).search("FUT");

            if(isMatchingMonth >= 0 && isFuture >=0){
                console.log("\n \n MATCH  >> > " + row.symbol );
                bankNiftyCall.FUTURE = row.symbol;
                return row;
            }
        });  */
        
        console.log("FNO data >> \n \n" + transformedData);

        fs.writeFile("data/index/nse_fo.txt", JSON.stringify(response), function (err) {
            if (err) throw err;
            console.log('nse_fo File is created successfully.');
        }); 

        //checkBankNiftyExpiry();
    })
    .catch(function(err) {
        console.log("nse fo error " + JSON.stringify(err));
    });

    // Get Master Contract
    upstox.getMasterContract({ exchange: "NSE_INDEX",format:"json"})
    .then(function (response) {
        fs.writeFile("data/index/index.txt", JSON.stringify(response), function (err) {
            if (err) throw err;
            console.log('index File is created successfully.');
        }); 
    })
    .catch(function (err) {
        console.log(err);
    });

    // PlaceOrder Note : default product = I i.e intra day order will be placed.
    /*var orderObject = {
        transaction_type:"b",
        exchange:"NSE_EQ",
        symbol: "RELIANCE",
        quantity: 1,
        order_type:"m"
    };

    upstox.placeOrder(orderObject)
        .then(function(response) {
            // Order details received
            console.log(response);
        })
        .catch(function(err) {
            // Something went wrong.
            console.log(err);
        });
    */

    upstox.connectSocket()
        .then(function(){
            upstox.on("orderUpdate", function(message) {
                console.log("orderUpdate"+ message);
            });
            upstox.on("positionUpdate", function(message) {
                //message for position conversion
                console.log("positionUpdate"+ message);
            });
            upstox.on("tradeUpdate", function(message) {
                //message for trade updates
                console.log("tradeUpdate"+ message);
            });

            //console.log("niftyList" + niftyList);
            var niftyStr = niftyList.join();
            //console.log("join" + niftyStr);

            upstox.subscribeFeed({
                "exchange": "NSE_EQ",
                "symbol": niftyStr,//'BANKNIFTY27DECFUT',//NIFTY29NOVFUT NIFTY18NOVFUT,BANKNIFTY18NOVFUT
                "type": "ltp"
            })
            .then(function (response) {
                console.log('feedsymbols subscribeFeed response ', response);
            })
            .catch(function (error) {
                //res.send({ error: error });
                console.log('Error in subscribe feed ', error);
            });  

            upstox.on("liveFeed", function(message) {
                //message for live feed
                console.log("liveFeed"+ message);
            });
            upstox.on("disconnected", function(message) {
                //listener after socket connection is disconnected
                console.log("disconnected > "+ message);
            });
            upstox.on("error", function(error) {
                //error listener
                console.log("error"+ error);
            });
        }).catch(function(error) {
            console.log( "connectSocket #" + error);
    });
}


var nseSymbolList = [];
function getListOfAllSymbol()
{
   upstox.getMasterContract({ exchange: "nse_eq",format:"json" })
    .then(function (response) {
        var list = response.data;
        nseSymbolList = list.map(x => x.symbol);
        store.set('nseSymbolList', nseSymbolList); 
        //getAllData();
     })
     .catch(function (err) {
        console.log( "Error getListOfAllSymbol > " +  JSON.stringify(err));
         //getAllData();
    }); 
}

// Get Balance
var balance;
function getBalance()
{
    upstox.getBalance({ type: "security" })  // type can be security or commodity
    .then(function (response) {
        balance = JSON.stringify(response);
        /* log("****************** Balance ******************\n");
        fs.writeFile("data/balance/"+client_id+'-balance.txt', JSON.stringify(response), function (err) {
        if (err) throw err;
            log('balance is created successfully.');
        });   */
        //getListOfAllSymbol();
    })
    .catch(function (err) {
        console.log(err);
        //getListOfAllSymbol();
    });
}


var profile;
function getProfile()
{
    upstox.getProfile()
    .then(function (response) {
        client_id = response.data.client_id;
        profile = JSON.stringify(response.data);
        //getBalance();
        
            
        /* fs.writeFile("data/profile/"+client_id+'.txt', JSON.stringify(response), function (err) {
        if (err) throw err;
            log('client_id is created successfully.');
        });  

        /*  var watchList = ['dlf','hindalco','ICICIBANK','sbin','yesbank','reliance','idea','WIPRO','lt','HAVELLS']
        watchList.map(async (obj) => {
            loadAllSymbolData(obj,'1DAY','1-1-2005');
        }); 
         */
    
    })
    .catch(function (error) {
        console.log("Error"+ error);
    });
}

function getMaster(ex = "nse_fo"){ 
    if(store.get('accessToken')){
        return upstox.getMasterContract({exchange: ex});
    }    
}

function loadSymbol(symbol,exchange,interval='1day',start_date='',end_date=''){ 
    //console.log("loadSymbol > " + symbol + " > "+ interval +" > "+exchange +" > "+ start_date +" > "+ end_date+" :: "+ store.get('accessToken'));
    if(store.get('accessToken')){
        return upstox.getOHLC({"exchange": exchange,
            "symbol": symbol,
            "start_date": start_date,
            "end_date": end_date,
            "format" : "json",
            "interval" : interval
        })  
    }    
}

function getAllData(){
    var interval = '1DAY';
    var now = new Date();
    var end_date = now.getDate()+"/"+(now.getMonth() + 1)+"/"+now.getFullYear();
    now.setDate(now.getDate() - 21);
    var start_date = now.getDate()+"/"+(now.getMonth() + 1)+"/"+now.getFullYear();
    syncLiveAllStockData(store.get('fnoList'),interval,"",""); 
}

function syncStockData(){ 
    delay(10).then(() => load5minData());
    delay(1000).then(() => load3minData());
    delay(10000).then(() => load10minData());
    delay(15000).then(() => load15minData());
    delay(20000).then(() => load30minData());
    delay(30000).then(() => load60minData());
    delay(60000).then(() => load1dayData());
}

const delay = t => new Promise(resolve => setTimeout(resolve, t));

var stockData = []; 
var data = {};
var promiseArr = [];
 
async function loadAllSymbolData(response,interval='1DAY',start_date='11-11-2018'){ 
    console.log('* Step 1 : loadSymbol ');
    promiseArr = [];
    return Promise.all(response.map(function(symbol) { 
      return loadSymbol(symbol,'NSE_EQ',interval,start_date).then(function (response) {
            try {
                    console.log('* loadSymbol ' + JSON.stringify(response));
                    stockData =response.data;
                    //console.log('* loadSymbol symbol  > ' +symbol +" :: "+interval +" :: "+start_date+" :: "+ stockData);// +":: "+stockData);

                    var inputRSI = {
                        values : [],
                        period : 14
                    };
                    /* rsi = new technicalindicators.RSI(inputRSI);
                    var inputSMA = {
                        values : [],
                        period : 20
                    };
                    sma= new technicalindicators.SMA(inputSMA);
                    var inputBB = {
                        period : 14, 
                        values : [],
                        stdDev : 2 
                    }
                    bb = new technicalindicators.BollingerBands(inputBB); */
                    inputBB = inputRSI = inputSMA = null;
                    //console.log('loadSymbol  > ' + stockData);
                    
                    stockData.map(row => {
                        if(row && Number(row.close) > 0){
                            /* row.rsi = rsi.nextValue(Number(row.close));
                            row.sma = sma.nextValue(Number(row.close));
                            row.bb = bb.nextValue(Number(row.close));  */
                        }
                        row.change = getPercentageChange(Number(lastObject.close),Number(row.close)); 
                    
                        if(row.bb && Number(row.close) >= Number(row.bb.upper))// && lastObject && Number(lastObject.close) < Number(lastObject.bb.upper))
                        {
                            row.bb.isCrossed = 'Crossed Above';
                        }
                        else if(row.bb && Number(row.close) <= Number(row.bb.lower))// && lastObject && Number(lastObject.close) > Number(lastObject.bb.lower))
                        {
                            row.bb.isCrossed = 'Crossed Below';
                        }
                        lastObject = row;
                        
                        return row;
                    });
               
                stockData.reverse();
                var timestamp;
               
                if(stockData[0].timestamp > 0){
                    var d =new Date(Number(stockData[0].timestamp));
                    var india = moment.tz(d, 'DD-MM-YYYY HH:mm',"Asia/Kolkata");
                    india.format(); 
                    //console.log(india +" : "+ stockData[0].timestamp +" : "+ d);
                    if(india.minute() > 0)
                        timestamp = india.date() +"/"+(india.month()+1) +"/"+india.year()+" "+india.hour()+":"+india.minute();
                    else
                        timestamp = india.date() +"/"+(india.month()+1) +"/"+india.year();            
                }   
                
                
                data = {
                    "symbol":symbol,
                    "close":stockData[0].close,
                    "volume":stockData[0].volume,
                    "rsi":stockData[0].rsi,
                    "timestamp":timestamp,
                    "sma":stockData[0].sma, 
                    "bb":stockData[0].bb,
                    "change":stockData[0].change
                }; 
                //console.log("data   > " + JSON.stringify(data));
                stockData = null;
                promiseArr.push(data);
                return data;
              } catch (err) {
                console.log("loadAllSymbolData : err   > " + err);
                //return err;
              }
        });
    }));
}


async function getUpstoxData(response,interval='1DAY',start_date='',end_date=''){ 
    console.log('* Step 1 : loadSymbol ');
    promiseArr = [];
    return Promise.all(response.map(function(symbol) { 
      return loadSymbol(symbol,'NSE_EQ',interval,start_date,end_date).then(function (response) {
            try {
                    console.log('* loadSymbol ' + JSON.stringify(response));
                    stockData =response.data;
                    promiseArr.push(data);
                    return data;
                } catch (err) {
                console.log("loadAllSymbolData : err   > " + err);
                //return err;
                }
        });
    }));
}


// Start from https://gist.github.com/iwek/7154578#file-csv-to-json-js
// and fix the issue with double quoted values

function csvTojs(csv) {
  var lines=csv;//.split(",");
  var result = [];

  var headers = lines[0].split(",");

    

  for(var i=1; i<lines.length; i++) {
    var obj = {};

    var row = lines[i],
      queryIdx = 0,
      startValueIdx = 0,
      idx = 0;

    if (row.trim() === '') { continue; }

    while (idx < row.length) {
      /* if we meet a double quote we skip until the next one */
      var c = row[idx];

      if (c === '"') {
        do { c = row[++idx]; } while (c !== '"' && idx < row.length - 1);
      }

      if (c === ',' || /* handle end of line with no comma */ idx === row.length - 1) {
        /* we've got a value */
        var value = row.substr(startValueIdx, idx - startValueIdx).trim();

        /* skip first double quote */
        if (value[0] === '"') { value = value.substr(1); }
        /* skip last comma */
        if (value[value.length - 1] === ',') { value = value.substr(0, value.length - 1); }
        /* skip last double quote */
        if (value[value.length - 1] === '"') { value = value.substr(0, value.length - 1); }

        var key = headers[queryIdx++];
        obj[key] = value;
        startValueIdx = idx + 1;
      }

      ++idx;
    }

    result.push(obj);
  }
  return result;
}

function getPercentageChange(oldNumber, newNumber){
  var decreaseValue = newNumber - oldNumber;

  return ((decreaseValue / oldNumber) * 100).toFixed(2);
}